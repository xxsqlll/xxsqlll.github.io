<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python数据分析基础</title>
    <url>/posts/815dc570/</url>
    <content><![CDATA[<h1 id="1-基础回顾"><a href="#1-基础回顾" class="headerlink" title="1. 基础回顾"></a>1. 基础回顾</h1><h2 id="1-1-数据分析流程"><a href="#1-1-数据分析流程" class="headerlink" title="1.1 数据分析流程"></a>1.1 数据分析流程</h2><p>STEP 1 提出问题<br>STEP 2 收集数据<br>STEP 3 数据处理与清洗<br>STEP 4 数据分析<br>STEP 5 可视化，得出结论</p>
<hr>
<h2 id="STEP-2-读取数据"><a href="#STEP-2-读取数据" class="headerlink" title="STEP 2 读取数据"></a>STEP 2 读取数据</h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 使用import导入pandas模块，简称pd </span></span><br><span class="line"><span class="keyword">import</span> pandas ad pd</span><br><span class="line">读取文件，并赋值给<span class="class"><span class="keyword">data</span></span></span><br><span class="line"><span class="class"><span class="keyword">data</span> = pd.read_csv(&#x27;/<span class="type">Users</span>/<span class="title">junjun</span>/<span class="title">store</span>.<span class="title">csv&#x27;</span>)</span></span><br><span class="line"><span class="title">print</span>(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">        订单ID    订单日期    用户ID 邮寄方式  地区 省/自治区  商品类别  子类别     制造商                  产品名称  订单量    销售额</span><br><span class="line"><span class="number">0</span>     <span class="keyword">A</span><span class="number">1000001</span>    <span class="number">2018/1/1</span>  CG-<span class="number">12520</span>     二级  中南      湖南  办公用品  收纳具     Rogers     Rogers 文件车, 单宽度     <span class="number">0</span>.<span class="number">0</span>  <span class="number">261.9600</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">A</span><span class="number">1000001</span>    <span class="number">2018/1/1</span>  CG-<span class="number">12520</span>     二级  中南      湖南      家具    桌子   Barricks       Barricks 圆桌, 白色     <span class="number">1</span>.<span class="number">0</span>  <span class="number">731.9400</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">A</span><span class="number">1000001</span>    <span class="number">2018/1/1</span>  DV-<span class="number">13045</span>     二级  中南      湖南      技术    电话     诺基亚     诺基亚 智能手机, 整包     <span class="number">0</span>.<span class="number">0</span>  <span class="number">957.5775</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">A</span><span class="number">1000001</span>    <span class="number">2018/1/1</span>  SO-<span class="number">20335</span>     二级  中南      湖南      技术    配件     贝尔金       贝尔金 记忆卡, 实惠     <span class="number">0</span>.<span class="number">0</span>   <span class="number">14</span>.<span class="number">7500</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">A</span><span class="number">1000003</span>    <span class="number">2018/1/2</span>  SO-<span class="number">20335</span>     二级  华东      福建  办公用品  收纳具     Rogers           Rogers 盒, 工业     <span class="number">0</span>.<span class="number">0</span>   <span class="number">22</span>.<span class="number">3700</span></span><br><span class="line">...        ...         ...       ...      ...   ...       ...       ...     ...        ...                       ...     ...       ...</span><br><span class="line"><span class="number">9930</span>  <span class="keyword">A</span><span class="number">1004918</span>  <span class="number">2021/12/30</span>  PK-<span class="number">19075</span>   标准级  中南      广东      技术  复印机       夏普           夏普 墨水, 红色     NaN       NaN</span><br><span class="line"><span class="number">9931</span>  <span class="keyword">A</span><span class="number">1004918</span>  <span class="number">2021/12/30</span>  AG-<span class="number">10270</span>   标准级  中南      广东      技术    电话       三星       三星 音频基座, 蓝色     NaN       NaN</span><br><span class="line"><span class="number">9932</span>  <span class="keyword">A</span><span class="number">1004924</span>  <span class="number">2021/12/30</span>  ZD-<span class="number">21925</span>   标准级  中南      广东      技术    设备       松下     松下 收据打印机, 耐用     NaN       NaN</span><br><span class="line"><span class="number">9933</span>  <span class="keyword">A</span><span class="number">1004924</span>  <span class="number">2021/12/30</span>  SO-<span class="number">20335</span>   标准级  中南      广东      技术    配件    Enermax        Enermax 键区, 回收     NaN       NaN</span><br><span class="line"><span class="number">9934</span>  <span class="keyword">A</span><span class="number">1004919</span>  <span class="number">2021/12/30</span>  SO-<span class="number">20335</span>   标准级  中南      湖南  办公用品    信封  GlobeWeis  GlobeWeis 搭扣信封, 回收     NaN       NaN</span><br><span class="line"></span><br><span class="line">[<span class="number">9935</span> rows x <span class="number">12</span> columns]</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="STEP-3-1-数据处理"><a href="#STEP-3-1-数据处理" class="headerlink" title="STEP 3.1 数据处理"></a>STEP 3.1 数据处理</h2><p><strong>清洗数据</strong>的流程如下：</p>
<ul>
<li>识别并处理<strong>缺失值</strong></li>
<li>识别并处理<strong>异常值</strong></li>
<li>识别并处理<strong>重复值</strong></li>
</ul>
<h3 id="1-识别并处理缺失值-info-函数"><a href="#1-识别并处理缺失值-info-函数" class="headerlink" title="1. 识别并处理缺失值 (info()函数)"></a>1. 识别并处理缺失值 (info()函数)</h3><p><strong>识别缺失值</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">data</span> = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line"><span class="keyword">data</span>.info()</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex:<span class="number"> 9935 </span>entries,<span class="number"> 0 </span>to 9934</span><br><span class="line">Data columns (total<span class="number"> 12 </span>columns):</span><br><span class="line"> <span class="comment">#   Column  Non-Null Count  Dtype  </span></span><br><span class="line">---  ------  --------------  -----  </span><br><span class="line"><span class="number"> 0 </span>  订单ID   <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 1 </span>  订单日期   <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 2 </span>  用户ID   <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 3 </span>  邮寄方式   <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 4 </span>  地区     <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 5 </span>  省/自治区  <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 6 </span>  商品类别   <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 7 </span>  子类别    <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 8 </span>  制造商    <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 9 </span>  产品名称   <span class="number"> 9935 </span>non-null   object </span><br><span class="line"><span class="number"> 10 </span> 订单量    <span class="number"> 8427 </span>non-null   float64</span><br><span class="line"><span class="number"> 11 </span> 销售额    <span class="number"> 9923 </span>non-null   float64</span><br><span class="line">dtypes: float64(2), object(10)</span><br><span class="line">memory usage: 931.5+ KB</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，这份数据集的总行数为9935；订单量和销售额这两列的非空数据都小于数据总行数；说明存在少量缺失值。</p>
</blockquote>
<p><strong>处理缺失值</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(&quot;/Users/junjun/store.csv&quot;)</span><br><span class="line"># 使用布尔索引和<span class="keyword">isnull</span>()函数，将&quot;订单量&quot;的缺失值筛选出，赋值给变量quanNull</span><br><span class="line">quanNull = data[data[&quot;订单量&quot;].<span class="keyword">isnull</span>()]</span><br><span class="line"># 使用<span class="keyword">drop</span>()函数，将包含所有&quot;订单量&quot;这一列缺失值的行删除</span><br><span class="line">data.<span class="keyword">drop</span>(<span class="keyword">index</span> = quanNull.<span class="keyword">index</span>, inplace = <span class="keyword">True</span>)</span><br><span class="line"># 使用<span class="keyword">info</span>()快速查看</span><br><span class="line">data.<span class="keyword">info</span>()</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">Int64Index:<span class="number"> 8427 </span>entries,<span class="number"> 0 </span>to 9927</span><br><span class="line">Data columns (total<span class="number"> 12 </span>columns):</span><br><span class="line"> <span class="comment">#   Column  Non-Null Count  Dtype  </span></span><br><span class="line">---  ------  --------------  -----  </span><br><span class="line"><span class="number"> 0 </span>  订单ID   <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 1 </span>  订单日期   <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 2 </span>  用户ID   <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 3 </span>  邮寄方式   <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 4 </span>  地区     <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 5 </span>  省/自治区  <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 6 </span>  商品类别   <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 7 </span>  子类别    <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 8 </span>  制造商    <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 9 </span>  产品名称   <span class="number"> 8427 </span>non-null   object </span><br><span class="line"><span class="number"> 10 </span> 订单量    <span class="number"> 8427 </span>non-null   float64</span><br><span class="line"><span class="number"> 11 </span> 销售额    <span class="number"> 8427 </span>non-null   float64</span><br><span class="line">dtypes: float64(2), object(10)</span><br><span class="line">memory usage: 855.9+ KB</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，所有列的非空数据都与最新的数据总行数 8427 保持一致，说明缺失值已经全部删除了，不需要再对销售额这列进行处理。</p>
</blockquote>
<h3 id="2-识别并处理异常值"><a href="#2-识别并处理异常值" class="headerlink" title="2. 识别并处理异常值"></a>2. 识别并处理异常值</h3><p><strong>识别异常值(describe())</strong></p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas as pd</span><br><span class="line"><span class="keyword">data</span> = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= <span class="keyword">data</span>[<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line"><span class="keyword">data</span>.drop(<span class="built_in">index</span>=quanNull.<span class="built_in">index</span>, inplace=True)</span><br><span class="line"># 查看<span class="keyword">data</span>的描述性统计信息</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">data</span>.describe())</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">             订单量        销售额</span><br><span class="line">count  8.427000e<span class="string">+03</span>   8427.000000</span><br><span class="line">mean   7.120099e<span class="string">+05</span>    228.706704</span><br><span class="line">std    2.667536e<span class="string">+07</span>    574.583183</span><br><span class="line">min    0.000000e<span class="string">+00</span>      0.836000</span><br><span class="line">25%    3.000000e<span class="string">+00</span>     17.691000</span><br><span class="line">50%    8.000000e<span class="string">+00</span>     56.910000</span><br><span class="line">75%    2.000000e<span class="string">+01</span>    217.807000</span><br><span class="line">max    1.000000e<span class="string">+09</span>  21150.800000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出结果中，很多数字后面都有 e+01、e+09、… 之类的后缀，这是一种科学计数法，代表10的n次方。<br>可以看到，上述输出结果中订单的最小量和最大量都是异常值</p>
</blockquote>
<p><strong>处理异常值</strong><br>处理异常值非常简单，我们只需通过布尔索引，将订单量这一列值里大于0，以及小于100000000（1.000000e+08）的数据筛选出来，重新赋值给data即可。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">data</span> = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= <span class="keyword">data</span>[<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line"><span class="keyword">data</span>.drop(index=quanNull.index, inplace=True)</span><br><span class="line"># 使用布尔索引筛选出<span class="string">&quot;订单量&quot;</span>这一列值里大于<span class="number">0</span>且小于<span class="number">100000000</span>的数据</span><br><span class="line"><span class="keyword">data</span> = <span class="keyword">data</span>[(<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>]&gt;<span class="number">0</span>) &amp; (<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>]&lt;<span class="number">100000000</span>)]</span><br><span class="line">print(<span class="keyword">data</span>.describe())</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">            订单量        销售额</span><br><span class="line">count  <span class="number">8359</span>.<span class="number">000000</span>   <span class="number">8359</span>.<span class="number">000000</span></span><br><span class="line">mean     <span class="number">12.868645</span>    <span class="number">228.403511</span></span><br><span class="line">std      <span class="number">24.561811</span>    <span class="number">574</span>.<span class="number">401657</span></span><br><span class="line">min       <span class="number">1.000000</span>      <span class="number">0.836000</span></span><br><span class="line"><span class="number">25</span>%       <span class="number">4.000000</span>     <span class="number">17.610000</span></span><br><span class="line"><span class="number">50</span>%       <span class="number">8.000000</span>     <span class="number">56.560000</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">20.000000</span>    <span class="number">217.248000</span></span><br><span class="line">max    <span class="number">2000</span>.<span class="number">000000</span>  <span class="number">21150</span>.<span class="number">800000</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，订单量目前的范围在1至2000之间，是一个较合理的订单量范围，不需要再进行数据筛选</p>
</blockquote>
<h3 id="3-识别并处理重复值"><a href="#3-识别并处理重复值" class="headerlink" title="3. 识别并处理重复值"></a>3. 识别并处理重复值</h3><p><strong>识别重复值(duplicated())</strong><br>duplicated()函数会对每一个数据是否和之前数据重复进行判断。重复值返回为True，不是重复值返回为False。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">data</span> = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= <span class="keyword">data</span>[<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line"><span class="keyword">data</span>.drop(index=quanNull.index, inplace=True)</span><br><span class="line"><span class="keyword">data</span> = <span class="keyword">data</span>[(<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>]&gt;<span class="number">0</span>) &amp; (<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>]&lt;<span class="number">100000000</span>)]</span><br><span class="line"># 使用布尔索引和duplicated()函数，将<span class="keyword">data</span>中重复的行筛选出来</span><br><span class="line">dup = <span class="keyword">data</span>[<span class="keyword">data</span>.duplicated()]</span><br><span class="line">print(dup)</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Empty</span> DataFrame</span><br><span class="line"><span class="attribute">Columns</span>:<span class="meta"> [订单ID, 订单日期, 用户ID, 邮寄方式, 地区, 省/自治区, 商品类别, 子类别, 制造商, 产品名称, 订单量, 销售额]</span></span><br><span class="line"><span class="attribute">Index</span>:<span class="meta"> []</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后使用print()输出的是一个Empty DataFrame，代表是一个空DataFrame，说明没有重复的行，因此不需要处理。</p>
</blockquote>
<hr>
<h2 id="STEP-3-2-数据清洗"><a href="#STEP-3-2-数据清洗" class="headerlink" title="STEP 3.2 数据清洗"></a>STEP 3.2 数据清洗</h2><h3 id="1-字符串转时间（pd-to-datetime-）"><a href="#1-字符串转时间（pd-to-datetime-）" class="headerlink" title="1. 字符串转时间（pd.to_datetime()）"></a>1. 字符串转时间（pd.to_datetime()）</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">data</span> = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= <span class="keyword">data</span>[<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line"><span class="keyword">data</span>.drop(index=quanNull.index, inplace=True)</span><br><span class="line"><span class="keyword">data</span> = <span class="keyword">data</span>[(<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>]&gt;<span class="number">0</span>) &amp; (<span class="keyword">data</span>[<span class="string">&quot;订单量&quot;</span>]&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = <span class="keyword">data</span>[<span class="keyword">data</span>.duplicated()]</span><br><span class="line"># 使用pd.to_datetime()函数，将<span class="string">&quot;订单日期&quot;</span>列的数据转化为时间格式</span><br><span class="line"><span class="keyword">data</span>[<span class="string">&quot;订单日期&quot;</span>] = pd.to_datetime(<span class="keyword">data</span>[<span class="string">&quot;订单日期&quot;</span>])</span><br><span class="line">print(<span class="keyword">data</span>[<span class="string">&quot;订单日期&quot;</span>])</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">1      2018<span class="string">-01</span><span class="string">-01</span></span><br><span class="line">6      2018<span class="string">-01</span><span class="string">-02</span></span><br><span class="line">7      2018<span class="string">-01</span><span class="string">-02</span></span><br><span class="line">11     2018<span class="string">-01</span><span class="string">-03</span></span><br><span class="line">13     2018<span class="string">-01</span><span class="string">-03</span></span><br><span class="line">          ...    </span><br><span class="line">9919   2021<span class="string">-12</span><span class="string">-30</span></span><br><span class="line">9920   2021<span class="string">-12</span><span class="string">-30</span></span><br><span class="line">9921   2021<span class="string">-12</span><span class="string">-30</span></span><br><span class="line">9924   2021<span class="string">-12</span><span class="string">-30</span></span><br><span class="line">9927   2021<span class="string">-12</span><span class="string">-30</span></span><br><span class="line">Name: 订单日期, Length: 8359, dtype: datetime64[ns]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到已经成功转换为datetime类型。</p>
</blockquote>
<hr>
<h2 id="STEP-4-5-数据分析、可视化、得出结论"><a href="#STEP-4-5-数据分析、可视化、得出结论" class="headerlink" title="STEP 4&amp;5 数据分析、可视化、得出结论"></a>STEP 4&amp;5 数据分析、可视化、得出结论</h2><blockquote>
<p>时间维度销售额的分析，下面使用折线图</p>
</blockquote>
<h3 id="1-添加年份信息，修改行索引"><a href="#1-添加年份信息，修改行索引" class="headerlink" title="1. 添加年份信息，修改行索引"></a>1. 添加年份信息，修改行索引</h3><p>数据中并没有年份信息，使用data[“订单日期”].dt.year获取 “订单日期” 这列数据的年份信息，并将其作为新列添加到data中。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data[data[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line">data.drop(index=quanNull.index, inplace=<span class="symbol">True</span>)</span><br><span class="line">data = data[(data[<span class="string">&quot;订单量&quot;</span>]&gt;<span class="number">0</span>) &amp; (data[<span class="string">&quot;订单量&quot;</span>]&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = data[data.duplicated()]</span><br><span class="line">data[<span class="string">&quot;订单日期&quot;</span>] = pd.to_datetime(data[<span class="string">&quot;订单日期&quot;</span>])</span><br><span class="line"># 使用data[<span class="string">&quot;订单日期&quot;</span>].dt.year获取 <span class="string">&quot;订单日期&quot;</span> 这列数据的年</span><br><span class="line">data[<span class="string">&quot;年份&quot;</span>] = data[<span class="string">&quot;订单日期&quot;</span>].dt.year</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">        订单ID   订单日期    用户ID 邮寄方式  地区 省/自治区  商品类别  子类别      制造商                 产品名称  订单量    销售额  年份</span><br><span class="line"><span class="number">1</span>     <span class="keyword">A</span><span class="number">1000001</span> <span class="number">2018-01-01</span>  CG-<span class="number">12520</span>     二级  中南      湖南      家具    桌子    Barricks      Barricks 圆桌, 白色     <span class="number">1</span>.<span class="number">0</span>   <span class="number">731.940</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">6</span>     <span class="keyword">A</span><span class="number">1000003</span> <span class="number">2018-01-02</span>  BH-<span class="number">11710</span>     二级  华东      福建      技术  复印机        佳能          佳能 墨水, 红色     <span class="number">1</span>.<span class="number">0</span>     <span class="number">7</span>.<span class="number">280</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">7</span>     <span class="keyword">A</span><span class="number">1000003</span> <span class="number">2018-01-02</span>  BH-<span class="number">11710</span>     二级  华东      福建      技术    电话      诺基亚  诺基亚 充电器, 混合尺寸     <span class="number">8</span>.<span class="number">0</span>   <span class="number">907.152</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">11</span>    <span class="keyword">A</span><span class="number">1000004</span> <span class="number">2018-01-03</span>  BH-<span class="number">11710</span>   标准级  东北      辽宁  办公用品    器具   Cuisinart     Cuisinart 炉灶, 白色     <span class="number">1</span>.<span class="number">0</span>   <span class="number">911.424</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">13</span>    <span class="keyword">A</span><span class="number">1000004</span> <span class="number">2018-01-03</span>  IM-<span class="number">15070</span>   标准级  东北      辽宁  办公用品  装订机       Ibico     Ibico 装订机盖, 透明    <span class="number">10</span>.<span class="number">0</span>   <span class="number">407.976</span>  <span class="number">2018</span></span><br><span class="line">...        ...        ...       ...      ...   ...       ...       ...     ...         ...                      ...     ...       ...   ...</span><br><span class="line"><span class="number">9919</span>  <span class="keyword">A</span><span class="number">1004923</span> <span class="number">2021-12-30</span>  AG-<span class="number">10525</span>     二级  中南      广东      技术    设备        松下        松下 计算器, 红色    <span class="number">29</span>.<span class="number">0</span>     <span class="number">2</span>.<span class="number">880</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">9920</span>  <span class="keyword">A</span><span class="number">1004925</span> <span class="number">2021-12-30</span>  SP-<span class="number">20860</span>   标准级  华东      山东  办公用品    器具      Hoover  Hoover 咖啡研磨机, 红色    <span class="number">17</span>.<span class="number">0</span>  <span class="number">1091.930</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">9921</span>  <span class="keyword">A</span><span class="number">1004916</span> <span class="number">2021-12-30</span>  BH-<span class="number">11710</span>   标准级  华北      山西  办公用品  装订机       Avery   Avery 孔加固材料, 透明     <span class="number">9</span>.<span class="number">0</span>   <span class="number">111.960</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">9924</span>  <span class="keyword">A</span><span class="number">1004926</span> <span class="number">2021-12-30</span>  BH-<span class="number">11710</span>   标准级  东北      辽宁  办公用品    器具      Hoover      Hoover 微波炉, 黑色     <span class="number">5</span>.<span class="number">0</span>  <span class="number">4920.000</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">9927</span>  <span class="keyword">A</span><span class="number">1004922</span> <span class="number">2021-12-30</span>  IM-<span class="number">15070</span>   标准级  中南      广西      家具    桌子  Chromcraft  Chromcraft 培训桌, 黑色     <span class="number">1</span>.<span class="number">0</span>  <span class="number">1100.000</span>  <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">[<span class="number">8359</span> rows x <span class="number">13</span> columns]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过输出可以看到，已在data变量中成功添加了一列年份信息数据。</p>
</blockquote>
<p><strong>注意：</strong> 重采样需要根据<strong>时间格式的行索引</strong>来进行操作，否则会出现报错。因此，为了在处理过程中更加方便，我们通常会把数据中<strong>时间格式的列</strong>作为行索引index后，再进行重采样。可以使用<strong>set_index()函数</strong>将data[“订单日期”]设置成data变量的行索引index。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd<span class="selector-class">.read_csv</span>(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data<span class="selector-attr">[data[<span class="string">&quot;订单量&quot;</span>]</span><span class="selector-class">.isnull</span>()]</span><br><span class="line">data<span class="selector-class">.drop</span>(index=quanNull<span class="selector-class">.index</span>, inplace=True)</span><br><span class="line">data = data<span class="selector-attr">[(data[<span class="string">&quot;订单量&quot;</span>]</span>&gt;<span class="number">0</span>) &amp; (data<span class="selector-attr">[<span class="string">&quot;订单量&quot;</span>]</span>&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = data<span class="selector-attr">[data.duplicated()]</span></span><br><span class="line">data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span> = pd<span class="selector-class">.to_datetime</span>(data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span>)</span><br><span class="line">data<span class="selector-attr">[<span class="string">&quot;年份&quot;</span>]</span> = data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span><span class="selector-class">.dt</span><span class="selector-class">.year</span></span><br><span class="line">data = data<span class="selector-class">.set_index</span>(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(data)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">              订单ID    用户ID 邮寄方式  地区 省/自治区  商品类别  子类别      制造商                 产品名称  订单量    销售额  年份</span><br><span class="line">订单日期                                                                                                                              </span><br><span class="line"><span class="number">2018-01-01</span>  <span class="keyword">A</span><span class="number">1000001</span>  CG-<span class="number">12520</span>     二级  中南      湖南      家具    桌子    Barricks      Barricks 圆桌, 白色     <span class="number">1</span>.<span class="number">0</span>   <span class="number">731.940</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">2018-01-02</span>  <span class="keyword">A</span><span class="number">1000003</span>  BH-<span class="number">11710</span>     二级  华东      福建      技术  复印机        佳能          佳能 墨水, 红色     <span class="number">1</span>.<span class="number">0</span>     <span class="number">7</span>.<span class="number">280</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">2018-01-02</span>  <span class="keyword">A</span><span class="number">1000003</span>  BH-<span class="number">11710</span>     二级  华东      福建      技术    电话      诺基亚  诺基亚 充电器, 混合尺寸     <span class="number">8</span>.<span class="number">0</span>   <span class="number">907.152</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">2018-01-03</span>  <span class="keyword">A</span><span class="number">1000004</span>  BH-<span class="number">11710</span>   标准级  东北      辽宁  办公用品    器具   Cuisinart     Cuisinart 炉灶, 白色     <span class="number">1</span>.<span class="number">0</span>   <span class="number">911.424</span>  <span class="number">2018</span></span><br><span class="line"><span class="number">2018-01-03</span>  <span class="keyword">A</span><span class="number">1000004</span>  IM-<span class="number">15070</span>   标准级  东北      辽宁  办公用品  装订机       Ibico     Ibico 装订机盖, 透明    <span class="number">10</span>.<span class="number">0</span>   <span class="number">407.976</span>  <span class="number">2018</span></span><br><span class="line">...              ...       ...      ...   ...       ...       ...     ...         ...                      ...     ...       ...   ...</span><br><span class="line"><span class="number">2021-12-30</span>  <span class="keyword">A</span><span class="number">1004923</span>  AG-<span class="number">10525</span>     二级  中南      广东      技术    设备        松下        松下 计算器, 红色    <span class="number">29</span>.<span class="number">0</span>     <span class="number">2</span>.<span class="number">880</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">2021-12-30</span>  <span class="keyword">A</span><span class="number">1004925</span>  SP-<span class="number">20860</span>   标准级  华东      山东  办公用品    器具      Hoover  Hoover 咖啡研磨机, 红色    <span class="number">17</span>.<span class="number">0</span>  <span class="number">1091.930</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">2021-12-30</span>  <span class="keyword">A</span><span class="number">1004916</span>  BH-<span class="number">11710</span>   标准级  华北      山西  办公用品  装订机       Avery   Avery 孔加固材料, 透明     <span class="number">9</span>.<span class="number">0</span>   <span class="number">111.960</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">2021-12-30</span>  <span class="keyword">A</span><span class="number">1004926</span>  BH-<span class="number">11710</span>   标准级  东北      辽宁  办公用品    器具      Hoover      Hoover 微波炉, 黑色     <span class="number">5</span>.<span class="number">0</span>  <span class="number">4920.000</span>  <span class="number">2021</span></span><br><span class="line"><span class="number">2021-12-30</span>  <span class="keyword">A</span><span class="number">1004922</span>  IM-<span class="number">15070</span>   标准级  中南      广西      家具    桌子  Chromcraft  Chromcraft 培训桌, 黑色     <span class="number">1</span>.<span class="number">0</span>  <span class="number">1100.000</span>  <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">[<span class="number">8359</span> rows x <span class="number">12</span> columns]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>data变量的行索引index已经变成data[“订单日期”]</p>
</blockquote>
<h3 id="2-完成分组、重采样和聚合操作"><a href="#2-完成分组、重采样和聚合操作" class="headerlink" title="2. 完成分组、重采样和聚合操作"></a>2. 完成分组、重采样和聚合操作</h3><p>先对data[“销售额”]使用<strong>groupby()函数</strong>，按照data[“年份”]进行分组，这样最后的结果里就只会有销售额，不包含其它无关信息，比如订单量等。再按月（”M”）进行重采样，最后求和</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data[data[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line">data.drop(index=quanNull.index, inplace=<span class="symbol">True</span>)</span><br><span class="line">data = data[(data[<span class="string">&quot;订单量&quot;</span>]&gt;<span class="number">0</span>) &amp; (data[<span class="string">&quot;订单量&quot;</span>]&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = data[data.duplicated()]</span><br><span class="line">data[<span class="string">&quot;订单日期&quot;</span>] = pd.to_datetime(data[<span class="string">&quot;订单日期&quot;</span>])</span><br><span class="line">data[<span class="string">&quot;年份&quot;</span>] = data[<span class="string">&quot;订单日期&quot;</span>].dt.year</span><br><span class="line">data = data.set_index(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line"># 使用groupby()、resample()和sum()函数</span><br><span class="line"># 计算每年每个月的销售额总和</span><br><span class="line"># 将结果赋值给变量groupByMonth</span><br><span class="line">groupByMonth = data[<span class="string">&quot;销售额&quot;</span>].groupby(data[<span class="string">&quot;年份&quot;</span>]).resample(<span class="string">&quot;M&quot;</span>).sum()</span><br><span class="line">print(groupByMonth)</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">年份  订单日期  </span><br><span class="line"><span class="number">2018</span>  <span class="number">2018-01-31</span>    <span class="number">22566.1042</span></span><br><span class="line">      <span class="number">2018-02-28</span>    <span class="number">23144.3480</span></span><br><span class="line">      <span class="number">2018-03-31</span>    <span class="number">25522.3735</span></span><br><span class="line">      <span class="number">2018-04-30</span>    <span class="number">23139.5750</span></span><br><span class="line">      <span class="number">2018-05-31</span>    <span class="number">32174.7999</span></span><br><span class="line">      <span class="number">2018-06-30</span>    <span class="number">18060.7580</span></span><br><span class="line">      <span class="number">2018-07-31</span>    <span class="number">16174.5780</span></span><br><span class="line">      <span class="number">2018-08-31</span>    <span class="number">16740.8600</span></span><br><span class="line">      <span class="number">2018-09-30</span>    <span class="number">37105.7730</span></span><br><span class="line">      <span class="number">2018-10-31</span>    <span class="number">36809.5635</span></span><br><span class="line">      <span class="number">2018-11-30</span>    <span class="number">41231.6180</span></span><br><span class="line">      <span class="number">2018-12-31</span>    <span class="number">41863.3650</span></span><br><span class="line"><span class="number">2019</span>  <span class="number">2019-01-31</span>    <span class="number">15334.4520</span></span><br><span class="line">      <span class="number">2019-02-28</span>    <span class="number">13034.6675</span></span><br><span class="line">      <span class="number">2019-03-31</span>    <span class="number">24347.5720</span></span><br><span class="line">      <span class="number">2019-04-30</span>    <span class="number">17272.8980</span></span><br><span class="line">      <span class="number">2019-05-31</span>    <span class="number">50999.7048</span></span><br><span class="line">      <span class="number">2019-06-30</span>    <span class="number">39738.4415</span></span><br><span class="line">      <span class="number">2019-07-31</span>    <span class="number">25785.6190</span></span><br><span class="line">      <span class="number">2019-08-31</span>    <span class="number">44589.5558</span></span><br><span class="line">      <span class="number">2019-09-30</span>    <span class="number">46704.0544</span></span><br><span class="line">      <span class="number">2019-10-31</span>    <span class="number">50055.8980</span></span><br><span class="line">      <span class="number">2019-11-30</span>    <span class="number">48614.6996</span></span><br><span class="line">      <span class="number">2019-12-31</span>    <span class="number">45903.7410</span></span><br><span class="line"><span class="number">2020</span>  <span class="number">2020-01-31</span>    <span class="number">16332.7460</span></span><br><span class="line">      <span class="number">2020-02-29</span>    <span class="number">14598.6618</span></span><br><span class="line">      <span class="number">2020-03-31</span>    <span class="number">24996.9080</span></span><br><span class="line">      <span class="number">2020-04-30</span>    <span class="number">39868.3176</span></span><br><span class="line">      <span class="number">2020-05-31</span>    <span class="number">57884.6615</span></span><br><span class="line">      <span class="number">2020-06-30</span>    <span class="number">46831.8548</span></span><br><span class="line">      <span class="number">2020-07-31</span>    <span class="number">32613.6996</span></span><br><span class="line">      <span class="number">2020-08-31</span>    <span class="number">61303.1732</span></span><br><span class="line">      <span class="number">2020-09-30</span>    <span class="number">55374.4992</span></span><br><span class="line">      <span class="number">2020-10-31</span>    <span class="number">56474.6272</span></span><br><span class="line">      <span class="number">2020-11-30</span>    <span class="number">59541.0070</span></span><br><span class="line">      <span class="number">2020-12-31</span>    <span class="number">60721.6270</span></span><br><span class="line"><span class="number">2021</span>  <span class="number">2021-01-31</span>    <span class="number">26416.4390</span></span><br><span class="line">      <span class="number">2021-02-28</span>    <span class="number">14909.8110</span></span><br><span class="line">      <span class="number">2021-03-31</span>    <span class="number">26170.4220</span></span><br><span class="line">      <span class="number">2021-04-30</span>    <span class="number">40519.7280</span></span><br><span class="line">      <span class="number">2021-05-31</span>    <span class="number">59442.6325</span></span><br><span class="line">      <span class="number">2021-06-30</span>    <span class="number">54836.0220</span></span><br><span class="line">      <span class="number">2021-07-31</span>    <span class="number">58313.3274</span></span><br><span class="line">      <span class="number">2021-08-31</span>    <span class="number">76936.9230</span></span><br><span class="line">      <span class="number">2021-09-30</span>    <span class="number">66457.3419</span></span><br><span class="line">      <span class="number">2021-10-31</span>    <span class="number">58884.2160</span></span><br><span class="line">      <span class="number">2021-11-30</span>    <span class="number">63051.7894</span></span><br><span class="line">      <span class="number">2021-12-31</span>    <span class="number">79829.4934</span></span><br><span class="line">Name: 销售额, dtype: float64</span><br></pre></td></tr></table></figure>
<h3 id="3-依据groupByMonth画出折线图"><a href="#3-依据groupByMonth画出折线图" class="headerlink" title="3. 依据groupByMonth画出折线图"></a>3. 依据groupByMonth画出折线图</h3><p>将每年对应的销售额绘制成一个折线图，并将四年的折线图都放在一个画布里来展示。<br>通过 <strong>.loc</strong> 属性，访问groupByMonth的多层索引，将每年的数据依次提取出来</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd<span class="selector-class">.read_csv</span>(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data<span class="selector-attr">[data[<span class="string">&quot;订单量&quot;</span>]</span><span class="selector-class">.isnull</span>()]</span><br><span class="line">data<span class="selector-class">.drop</span>(index=quanNull<span class="selector-class">.index</span>, inplace=True)</span><br><span class="line">data = data<span class="selector-attr">[(data[<span class="string">&quot;订单量&quot;</span>]</span>&gt;<span class="number">0</span>) &amp; (data<span class="selector-attr">[<span class="string">&quot;订单量&quot;</span>]</span>&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = data<span class="selector-attr">[data.duplicated()]</span></span><br><span class="line">data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span> = pd<span class="selector-class">.to_datetime</span>(data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span>)</span><br><span class="line">data<span class="selector-attr">[<span class="string">&quot;年份&quot;</span>]</span> = data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span><span class="selector-class">.dt</span><span class="selector-class">.year</span></span><br><span class="line">data = data<span class="selector-class">.set_index</span>(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line">groupByMonth = data<span class="selector-attr">[<span class="string">&quot;销售额&quot;</span>]</span><span class="selector-class">.groupby</span>(data<span class="selector-attr">[<span class="string">&quot;年份&quot;</span>]</span>)<span class="selector-class">.resample</span>(<span class="string">&quot;M&quot;</span>)<span class="selector-class">.sum</span>()</span><br><span class="line">year_2018 = groupByMonth<span class="selector-class">.loc</span><span class="selector-attr">[2018]</span></span><br><span class="line">year_2019 = groupByMonth<span class="selector-class">.loc</span><span class="selector-attr">[2019]</span></span><br><span class="line">year_2020 = groupByMonth<span class="selector-class">.loc</span><span class="selector-attr">[2020]</span></span><br><span class="line">year_2021 = groupByMonth<span class="selector-class">.loc</span><span class="selector-attr">[2021]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(yrea_2021)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">订单日期</span><br><span class="line"><span class="number">2021-01-31</span>    <span class="number">26416.4390</span></span><br><span class="line"><span class="number">2021-02-28</span>    <span class="number">14909.8110</span></span><br><span class="line"><span class="number">2021-03-31</span>    <span class="number">26170.4220</span></span><br><span class="line"><span class="number">2021-04-30</span>    <span class="number">40519.7280</span></span><br><span class="line"><span class="number">2021-05-31</span>    <span class="number">59442.6325</span></span><br><span class="line"><span class="number">2021-06-30</span>    <span class="number">54836.0220</span></span><br><span class="line"><span class="number">2021-07-31</span>    <span class="number">58313.3274</span></span><br><span class="line"><span class="number">2021-08-31</span>    <span class="number">76936.9230</span></span><br><span class="line"><span class="number">2021-09-30</span>    <span class="number">66457.3419</span></span><br><span class="line"><span class="number">2021-10-31</span>    <span class="number">58884.2160</span></span><br><span class="line"><span class="number">2021-11-30</span>    <span class="number">63051.7894</span></span><br><span class="line"><span class="number">2021-12-31</span>    <span class="number">79829.4934</span></span><br><span class="line">Freq: M, Name: 销售额, dtype: float64</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以依次根据year_2018、year_2019、year_2020和year_2021变量，绘制出对应年份的每月销售额变化趋势。</p>
</blockquote>
<p><strong>画图</strong><br>使用 <strong>strftime()函数</strong> ，依次将year_2018、year_2019、year_2020和year_2021的index转换为 <strong>“月”</strong> 的格式。<br>然后依次调用4次 <strong>plt.plot()</strong> 函数绘制折线图，并传入 <strong>label参数</strong> ，设置对应的图例。<br>在使用 <strong>plt.show()</strong> 展示图像前，通过 <strong>plt.legend()</strong> 方法显示图例即可。</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">data </span>= pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data[data[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line">data.<span class="keyword">drop</span>(<span class="keyword">index</span>=quanNull.<span class="keyword">index</span>, inplace=True)</span><br><span class="line"><span class="keyword">data </span>= data[(data[<span class="string">&quot;订单量&quot;</span>]&gt;0) &amp; (data[<span class="string">&quot;订单量&quot;</span>]&lt;100000000)]</span><br><span class="line">dup = data[data.duplicated()]</span><br><span class="line">data[<span class="string">&quot;订单日期&quot;</span>] = pd.to_<span class="meta">datetime</span>(data[<span class="string">&quot;订单日期&quot;</span>])</span><br><span class="line">data[<span class="string">&quot;年份&quot;</span>] = data[<span class="string">&quot;订单日期&quot;</span>].dt.year</span><br><span class="line"><span class="keyword">data </span>= data.set_<span class="meta">index</span>(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line">groupByMonth = data[<span class="string">&quot;销售额&quot;</span>].groupby(data[<span class="string">&quot;年份&quot;</span>]).resample(<span class="string">&quot;M&quot;</span>).<span class="meta">sum</span>()</span><br><span class="line">year_2018 = groupByMonth.loc[2018]</span><br><span class="line">year_2019 = groupByMonth.loc[2019]</span><br><span class="line">year_2020 = groupByMonth.loc[2020]</span><br><span class="line">year_2021 = groupByMonth.loc[2021]</span><br><span class="line"># 依次将year_2018、year_2019、year_2020和year_2021的<span class="keyword">index</span></span><br><span class="line"># 转换为<span class="string">&quot;月&quot;</span>的格式</span><br><span class="line">year_2018.<span class="keyword">index</span> = year_2018.<span class="keyword">index</span>.strf<span class="meta">time</span>(<span class="string">&quot;%m&quot;</span>)</span><br><span class="line">year_2019.<span class="keyword">index</span> = year_2019.<span class="keyword">index</span>.strf<span class="meta">time</span>(<span class="string">&quot;%m&quot;</span>)</span><br><span class="line">year_2020.<span class="keyword">index</span> = year_2020.<span class="keyword">index</span>.strf<span class="meta">time</span>(<span class="string">&quot;%m&quot;</span>)</span><br><span class="line">year_2021.<span class="keyword">index</span> = year_2021.<span class="keyword">index</span>.strf<span class="meta">time</span>(<span class="string">&quot;%m&quot;</span>)</span><br><span class="line"># 导入matplotlib.pyplot，并使用<span class="string">&quot;plt&quot;</span>作为该模块的简写</span><br><span class="line">import matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"># 通过给 plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] 赋值</span><br><span class="line"># 将字体设置为 Arial Unicode MS </span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = <span class="string">&quot;Arial Unicode MS&quot;</span></span><br><span class="line"># 使用plt.plot()函数</span><br><span class="line"># 以year_2018.<span class="keyword">index</span>为<span class="keyword">x</span>轴的值和以year_2018.values为y轴的值</span><br><span class="line"># <span class="string">&quot;2018&quot;</span>作为图例，绘制展现2018年每月销售额的折线图</span><br><span class="line">plt.plot(year_2018.<span class="keyword">index</span>,year_2018.values,<span class="keyword">label</span>=<span class="string">&quot;2018&quot;</span>)</span><br><span class="line">plt.plot(year_2019.<span class="keyword">index</span>,year_2019.values,<span class="keyword">label</span>=<span class="string">&quot;2019&quot;</span>)</span><br><span class="line">plt.plot(year_2020.<span class="keyword">index</span>,year_2020.values,<span class="keyword">label</span>=<span class="string">&quot;2020&quot;</span>)</span><br><span class="line">plt.plot(year_2021.<span class="keyword">index</span>,year_2021.values,<span class="keyword">label</span>=<span class="string">&quot;2021&quot;</span>)</span><br><span class="line"># 使用plt.legend()函数显示图例</span><br><span class="line">plt.legend()</span><br><span class="line"># 使用plt.show()函数显示图像</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="http://nocturne.bczcdn.com/img/1648537009388_57070/figure_1%20(1).png" alt="折线图"></p>
<hr>
<blockquote>
<p>空间维度的销售额分析，以下采用簇形柱状图</p>
</blockquote>
<p>需要获取每个地区的每年销售总额。先将便利店销售额按照每个地区进行分组，再在各个地区的分组中按年份重新采样聚合。<br>和之前一样，需要先使用 <strong>set_index()</strong> 函数将 <strong>data[“订单日期”]</strong> 设置成data变量的行索引index。<br>然后，就可以对data[“销售额”]使用 <strong>groupby()</strong> 函数，按照 <strong>data[“地区”]</strong> 进行分组。<br>再按 <strong>年（”Y”）</strong> 进行重采样，最后求和</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">data </span>= pd.read_csv(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data[data[<span class="string">&quot;订单量&quot;</span>].isnull()]</span><br><span class="line">data.<span class="keyword">drop</span>(<span class="keyword">index</span>=quanNull.<span class="keyword">index</span>, inplace=True)</span><br><span class="line"><span class="keyword">data </span>= data[(data[<span class="string">&quot;订单量&quot;</span>]&gt;0) &amp; (data[<span class="string">&quot;订单量&quot;</span>]&lt;100000000)]</span><br><span class="line">dup = data[data.duplicated()]</span><br><span class="line">data[<span class="string">&quot;订单日期&quot;</span>] = pd.to_<span class="meta">datetime</span>(data[<span class="string">&quot;订单日期&quot;</span>])</span><br><span class="line"><span class="keyword">data </span>= data.set_<span class="meta">index</span>(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line"># 使用groupby()、resample()和<span class="meta">sum</span>()函数</span><br><span class="line"># 计算每个地区每年的销售额总和</span><br><span class="line"># 将结果赋值给变量groupByArea</span><br><span class="line">groupByArea = data[<span class="string">&quot;销售额&quot;</span>].groupby(data[<span class="string">&quot;地区&quot;</span>]).resample(<span class="string">&quot;Y&quot;</span>).<span class="meta">sum</span>()</span><br><span class="line">pr<span class="meta">int</span>(groupByArea)</span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">地区  订单日期  </span><br><span class="line">东北  <span class="number">2018-12-31</span>     <span class="number">68416.3595</span></span><br><span class="line">      <span class="number">2019-12-31</span>     <span class="number">64168.9598</span></span><br><span class="line">      <span class="number">2020-12-31</span>     <span class="number">92968.0408</span></span><br><span class="line">      <span class="number">2021-12-31</span>    <span class="number">120456.2192</span></span><br><span class="line">中南  <span class="number">2018-12-31</span>     <span class="number">78759.7892</span></span><br><span class="line">      <span class="number">2019-12-31</span>    <span class="number">117693.6204</span></span><br><span class="line">      <span class="number">2020-12-31</span>    <span class="number">104677.8360</span></span><br><span class="line">      <span class="number">2021-12-31</span>    <span class="number">160665.8210</span></span><br><span class="line">华东  <span class="number">2018-12-31</span>     <span class="number">89370.0849</span></span><br><span class="line">      <span class="number">2019-12-31</span>    <span class="number">127074.9876</span></span><br><span class="line">      <span class="number">2020-12-31</span>    <span class="number">175369.7526</span></span><br><span class="line">      <span class="number">2021-12-31</span>    <span class="number">181681.3189</span></span><br><span class="line">华北  <span class="number">2018-12-31</span>     <span class="number">67005.0770</span></span><br><span class="line">      <span class="number">2019-12-31</span>     <span class="number">57201.0920</span></span><br><span class="line">      <span class="number">2020-12-31</span>     <span class="number">79453.2498</span></span><br><span class="line">      <span class="number">2021-12-31</span>     <span class="number">81030.7290</span></span><br><span class="line">西北  <span class="number">2018-12-31</span>      <span class="number">9313.9890</span></span><br><span class="line">      <span class="number">2019-12-31</span>     <span class="number">16810.2960</span></span><br><span class="line">      <span class="number">2020-12-31</span>     <span class="number">32959.0842</span></span><br><span class="line">      <span class="number">2021-12-31</span>     <span class="number">39827.5500</span></span><br><span class="line">西南  <span class="number">2018-12-31</span>     <span class="number">21668.4165</span></span><br><span class="line">      <span class="number">2019-12-31</span>     <span class="number">39432.3478</span></span><br><span class="line">      <span class="number">2020-12-31</span>     <span class="number">41113.8195</span></span><br><span class="line">      <span class="number">2021-12-31</span>     <span class="number">42106.5075</span></span><br><span class="line">Name: 销售额, dtype: float64</span><br></pre></td></tr></table></figure>
<p><strong>画图</strong><br>x轴是地区，y轴数据则是各地区对应的每年销售额。<br>绘制<strong>簇形柱状图</strong>只需要对一个DataFrame对象，使用pandas模块中的 <strong>plot.bar()</strong> 函数即可。<br>在不指定x轴和y轴数据的情况下，行索引index会作为x轴，每一行数值类型的值会被分组到并排的柱子中作为y轴。所以需要重塑groupByArea的多层索引<br>使用 <strong>unstack()</strong> 函数，将groupByArea里，名称为”订单日期”的行索引转变为列索引即可。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd<span class="selector-class">.read_csv</span>(<span class="string">&quot;/Users/junjun/store.csv&quot;</span>)</span><br><span class="line">quanNull= data<span class="selector-attr">[data[<span class="string">&quot;订单量&quot;</span>]</span><span class="selector-class">.isnull</span>()]</span><br><span class="line">data<span class="selector-class">.drop</span>(index=quanNull<span class="selector-class">.index</span>, inplace=True)</span><br><span class="line">data = data<span class="selector-attr">[(data[<span class="string">&quot;订单量&quot;</span>]</span>&gt;<span class="number">0</span>) &amp; (data<span class="selector-attr">[<span class="string">&quot;订单量&quot;</span>]</span>&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = data<span class="selector-attr">[data.duplicated()]</span></span><br><span class="line">data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span> = pd<span class="selector-class">.to_datetime</span>(data<span class="selector-attr">[<span class="string">&quot;订单日期&quot;</span>]</span>)</span><br><span class="line">data = data<span class="selector-class">.set_index</span>(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line">groupByArea = data<span class="selector-attr">[<span class="string">&quot;销售额&quot;</span>]</span><span class="selector-class">.groupby</span>(data<span class="selector-attr">[<span class="string">&quot;地区&quot;</span>]</span>)<span class="selector-class">.resample</span>(<span class="string">&quot;Y&quot;</span>)<span class="selector-class">.sum</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(groupByArea)</span></span></span><br><span class="line">groupByArea = groupByArea<span class="selector-class">.unstack</span>(<span class="string">&quot;订单日期&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(groupByArea)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>output:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">订单日期  <span class="number">2018-12-31</span>   <span class="number">2019-12-31</span>   <span class="number">2020-12-31</span>   <span class="number">2021-12-31</span></span><br><span class="line">地区                                                       </span><br><span class="line">东北      <span class="number">68416.3595</span>   <span class="number">64168.9598</span>   <span class="number">92968.0408</span>  <span class="number">120456.2192</span></span><br><span class="line">中南      <span class="number">78759.7892</span>  <span class="number">117693.6204</span>  <span class="number">104677.8360</span>  <span class="number">160665.8210</span></span><br><span class="line">华东      <span class="number">89370.0849</span>  <span class="number">127074.9876</span>  <span class="number">175369.7526</span>  <span class="number">181681.3189</span></span><br><span class="line">华北      <span class="number">67005.0770</span>   <span class="number">57201.0920</span>   <span class="number">79453.2498</span>   <span class="number">81030.7290</span></span><br><span class="line">西北       <span class="number">9313.9890</span>   <span class="number">16810.2960</span>   <span class="number">32959.0842</span>   <span class="number">39827.5500</span></span><br><span class="line">西南      <span class="number">21668.4165</span>   <span class="number">39432.3478</span>   <span class="number">41113.8195</span>   <span class="number">42106.5075</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>转变后，groupByArea的行索引就变成了地区，列索引则变成了订单日期。</p>
</blockquote>
<p>正式画图</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(&quot;/Users/junjun/store.csv&quot;)</span><br><span class="line">quanNull= data[data[&quot;订单量&quot;].<span class="keyword">isnull</span>()]</span><br><span class="line">data.<span class="keyword">drop</span>(<span class="keyword">index</span>=quanNull.<span class="keyword">index</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">data = data[(data[&quot;订单量&quot;]&gt;<span class="number">0</span>) &amp; (data[&quot;订单量&quot;]&lt;<span class="number">100000000</span>)]</span><br><span class="line">dup = data[data.duplicated()]</span><br><span class="line">data[&quot;订单日期&quot;] = pd.to_datetime(data[&quot;订单日期&quot;])</span><br><span class="line">data = data.set_index(&quot;订单日期&quot;)</span><br><span class="line">groupByArea = data[&quot;销售额&quot;].groupby(data[&quot;地区&quot;]).resample(&quot;Y&quot;).sum()</span><br><span class="line">print(groupByArea)</span><br><span class="line">groupByArea = groupByArea.unstack(&quot;订单日期&quot;)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"># 通过给 plt.rcParams[&quot;font.sans-serif&quot;] 赋值</span><br><span class="line"># 将字体设置为 Arial Unicode MS </span><br><span class="line">plt.rcParams[&quot;font.sans-serif&quot;] = &quot;Arial Unicode MS&quot;</span><br><span class="line"># 将groupByArea变量中<span class="keyword">columns</span>转换为&quot;%Y&quot;的格式</span><br><span class="line">groupByArea.<span class="keyword">columns</span> = groupByArea.<span class="keyword">columns</span>.strftime(&quot;%Y&quot;)</span><br><span class="line"># 对groupByArea变量使用plot.bar()函数绘制簇形柱状图</span><br><span class="line">groupByArea.plot.bar()</span><br><span class="line">plt.<span class="keyword">show</span>()</span><br></pre></td></tr></table></figure>
<p><img src="https://nocturne.bczcdn.com/2006131e-34de-11ee-b79e-0242ac11000a/figure_1.png" alt="柱形图"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu通过YOLO v5训练PASCAL VOC数据集</title>
    <url>/posts/ef95e3d0/</url>
    <content><![CDATA[<h1 id="1-安装-Pytorch"><a href="#1-安装-Pytorch" class="headerlink" title="1. 安装 Pytorch"></a>1. 安装 Pytorch</h1><h2 id="1-1-安装-Anaconda"><a href="#1-1-安装-Anaconda" class="headerlink" title="1.1 安装 Anaconda"></a>1.1 安装 Anaconda</h2><ol>
<li>官网下载 Anaconda 对应的安装包<br><a href="https://www.anaconda.com/download#downloads">下载地址</a></li>
<li>安装 Anaconda<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bash</span> ~/Downloads/Anaconda3-<span class="number">2023</span>.<span class="number">07</span>-<span class="number">1</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
Anaconda将自动将环境变量添加到PATH中<br><strong>注意⚠️</strong>：</li>
</ol>
<ul>
<li>如果输入<code>conda</code>没有反应，那么需执行<code>source ./bashrc</code>更新环境变量</li>
<li>如果第一行没有用，则需要手动在.&#x2F;bashrc文件添加环境变量<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑～/.bashrc文件，在最后加上</span></span><br><span class="line">export PATH=<span class="regexp">/home/</span>birdy<span class="regexp">/anaconda3/</span>bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-2-安装Pytorch"><a href="#1-2-安装Pytorch" class="headerlink" title="1.2 安装Pytorch"></a>1.2 安装Pytorch</h2><p>首先为Pytorch创建一个Anaconda的虚拟环境，环境名自定：<br><code>conda create -n pytorch1.6 python=3.8</code></p>
<p>安装成功后激活Pytorch1.6环境：<br><code>conda active pytorch1.6</code></p>
<p>在所创建的Pytorch环境下安装Pytorch1.6版本，执行命令：<br><code>conda install pytorch torchvision cudatoolkit=10.2 -c pytorch</code></p>
<p>编辑~&#x2F;.bashrc文件，设置使用Pytorch1.6环境下的Python3.8:<br><code>alias python=&#39;/home/birdy/anaconda3/envs/pytorch1.6/bin/python3.8&#39;</code><br><strong>注意</strong> ：记得改为自己计算机上的路径</p>
<p>保存后退出执行：<br><code>source ~/.bashrc</code></p>
<h1 id="2-Yolov5-项目克隆和安装"><a href="#2-Yolov5-项目克隆和安装" class="headerlink" title="2. Yolov5 项目克隆和安装"></a>2. Yolov5 项目克隆和安装</h1><h2 id="2-1-克隆yolov5项目"><a href="#2-1-克隆yolov5项目" class="headerlink" title="2.1 克隆yolov5项目"></a>2.1 克隆yolov5项目</h2><p>克隆到本地<br><code>git clone https://github.com/ultralytics/yolov5.git</code></p>
<p>或者下载releases中其他版本，<strong>注意</strong>要下载完对应版本的预训练权重文件</p>
<h2 id="2-2-安装所需库"><a href="#2-2-安装所需库" class="headerlink" title="2.2 安装所需库"></a>2.2 安装所需库</h2><p><strong>使用清华镜像源：</strong><br>在yolov5文件路径下执行<br><code>pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<h2 id="2-3-下载预训练权重文件"><a href="#2-3-下载预训练权重文件" class="headerlink" title="2.3 下载预训练权重文件"></a>2.3 下载预训练权重文件</h2><p>下载完后缀为 <strong>.pt</strong> 的文件并放在weights文件夹下</p>
<h2 id="2-4-安装测试"><a href="#2-4-安装测试" class="headerlink" title="2.4 安装测试"></a>2.4 安装测试</h2><p><strong>测试图像：</strong><br>在yolov5路径下执行<br><code>python detect.py --source ./inference/images/ --weights weights/yolov5s.pt --conf 0.4</code></p>
<p>当终端输出如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">YOLOv5</span> 🚀 <span class="number">2023</span>-<span class="number">8</span>-<span class="number">2</span> Python-<span class="number">3</span>.<span class="number">8</span>.<span class="number">17</span> torch-<span class="number">2</span>.<span class="number">0</span>.<span class="number">1</span>+cu117 CPU</span><br><span class="line"></span><br><span class="line"><span class="attribute">Fusing</span> layers... </span><br><span class="line"><span class="attribute">YOLOv5n</span> summary: <span class="number">213</span> layers, <span class="number">1867405</span> parameters, <span class="number">0</span> gradients</span><br><span class="line"><span class="attribute">image</span> <span class="number">1</span>/<span class="number">2</span> /home/birdy/yolov5-master/data/images/bus.jpg: <span class="number">640</span>x480 <span class="number">4</span> persons, <span class="number">1</span> bus, <span class="number">25</span>.<span class="number">2</span>ms</span><br><span class="line"><span class="attribute">image</span> <span class="number">2</span>/<span class="number">2</span> /home/birdy/yolov5-master/data/images/zidane.jpg: <span class="number">384</span>x640 <span class="number">2</span> persons, <span class="number">21</span>.<span class="number">5</span>ms</span><br><span class="line"><span class="attribute">Speed</span>: <span class="number">0</span>.<span class="number">3</span>ms pre-process, <span class="number">23</span>.<span class="number">3</span>ms inference, <span class="number">0</span>.<span class="number">6</span>ms NMS per image at shape (<span class="number">1</span>, <span class="number">3</span>, <span class="number">640</span>, <span class="number">640</span>)</span><br><span class="line"><span class="attribute">Results</span> saved to runs/detect/exp5</span><br></pre></td></tr></table></figure>
<p>表示已经成功完成预训练测试，可以在<code>runs/detect/exp5</code>中看到输出图像已被标记<br><img src="https://s2.loli.net/2023/08/02/WEqdi9UFLpTQIBl.jpg" style="max-width: 65%;"><br><img src="https://s2.loli.net/2023/08/02/YxkjvngEVNbwqXP.jpg" style="max-width: 50%;" ></p>
<blockquote>
<p>也可以选择其他预训练模型，yolov5x.pt效果较好</p>
</blockquote>
<h2 id="2-5-报错解决"><a href="#2-5-报错解决" class="headerlink" title="2.5 报错解决"></a>2.5 报错解决</h2><ul>
<li><p>pip安装时<br><code>WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None))</code><br><strong>解决方法：</strong><br>换源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/free/</span></span><br><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/main/</span></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行detect.py时<br><code>AttributeError: ‘Upsample‘ object has no attribute ‘recompute_scale_factor‘</code><br><strong>解决方法：</strong><br>按照报错提示，找到usampling.py第157行附近，删去<code>recompute_scale_factor=self.recompute_scale_</code>,并调整前后代码语法格式</p>
</li>
<li><p>安装库依赖报错</p>
  <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">~$ conda install pytorch torchvision cudatoolkit=<span class="number">10.2</span> -c python</span><br><span class="line">Collecting package metadata (current_repodata.json): failed</span><br><span class="line"></span><br><span class="line">ProxyError: Conda cannot proceed due <span class="keyword">to</span> an error <span class="keyword">in</span> your proxy <span class="keyword">configuration</span>.</span><br><span class="line"><span class="keyword">Check</span> <span class="keyword">for</span> typos <span class="keyword">and</span> other <span class="keyword">configuration</span> errors <span class="keyword">in</span> <span class="keyword">any</span> <span class="string">&#x27;.netrc&#x27;</span> file <span class="keyword">in</span> your home directory,</span><br><span class="line"><span class="keyword">any</span> environment variables ending <span class="keyword">in</span> <span class="string">&#x27;_PROXY&#x27;</span>, <span class="keyword">and</span> <span class="keyword">any</span> other <span class="keyword">system</span>-wide proxy</span><br><span class="line"><span class="keyword">configuration</span> settings.</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong><br>尝试切换代理</p>
</li>
<li><p>yolov5代码与Pytorch版本不兼容的问题</p>
<p><strong>解决办法：</strong><br>我原本使用yolov5 V3.1的版本和相关的配置文件，但是报错实在是太多了，最终采取的解决办法是直接git clone GitHub上最新的yolov5，但是在<code>/yolov5-master/data/scripts/</code>中运行<code>./downloads.sh</code>以下载预训练模型文件时又出现模块未导入等问题，最终我在yolov5 V7.0的Assets中手动下载四个模型文件，并复制到<code>/yolov5-master/data/scripts/weights</code>路径下</p>
</li>
<li><p>环境以及与训练文件全部配置好后执行detec.py出现报错<br>运行如下代码时：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">python detect.py --weights <span class="regexp">/home/</span>birdy<span class="regexp">/yolov5-master/</span>data<span class="regexp">/scripts/</span>weights<span class="regexp">/yolov5n.pt --source data/im</span>ages/ --conf <span class="number">0.4</span></span><br></pre></td></tr></table></figure>
<p>出现报错：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">bash: home<span class="regexp">/birdy/</span>anaconda3<span class="regexp">/envs/</span>pytorch1.<span class="number">6</span><span class="regexp">/bin/</span>python: No such <span class="keyword">file</span> or directory</span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong><br>由于在我的命令中<code>home/birdy/anaconda3/envs/pytorch1.6/bin/python</code>被解释为相对路径，因此系统无法找到对应的Python解释器</p>
<p>因此需使用绝对路径:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>birdy<span class="regexp">/anaconda3/</span>envs<span class="regexp">/pytorch1.6/</span>bin<span class="regexp">/python detect.py --weights /</span>home<span class="regexp">/birdy/y</span>olov5-master<span class="regexp">/data/</span>scripts<span class="regexp">/weights/y</span>olov5n.pt --<span class="keyword">source</span> data<span class="regexp">/images/</span> --conf <span class="number">0.4</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="3-准备数据集"><a href="#3-准备数据集" class="headerlink" title="3. 准备数据集"></a>3. 准备数据集</h1><h2 id="3-1-下载文件"><a href="#3-1-下载文件" class="headerlink" title="3.1 下载文件"></a>3.1 下载文件</h2><ul>
<li><a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar">VOC2012数据集下载地址</a></li>
<li><a href="https://pjreddie.com/media/files/VOCtrainval_06-Nov-2007.tar">VOC2007数据集下载地址</a></li>
<li><a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar">VOC2007test下载地址</a></li>
<li>get_voc_ubuntu.py脚本文件</li>
</ul>
<h2 id="3-2-生成训练集和验证集文件"><a href="#3-2-生成训练集和验证集文件" class="headerlink" title="3.2 生成训练集和验证集文件"></a>3.2 生成训练集和验证集文件</h2><p>解压数据集，在yolov5目录下执行：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> xf VOCtrainval_11-May-<span class="number">2012</span>.tar</span><br><span class="line"><span class="attribute">tar</span> xf VOCtrainval_11-May-<span class="number">2012</span>.tar</span><br><span class="line"><span class="attribute">tar</span> xf VOCtest_06-Nov-<span class="number">2007</span>.tar</span><br></pre></td></tr></table></figure>
<p>执行python脚本文件：<br><code>python get_voc_ubuntu.py</code><br>可以看到，yolov5目录下生成了2007_test.txt,2007_train.txt,2007_val.txt,2012_train.txt,2012_val.txt,train.txt,train.all.txt;并且在VOC目录下生成了labels和images文件夹。</p>
<h1 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h1><h2 id="4-1-新建yaml文件"><a href="#4-1-新建yaml文件" class="headerlink" title="4.1 新建yaml文件"></a>4.1 新建yaml文件</h2><p>可以复制<strong>data&#x2F;VOC.yaml</strong>再重命名为:<strong>VOC_new.yaml</strong><br>修改配置如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">train: VOC<span class="regexp">/images/</span>train/</span><br><span class="line">val: VOC.images<span class="regexp">/val/</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-新建模型yaml文件"><a href="#4-2-新建模型yaml文件" class="headerlink" title="4.2 新建模型yaml文件"></a>4.2 新建模型yaml文件</h2><p>复制<strong>models&#x2F;yolov5s.yaml</strong>再重命名为：<strong>yolov5s_voc.yaml</strong><br>修改配置如下：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Parameters</span></span><br><span class="line"><span class="symbol">nc:</span> <span class="number">20</span>  <span class="meta"># number of classes</span></span><br></pre></td></tr></table></figure>

<h1 id="5-训练PASCAL-VOC数据集"><a href="#5-训练PASCAL-VOC数据集" class="headerlink" title="5. 训练PASCAL VOC数据集"></a>5. 训练PASCAL VOC数据集</h1><h2 id="5-1-训练命令"><a href="#5-1-训练命令" class="headerlink" title="5.1 训练命令"></a>5.1 训练命令</h2><p>在yolov5目录下执行：<br><code>python train.py --data data/VOC_new.yaml --cfg models/yolov5s_voc.yaml --weights weights/yolov5s.pt --batch-size 16 --epochs 200</code> </p>
<p>命令解释：<br><strong>batch size：</strong> 批大小，批大小是指在每一次模型训练中一次性输入给模型的样本数量<br><strong>epoch：</strong> 训练轮数，一个 epoch 指的是将训练集中的所有样本都用于一次模型的训练</p>
<p><strong>注意：此过程需要耗费大量时间，并且很吃电脑配置。如果内存不足或进程过慢，可以考虑适当减少batch size值和epoch值</strong></p>
<h2 id="5-2-训练过程可视化"><a href="#5-2-训练过程可视化" class="headerlink" title="5.2 训练过程可视化"></a>5.2 训练过程可视化</h2><p>在yolov5目录下执行：<br><code>tensorboard --logdir=./runs</code></p>
<h3 id="Tensorboard"><a href="#Tensorboard" class="headerlink" title="Tensorboard"></a>Tensorboard</h3><ol>
<li>简介：TensorFlow下的一个可视化工具，能在训练大规模神经网络时将复杂的运算过程可视化。</li>
<li>安装：<code>pip install tensorboard</code></li>
<li>使用：<code>tensorboard --logdir=&lt;directory_name&gt;</code>,将<code>&lt;directory_name&gt;</code>替换为保存数据的目录</li>
<li>可视化查看： 运行后出现命令<code>Serving TensorBoard on localhost; to expose to the network, use a proxy or pass –bind_allTensorBoard 2.2.0 at http://localhost:6006/ (Press CTRL+C to quit) </code>,用浏览器打开 <a href="http://localhost:6006/">http://localhost:6006/</a> 查看即可</li>
</ol>
<h1 id="6-测试训练出的网络模型"><a href="#6-测试训练出的网络模型" class="headerlink" title="6. 测试训练出的网络模型"></a>6. 测试训练出的网络模型</h1><h2 id="6-1-测试图片"><a href="#6-1-测试图片" class="headerlink" title="6.1 测试图片"></a>6.1 测试图片</h2><p>在yolov5目录下执行：<br><code>python detect.py --source ./VOC/images/val/000001.jpg --weights runs/exp0/weights/best.pt --conf 0.4</code></p>
]]></content>
      <categories>
        <category>Yolo</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Yolo目标检测原理</title>
    <url>/posts/70ff0b51/</url>
    <content><![CDATA[<h1 id="1-目标检测之任务说明"><a href="#1-目标检测之任务说明" class="headerlink" title="1. 目标检测之任务说明"></a>1. 目标检测之任务说明</h1><blockquote>
<p>目标检测 &#x3D; What + Where</p>
</blockquote>
<h2 id="1-1-识别"><a href="#1-1-识别" class="headerlink" title="1.1 识别"></a>1.1 识别</h2><p><strong>类别标签(Category Label)</strong><br><strong>置信度得分(Confidence score)</strong></p>
<h2 id="1-2-定位"><a href="#1-2-定位" class="headerlink" title="1.2 定位"></a>1.2 定位</h2><p><strong>位置(最小外接矩形，Bounding box)</strong></p>
<h2 id="1-3-定位和检测"><a href="#1-3-定位和检测" class="headerlink" title="1.3 定位和检测"></a>1.3 定位和检测</h2><ul>
<li><strong>定位</strong>：找到检测图像中带有一个给定标签的单个目标</li>
<li><strong>检测</strong>：找到图像中带有给定标签的所有目标</li>
</ul>
<h1 id="2-目标检测数据集"><a href="#2-目标检测数据集" class="headerlink" title="2. 目标检测数据集"></a>2. 目标检测数据集</h1><h1 id="2-1-PASCAL-VOC数据集"><a href="#2-1-PASCAL-VOC数据集" class="headerlink" title="2.1 PASCAL VOC数据集"></a>2.1 PASCAL VOC数据集</h1><p> <a href="https://smms.app/image/X67Tb4tDwVGB5OC" target="_blank"><img src="https://s2.loli.net/2023/08/01/X67Tb4tDwVGB5OC.png" ></a><br> <a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012">PASCAL VOC</a></p>
<h2 id="2-2-MS-COCO"><a href="#2-2-MS-COCO" class="headerlink" title="2.2 MS COCO"></a>2.2 MS COCO</h2><p> 全称<strong>Microsoft Common Objects in Context</strong><br> <a href="http://cocodataset.org/">COCO</a></p>
<h1 id="3-目标检测性能指标"><a href="#3-目标检测性能指标" class="headerlink" title="3. 目标检测性能指标"></a>3. 目标检测性能指标</h1><h2 id="3-1-检测精度"><a href="#3-1-检测精度" class="headerlink" title="3.1 检测精度"></a>3.1 检测精度</h2><ul>
<li>Presicion, Recall, F1 score</li>
<li>IoU (Intersection over Union)</li>
<li>P - R curve (Presicioin - Recall curve)</li>
<li>AP (Average Precision) </li>
<li>mAP (mean Average Precision)</li>
</ul>
<h3 id="3-1-1-混淆矩阵-confusion-matrix"><a href="#3-1-1-混淆矩阵-confusion-matrix" class="headerlink" title="3.1.1 混淆矩阵 (confusion matrix)"></a>3.1.1 混淆矩阵 (confusion matrix)</h3><p> <a href="https://smms.app/image/bgaRMP3NYnvOef2" target="_blank"><img src="https://s2.loli.net/2023/08/01/bgaRMP3NYnvOef2.png" ></a></p>
<p> 解释：<br> <strong>(1,2) FN</strong>表示预测为False，实际是True，所以为FN<br> <strong>(2,2) TN</strong>表示预测为True，实际为True，所以为TN</p>
<ul>
<li><strong>精度Presicion(查准率)</strong> 是评估预测的 <strong>准不准</strong> (看预测列)</li>
<li><strong>召回率recall(查全率)</strong> 是评估找的 <strong>全不全</strong> (看实际行)</li>
</ul>
<p><a href="https://smms.app/image/SNsR95bCGak3qno" target="_blank"><img src="https://s2.loli.net/2023/08/01/SNsR95bCGak3qno.png" ></a></p>
<h3 id="3-1-2-交并比-IoU-Intersection-over-Union"><a href="#3-1-2-交并比-IoU-Intersection-over-Union" class="headerlink" title="3.1.2 交并比 IoU (Intersection over Union)"></a>3.1.2 交并比 IoU (Intersection over Union)</h3><p>预测部分与实际部分的交集&#x2F;预测与实际的并集<br><a href="https://smms.app/image/yxQTvCdNh3kPDUZ" target="_blank"><img src="https://s2.loli.net/2023/08/01/yxQTvCdNh3kPDUZ.png" ></a></p>
<p>实际检测中可以自己设置阈值（比如设置为0.5）</p>
<ul>
<li><strong>IoU &#x3D; 1</strong> ，预测与实际完全重叠</li>
<li><strong>IoU ≥ 0.5</strong> , 认为目标检测为<strong>TP</strong></li>
<li><strong>IoU &lt; 0.5</strong> , 认为检测错误，并且为<strong>FP</strong></li>
<li>存在Ground truth但没有检测到时，<strong>TN</strong></li>
</ul>
<h3 id="3-1-3-AP计算之积分法"><a href="#3-1-3-AP计算之积分法" class="headerlink" title="3.1.3 AP计算之积分法"></a>3.1.3 AP计算之积分法</h3><ul>
<li><strong>AP</strong>衡量的是学习出来的模型在<strong>每个类别</strong>上的好坏</li>
<li><strong>mAP</strong>衡量的是学习出的模型在<strong>所有类别</strong>上的好坏，即取所有类别上AP的平均值<br>PASCAL VOC自2010年后换了一种计算方法<br>将P-R曲线拉平后，取新函数的积分<br><a href="https://smms.app/image/G2bYMzPcRpW75OA" target="_blank"><img src="https://s2.loli.net/2023/08/01/G2bYMzPcRpW75OA.png" ></a><br> 即<strong>AP &#x3D; A<sub>1</sub> + A<sub>2</sub> + A<sub>3</sub> + A<sub>4</sub></strong></li>
</ul>
<h2 id="3-2-检测速度"><a href="#3-2-检测速度" class="headerlink" title="3.2 检测速度"></a>3.2 检测速度</h2><ul>
<li><strong>前传耗时</strong> : 从输入一张图像到输出最终结果所消耗的时间，包括前处理耗时(如图像归一化)、网络前传耗时、后处理耗时(如非极大值抑制)</li>
<li><strong>每秒帧数 FPS (Frames Per Seconds)</strong> ：每秒能处理的图像数量，与软硬件配置有关系</li>
<li><strong>浮点运算量 (Floating-point operations per second)</strong> ：处理一张图像所需要的浮点运算数量，跟具体软硬件没有关系，可以公平地比较不同算法之间的检测速度</li>
</ul>
]]></content>
      <categories>
        <category>Yolo</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python + OpenCV实现轻量级人脸识别</title>
    <url>/posts/7c0ec17a/</url>
    <content><![CDATA[<h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h1><h2 id="1-1-安装PyCharm"><a href="#1-1-安装PyCharm" class="headerlink" title="1.1 安装PyCharm"></a>1.1 安装PyCharm</h2><h2 id="1-2-安装Opencv环境"><a href="#1-2-安装Opencv环境" class="headerlink" title="1.2 安装Opencv环境"></a>1.2 安装Opencv环境</h2><ul>
<li><p><strong>方法一：pip安装</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> opencv-python</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">pip3 install opencv-python -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方法二：源码安装</strong><br><a href="https://opencv.org/">Opencv官网</a></p>
</li>
</ul>
<h1 id="2-图像识别"><a href="#2-图像识别" class="headerlink" title="2. 图像识别"></a>2. 图像识别</h1><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#导入cv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="meta">#读取图片</span></span><br><span class="line"><span class="title">img</span> = cv.imread(<span class="string">&quot;face1.jpg&quot;</span>)</span><br><span class="line"><span class="meta">#显示图片</span></span><br><span class="line"><span class="title">cv</span>.imshow(<span class="string">&quot;read1_img&quot;</span>,img)</span><br><span class="line"><span class="meta">#等待</span></span><br><span class="line"><span class="title">cv</span>.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="meta">#释放内存</span></span><br><span class="line"><span class="title">cv</span>.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>#3. 灰度转换</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#导入cv模块</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">#读取图片</span><br><span class="line">img = cv.imread(<span class="string">&quot;face1.jpg&quot;</span>)</span><br><span class="line">#灰度转换,参数<span class="number">1</span>为所需要转化的图片，参数<span class="number">2</span>为需要转化的颜色</span><br><span class="line">gray_img = cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">#显示灰度</span><br><span class="line">cv.imshow(<span class="string">&#x27;gray&#x27;</span>,gray_img)</span><br><span class="line">#保存灰度图像</span><br><span class="line">cv.imwrite(<span class="string">&#x27;gray_face1.jpg&#x27;</span>,gray_img)</span><br><span class="line">#显示图片</span><br><span class="line">cv.imshow(<span class="string">&quot;read1_img&quot;</span>,img)</span><br><span class="line">#等待</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">#释放内存</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h1 id="4-修改尺寸"><a href="#4-修改尺寸" class="headerlink" title="4. 修改尺寸"></a>4. 修改尺寸</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入cv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv.imread(<span class="string">&quot;face1.jpg&quot;</span>)</span><br><span class="line"><span class="comment">#修改尺寸</span></span><br><span class="line">resize_img = cv.resize(img,dsize=(<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line"><span class="comment">#显示原图</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line"><span class="comment">#显示修改后的图像</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;resize_img&#x27;</span>,resize_img)</span><br><span class="line"><span class="comment">#打印原图尺寸大小</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;未修改:&#x27;</span>,img.shape)</span><br><span class="line"><span class="comment">#打印修改后图像尺寸大小</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;修改后:&#x27;</span>,resize_img.shape)</span><br><span class="line"><span class="comment">#等待,当键盘按下q时退出图像</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>) == cv.waitKey(<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#释放内存</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h1 id="5-绘制矩形"><a href="#5-绘制矩形" class="headerlink" title="5. 绘制矩形"></a>5. 绘制矩形</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入cv模块</span></span><br><span class="line"><span class="attribute">import</span> cv2 as cv</span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line"><span class="attribute">img</span> = cv.imread(<span class="string">&quot;face1.jpg&quot;</span>)</span><br><span class="line"><span class="comment">#坐标,起始点为(x,y)</span></span><br><span class="line"><span class="attribute">x</span>,y,w,h = <span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span></span><br><span class="line"><span class="comment">#绘制矩形,参数分别为图片对象、(起始点、长、宽)、颜色、矩形宽度</span></span><br><span class="line"><span class="attribute">cv</span>.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#绘制圆形，参数分别为图片对象、圆心、半径、颜色、圆形宽度</span></span><br><span class="line"><span class="attribute">cv</span>.circle(img,center=(x+w,y+h),radius=<span class="number">100</span>,color=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),thickness=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#显示</span></span><br><span class="line"><span class="attribute">cv</span>.imshow(&#x27;re_img&#x27;,img)</span><br><span class="line"><span class="comment">#等待,当键盘按下q时退出图像</span></span><br><span class="line"><span class="attribute">while</span> True:</span><br><span class="line">    <span class="attribute">if</span> ord(&#x27;q&#x27;) == cv.waitKey(<span class="number">0</span>):</span><br><span class="line">        <span class="attribute">break</span></span><br><span class="line"><span class="comment">#释放内存</span></span><br><span class="line"><span class="attribute">cv</span>.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h1 id="6-人脸检测"><a href="#6-人脸检测" class="headerlink" title="6. 人脸检测"></a>6. 人脸检测</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#导入cv模块</span><br><span class="line">import cv2 <span class="keyword">as</span> cv</span><br><span class="line">#建立检测函数</span><br><span class="line">def face<span class="constructor">_detect_demo()</span>:</span><br><span class="line">    #第一步：将图片转化为灰度</span><br><span class="line">    gray = cv.cvt<span class="constructor">Color(<span class="params">img</span>,<span class="params">cv</span>.COLOR_BGR2GRAY)</span></span><br><span class="line">    #加载分类器，使用opencv自带haarcascade_frontalface_alt2.xml</span><br><span class="line">    face_detect = cv.<span class="constructor">CascadeClassifier(&#x27;<span class="operator">/</span>Users<span class="operator">/</span><span class="params">xxsql</span><span class="operator">/</span><span class="params">anaconda3</span><span class="operator">/</span><span class="params">lib</span><span class="operator">/</span><span class="params">python3</span>.10<span class="operator">/</span><span class="params">site</span>-<span class="params">packages</span><span class="operator">/</span><span class="params">cv2</span><span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">haarcascade_frontalface_alt2</span>.<span class="params">xml</span>&#x27;)</span></span><br><span class="line">    #参数分别为：图片对象、每次遍历后的缩放倍数、确认次数、<span class="number">0</span>为默认值、限制人脸最小范围、限制人脸最大范围</span><br><span class="line">    face = face_detect.detect<span class="constructor">MultiScale(<span class="params">gray</span>,1.1)</span></span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> face:</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line">    cv.imshow(&#x27;result&#x27;,img)</span><br><span class="line"></span><br><span class="line">#读取图片</span><br><span class="line">img = cv.imread(<span class="string">&quot;face1.jpg&quot;</span>)</span><br><span class="line">face<span class="constructor">_detect_demo()</span></span><br><span class="line">#等待,当键盘按下q时退出图像</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="keyword">if</span> ord(<span class="character">&#x27;q&#x27;</span>)<span class="operator"> == </span>cv.wait<span class="constructor">Key(0)</span>:</span><br><span class="line">        break</span><br><span class="line">#释放内存</span><br><span class="line">cv.destroy<span class="constructor">AllWindows()</span></span><br></pre></td></tr></table></figure>
<p><strong>效果展示</strong><br><img src="https://tinypic.host/images/2023/07/31/2023-07-31-12.23.43.png" alt="单人识别" border="0" style="zoom:33%;"></p>
<h1 id="7-检测多个"><a href="#7-检测多个" class="headerlink" title="7. 检测多个"></a>7. 检测多个</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#导入cv模块</span><br><span class="line">import cv2 <span class="keyword">as</span> cv</span><br><span class="line">#建立检测函数</span><br><span class="line">def face<span class="constructor">_detect_demo()</span>:</span><br><span class="line">    gray = cv.cvt<span class="constructor">Color(<span class="params">img</span>,<span class="params">cv</span>.COLOR_BGR2GRAY)</span></span><br><span class="line">    #加载分类器，使用<span class="number">05</span>的分类器效果不佳，改用haarcascade_frontalface_default.xml</span><br><span class="line">    face_detect = cv.<span class="constructor">CascadeClassifier(&#x27;<span class="operator">/</span>Users<span class="operator">/</span><span class="params">xxsql</span><span class="operator">/</span><span class="params">anaconda3</span><span class="operator">/</span><span class="params">lib</span><span class="operator">/</span><span class="params">python3</span>.10<span class="operator">/</span><span class="params">site</span>-<span class="params">packages</span><span class="operator">/</span><span class="params">cv2</span><span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">haarcascade_frontalface_default</span>.<span class="params">xml</span>&#x27;)</span></span><br><span class="line">    #face = face_detect.detect<span class="constructor">MultiScale(<span class="params">gray</span>,1.05,5,0,(20,20)</span>,(<span class="number">80</span>,<span class="number">80</span>))</span><br><span class="line">    face = face_detect.detect<span class="constructor">MultiScale(<span class="params">gray</span>, 1.1)</span>#默认参数值效果最好</span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> face:</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line">    cv.imshow(&#x27;result&#x27;,img)</span><br><span class="line">#读取图片</span><br><span class="line">img = cv.imread(<span class="string">&quot;face2.jpg&quot;</span>)</span><br><span class="line">face<span class="constructor">_detect_demo()</span></span><br><span class="line">#等待,当键盘按下q时退出图像</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="keyword">if</span> ord(<span class="character">&#x27;q&#x27;</span>)<span class="operator"> == </span>cv.wait<span class="constructor">Key(0)</span>:</span><br><span class="line">        break</span><br><span class="line">#释放内存</span><br><span class="line">cv.destroy<span class="constructor">AllWindows()</span></span><br></pre></td></tr></table></figure>
<p><strong>效果展示</strong><br><img src="https://tinypic.host/images/2023/07/31/2023-07-31-12.41.10.png" alt="多人识别" border="0"></p>
<h1 id="8-视频检测"><a href="#8-视频检测" class="headerlink" title="8. 视频检测"></a>8. 视频检测</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#导入cv模块</span><br><span class="line">import cv2 <span class="keyword">as</span> cv</span><br><span class="line">#建立检测函数</span><br><span class="line">def face<span class="constructor">_detect_demo(<span class="params">img</span>)</span>:</span><br><span class="line">    gray = cv.cvt<span class="constructor">Color(<span class="params">img</span>,<span class="params">cv</span>.COLOR_BGR2GRAY)</span></span><br><span class="line">    # 如果使用win，路径中所有\换成/</span><br><span class="line">    face_detect = cv.<span class="constructor">CascadeClassifier(&#x27;<span class="operator">/</span>Users<span class="operator">/</span><span class="params">xxsql</span><span class="operator">/</span><span class="params">anaconda3</span><span class="operator">/</span><span class="params">lib</span><span class="operator">/</span><span class="params">python3</span>.10<span class="operator">/</span><span class="params">site</span>-<span class="params">packages</span><span class="operator">/</span><span class="params">cv2</span><span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">haarcascade_frontalface_default</span>.<span class="params">xml</span>&#x27;)</span></span><br><span class="line">    face = face_detect.detect<span class="constructor">MultiScale(<span class="params">gray</span>, 1.1)</span>#默认参数值效果最好</span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> face:</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line">    cv.imshow(&#x27;result&#x27;,img)</span><br><span class="line">#读取摄像头,<span class="number">0</span>时为默认摄像头，其他数字时可以为外接摄像头，也可以写入视频名称</span><br><span class="line">cap = cv.<span class="constructor">VideoCapture(0)</span></span><br><span class="line">#循环</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    flag,frame = cap.read<span class="literal">()</span>#将图像读取结果分别赋值flag、frame，flag为布尔值，frame为图像帧的Numpy数组</span><br><span class="line">    <span class="keyword">if</span> not flag:</span><br><span class="line">        break</span><br><span class="line">    face<span class="constructor">_detect_demo(<span class="params">frame</span>)</span></span><br><span class="line">    #将waitKey数字换为<span class="number">1</span>，显示的是连续帧，<span class="number">0</span>时按空格可以跳到下一帧</span><br><span class="line">    <span class="keyword">if</span> ord(<span class="character">&#x27;q&#x27;</span>)<span class="operator"> == </span>cv.wait<span class="constructor">Key(0)</span>:</span><br><span class="line">        break</span><br><span class="line">cv.destroy<span class="constructor">AllWindows()</span></span><br><span class="line">#释放摄像头</span><br><span class="line">cap.release<span class="literal">()</span></span><br></pre></td></tr></table></figure>
<p><strong>效果展示</strong><br><img src="https://s2.loli.net/2023/07/31/sk1bguy9dMmAZD7.gif" alt="视频识别"></p>
<h1 id="9-信息录入"><a href="#9-信息录入" class="headerlink" title="9. 信息录入"></a>9. 信息录入</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入cv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#摄像头</span></span><br><span class="line"><span class="comment">#cap = cv.VideoCapture(0)</span></span><br><span class="line"><span class="comment">#图像</span></span><br><span class="line">Vshow = cv.imread(<span class="string">&#x27;lenaface.jpg&#x27;</span>)</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="comment">#while(cap.isOpened()): #当检测到摄像机打开时</span></span><br><span class="line">    <span class="comment">#ret_flag,Vshow = cap.read()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv.imshow(<span class="string">&quot;Capture_Test&quot;</span>,Vshow)</span><br><span class="line">    k = cv.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> <span class="comment">#捕获按下的按键</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>): <span class="comment">#保存</span></span><br><span class="line">        cv.imwrite(<span class="string">&#x27;/Users/xxsql/PycharmProjects/pythonProject/opencv/data/xxsql/&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&quot;.Jay&quot;</span>+<span class="string">&quot;.jpg&quot;</span>,Vshow)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;success to save&quot;</span>+<span class="built_in">str</span>(num)+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--------------------&quot;</span>)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> k == <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>): <span class="comment">#退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line"><span class="comment">#释放摄像头</span></span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure>

<h1 id="10-数据训练"><a href="#10-数据训练" class="headerlink" title="10. 数据训练"></a>10. 数据训练</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#导入cv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImageAndLabels</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment">#储存人脸数据,一个二维数组</span></span><br><span class="line">    facesSamples = []</span><br><span class="line">    <span class="comment">#储存姓名数据</span></span><br><span class="line">    ids = []</span><br><span class="line">    <span class="comment">#储存图片信息</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> <span class="keyword">not</span> f.startswith(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#加载分类器</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(<span class="string">&#x27;/Users/xxsql/anaconda3/lib/python3.10/site-packages/cv2/data/haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class="line">    <span class="comment">#遍历保存的图像</span></span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line">        <span class="comment">#打开文件，灰度化PIL有九种不同模式:1(打开为黑白图像0、1),L(灰度图像0-255),P(),RGB,CMYK,YCbCr,I,F</span></span><br><span class="line">        PIL_image = Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        <span class="comment">#将图像转换为数组，以黑白深浅</span></span><br><span class="line">        img_numpy = np.array(PIL_image,<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">        faces = face_detector.detectMultiScale(img_numpy)</span><br><span class="line">        file_name = os.path.splitext(os.path.basename(imagePath))[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">int</span>(file_name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> faces:</span><br><span class="line">            ids.append(<span class="built_in">id</span>)</span><br><span class="line">            facesSamples.append(img_numpy[y:y+h,x:x+w])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;id&#x27;</span>,<span class="built_in">id</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;fs&#x27;</span>,facesSamples)</span><br><span class="line">        <span class="keyword">return</span> facesSamples,ids</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#图片路径</span></span><br><span class="line">    path = <span class="string">&#x27;/Users/xxsql/PycharmProjects/pythonProject/opencv/data/xxsql/&#x27;</span></span><br><span class="line">    <span class="comment">#获取图像数组和id标签数组和姓名</span></span><br><span class="line">    faces,ids = getImageAndLabels(path)</span><br><span class="line">    recognizer = cv.face.LBPHFaceRecognizer_create()<span class="comment">#加载LBPH识别器</span></span><br><span class="line">    <span class="comment">#训练</span></span><br><span class="line">    recognizer.train(faces,np.array(ids))</span><br><span class="line">    <span class="comment">#写入文件</span></span><br><span class="line">    recognizer.write(<span class="string">&#x27;/Users/xxsql/PycharmProjects/pythonProject/opencv/trainer/trainer.yml&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="11-人脸识别"><a href="#11-人脸识别" class="headerlink" title="11. 人脸识别"></a>11. 人脸识别</h1><p>我调用了<a href="https://smsbao.com/">短信宝</a>的API，可以达到陌生人停留时间过长自动发送报警信息到指定手机的效果。<br>也可以选用其他发送短信平台</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载训练数据文件</span></span><br><span class="line">recogizer = cv.face.LBPHFaceRecognizer_create()</span><br><span class="line">recogizer.read(<span class="string">&quot;/Users/xxsql/PycharmProjects/pythonProject/opencv/trainer/trainer.yml&quot;</span>)</span><br><span class="line"><span class="comment">#名称</span></span><br><span class="line">names = []</span><br><span class="line"><span class="comment">#警报全局变量</span></span><br><span class="line">warningtime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"><span class="comment">#短信反馈</span></span><br><span class="line">statusStr = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;短信发送成功&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;-1&#x27;</span>:<span class="string">&#x27;参数不全&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;-2&#x27;</span>:<span class="string">&#x27;服务器空间不支持，请确认curl或fsocket，联系您的空间解决或者更换空间&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;30&#x27;</span>:<span class="string">&#x27;密码错误&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;40&#x27;</span>:<span class="string">&#x27;账号不存在&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;41&#x27;</span>:<span class="string">&#x27;余额不足&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;42&#x27;</span>:<span class="string">&#x27;账户已过期&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;43&#x27;</span>:<span class="string">&#x27;IP地址限制&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;50&#x27;</span>:<span class="string">&#x27;内容含有敏感词汇&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#报警模块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warning</span>():</span><br><span class="line">    smsapi = <span class="string">&quot;http://api.smsbao.com/&quot;</span></span><br><span class="line">    user = <span class="string">&#x27;****&#x27;</span></span><br><span class="line">    password = md5(<span class="string">&quot;*******&quot;</span>)</span><br><span class="line">    content = <span class="string">&#x27;【报警】检测到未知人员&#x27;</span></span><br><span class="line">    phone = <span class="string">&#x27;153*****001&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(&#123;<span class="string">&#x27;u&#x27;</span>:user,<span class="string">&#x27;p&#x27;</span>:password,<span class="string">&#x27;m&#x27;</span>:phone,<span class="string">&#x27;c&#x27;</span>:content&#125;)</span><br><span class="line">    send_url = smsapi + <span class="string">&#x27;sms?&#x27;</span> +data</span><br><span class="line">    response = urllib.request.urlopen(send_url)</span><br><span class="line">    the_page = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(statusStr[the_page])</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备识别的图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    gray = cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">    face_detector = cv.CascadeClassifier(<span class="string">&#x27;/Users/xxsql/anaconda3/lib/python3.10/site-packages/cv2/data/haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class="line">    face = face_detector.detectMultiScale(gray,<span class="number">1.1</span>,<span class="number">5</span>,cv.CASCADE_SCALE_IMAGE,(<span class="number">100</span>,<span class="number">100</span>),(<span class="number">300</span>,<span class="number">300</span>))</span><br><span class="line">    <span class="comment">#face = face_detector.detectMultiScale(gray)</span></span><br><span class="line">    <span class="keyword">for</span> x,y,w,h <span class="keyword">in</span> face:</span><br><span class="line">        cv.rectangle(img,(x,y),(x+w,y+h),color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line">        cv.circle(img,center=(x+w//<span class="number">2</span>,y+h//<span class="number">2</span>),radius=w//<span class="number">2</span>,color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),thickness=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#人脸识别，进行预测和评分，评分越大越不可信</span></span><br><span class="line">        ids, confidence = recogizer.predict(gray[y:y+h,x:x+w])</span><br><span class="line">        <span class="comment">#print(&#x27;标签id&#x27;,ids,&#x27;自信评分&#x27;,confidence)</span></span><br><span class="line">        <span class="keyword">if</span> confidence &gt; <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">global</span> warningtime</span><br><span class="line">            warningtime += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> warningtime &gt; <span class="number">100</span>:</span><br><span class="line">                warning()<span class="comment">#发送警报</span></span><br><span class="line">                warningtime = <span class="number">0</span></span><br><span class="line">            cv.putText(img,<span class="string">&#x27;unknown&#x27;</span>,(x+<span class="number">10</span>,y-<span class="number">10</span>),cv.FONT_HERSHEY_SIMPLEX,<span class="number">0.75</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv.putText(img, <span class="built_in">str</span>(names[ids-<span class="number">1</span>]), (x + <span class="number">10</span>, y - <span class="number">10</span>), cv.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;result&#x27;</span>,img)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>():</span><br><span class="line">    path = <span class="string">&quot;/Users/xxsql/PycharmProjects/pythonProject/opencv/data/xxsql/&quot;</span></span><br><span class="line">    <span class="comment">#name = []</span></span><br><span class="line">    imagePaths = [os.path.join(path,f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> imagePath.endswith(<span class="string">&#x27;.DS_Store&#x27;</span>):</span><br><span class="line">            name = <span class="built_in">str</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>,<span class="number">2</span>)[<span class="number">1</span>])</span><br><span class="line">            names.append(name)</span><br><span class="line"></span><br><span class="line">cap=cv.VideoCapture(<span class="number">0</span>)</span><br><span class="line">name()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    flag,frame=cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    face_detect_demo(frame)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>) == cv.waitKey(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure>

<h1 id="12-网页视频"><a href="#12-网页视频" class="headerlink" title="12. 网页视频"></a>12. 网页视频</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">CaptureVideo(<span class="params">object</span>)</span>:</span><br><span class="line">    def net<span class="constructor">_video(<span class="params">self</span>)</span>:</span><br><span class="line">        #获取网络视频</span><br><span class="line">        cam = cv2.<span class="constructor">VideoCapture(&#x27;<span class="params">rtmp</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">ns8</span>.<span class="params">indexforce</span>.<span class="params">com</span><span class="operator">/</span><span class="params">home</span><span class="operator">/</span><span class="params">mystream</span>&#x27;)</span></span><br><span class="line">        <span class="keyword">while</span> cam.is<span class="constructor">Opened()</span>:</span><br><span class="line">            success,frame = cam.read<span class="literal">()</span></span><br><span class="line">            cv2.imshow(<span class="string">&quot;Network&quot;</span>,frame)</span><br><span class="line">            cv2.wait<span class="constructor">Key(1)</span></span><br><span class="line"><span class="keyword">if</span> __name__<span class="operator"> == </span><span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    capture_video = <span class="constructor">CaptureVideo()</span></span><br><span class="line">    capture_video.net<span class="constructor">_video()</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现Word文档的读取</title>
    <url>/posts/ec209222/</url>
    <content><![CDATA[<h1 id="1-遍历所有文件"><a href="#1-遍历所有文件" class="headerlink" title="1. 遍历所有文件"></a>1. 遍历所有文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">allKeyPath = <span class="string">&quot;/Users/qiao/answerKey&quot;</span></span><br><span class="line">allItems = os.listdir(allKeyPath)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> allItems:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>



<h1 id="2-使用循环建立储存信息字典列表"><a href="#2-使用循环建立储存信息字典列表" class="headerlink" title="2. 使用循环建立储存信息字典列表"></a>2. 使用循环建立储存信息字典列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allStudentsData = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> allItems:</span><br><span class="line">    studentData = &#123;&#125;</span><br><span class="line">    allStudentsData.append(studentsData)</span><br></pre></td></tr></table></figure>



<h1 id="3-获取班级姓名"><a href="#3-获取班级姓名" class="headerlink" title="3.获取班级姓名"></a>3.获取班级姓名</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fileName = os.path.splitext(item)[<span class="number">0</span>]</span><br><span class="line">studentData[<span class="string">&quot;classInfo&quot;</span>] = fileName.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">studentData[<span class="string">&#x27;name&#x27;</span>] = fileName.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">allStudentsData.append(studentData)</span><br></pre></td></tr></table></figure>



<h1 id="4-获取Word文档基本结构"><a href="#4-获取Word文档基本结构" class="headerlink" title="4. 获取Word文档基本结构"></a>4. 获取Word文档基本结构</h1><h2 id="4-1-基本单位"><a href="#4-1-基本单位" class="headerlink" title="4.1 基本单位"></a>4.1 基本单位</h2><p>word文档的基本组成单位是&#x3D;&#x3D;段落&#x3D;&#x3D;。<strong>标题、目录、正文、图形、空行</strong>都是段落。</p>
<h2 id="4-2-样式"><a href="#4-2-样式" class="headerlink" title="4.2 样式"></a>4.2 样式</h2><p>每个段落之中的内容可以具有不同的样式（Style）。</p>
<p>常见的样式有：字体、字形、字号、字体颜色、下划线、删除线、上标和下标等。</p>
<h2 id="4-3-样式块"><a href="#4-3-样式块" class="headerlink" title="4.3 样式块"></a>4.3 样式块</h2><p>连续<strong>具有相同样式的基本单元</strong>可称为一个样式块（run）。</p>
<p>例如，图中这一段话原本是同一个样式块。但在这个段落中加粗一个字，那么这个字就形成了一个样式块。</p>
<p>![截屏2023-04-23 18.49.29](&#x2F;Users&#x2F;xxsql&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-04-23 18.49.29.png)</p>
<h2 id="4-4-表格"><a href="#4-4-表格" class="headerlink" title="4.4 表格"></a>4.4 表格</h2><p>与段落是并列关系</p>
<p>也就是说表格不属于任何段落，我们不能够通过遍历段落来获取表格。</p>
<p>和Excel表格的结构很相似，Word文档中的表格也是由单元格（Cell）组成。</p>
<p>单元格中的内容可以包含段落和表格，相当于独自构成了一个完整的Word文档。</p>
<h1 id="5-获取学生学号"><a href="#5-获取学生学号" class="headerlink" title="5. 获取学生学号"></a>5. 获取学生学号</h1><h2 id="5-1-python-docx模块的安装和导入"><a href="#5-1-python-docx模块的安装和导入" class="headerlink" title="5.1 python-docx模块的安装和导入"></a>5.1 python-docx模块的安装和导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install python-docx</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docx</span><br></pre></td></tr></table></figure>



<h2 id="5-2-读取word文档"><a href="#5-2-读取word文档" class="headerlink" title="5.2 读取word文档"></a>5.2 读取word文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keyPath = os.path.join(allKeyPath,item)</span><br><span class="line">doc = docx.Document(keyPath)</span><br><span class="line"><span class="built_in">print</span>(doc)</span><br></pre></td></tr></table></figure>



<h2 id="5-3-读取指定段落-paragraphs"><a href="#5-3-读取指定段落-paragraphs" class="headerlink" title="5.3 读取指定段落 (.paragraphs)"></a>5.3 读取指定段落 (.paragraphs)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取第四段学号段，并赋值给变量idPara</span></span><br><span class="line"> idPara = doc.paragraphs[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>



<h2 id="5-4-读取指定样式块-runs"><a href="#5-4-读取指定样式块-runs" class="headerlink" title="5.4 读取指定样式块 (.runs)"></a>5.4 读取指定样式块 (.runs)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取学号段中第二个样式块，并赋值给变量idRun</span></span><br><span class="line">idRun = idPara.runs[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<h2 id="5-5-读取文本内容-text"><a href="#5-5-读取文本内容-text" class="headerlink" title="5.5 读取文本内容 (.text)"></a>5.5 读取文本内容 (.text)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取学号，并赋值到学生数据字典的id键里</span></span><br><span class="line">studentData[<span class="string">&quot;id&quot;</span>] = idRun.text</span><br></pre></td></tr></table></figure>



<h2 id="5-6-读取Word内置段落样式名称"><a href="#5-6-读取Word内置段落样式名称" class="headerlink" title="5.6 读取Word内置段落样式名称"></a>5.6 读取Word内置段落样式名称</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过访问段落下的 .style 属性，可以获取段落中的样式列表。再通过访问样式列表下的 .name 属性。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="6-获取填空题答案"><a href="#6-获取填空题答案" class="headerlink" title="6. 获取填空题答案"></a>6. 获取填空题答案</h1><p>用标准答案的索引<strong>加8</strong>，就可以得到对应的学生答案所在的段落索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">standardTwo = [<span class="string">&quot;东临碣石&quot;</span>, <span class="string">&quot;行舟绿水前&quot;</span>, <span class="string">&quot;孤山寺北贾亭西&quot;</span>, <span class="string">&quot;断肠人在天涯&quot;</span>, <span class="string">&quot;故人具鸡黍&quot;</span>, <span class="string">&quot;一曲新词酒一杯&quot;</span>, <span class="string">&quot;何当共剪西窗烛&quot;</span>, <span class="string">&quot;误入藕花深处&quot;</span>, <span class="string">&quot;烟笼寒水月笼沙&quot;</span>, <span class="string">&quot;万籁此都寂&quot;</span>, <span class="string">&quot;初日照高林&quot;</span>, <span class="string">&quot;腾蛇乘雾&quot;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="6-1-方法一"><a href="#6-1-方法一" class="headerlink" title="6.1 方法一"></a>6.1 方法一</h2><p>先使用range(0, len(…))来保存运行中standardTwo的每个元素的索引，也就是生成了一个从0开始到(len(standardTwo)-1)结束的列表indexList。</p>
<p>再用for循环遍历索引列表indexList。</p>
<p>在for循环里，通过把i和8相加，来记录学生答案所在的段落索引，并赋值给了idx。</p>
<p>最后通过i和idx这两个索引，分别获取了标准答案和对应的学生答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indexList = <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(standardTwo))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> indexList:</span><br><span class="line">    idx = i + <span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(standardTwo[i],doc.paragraphs[idx].runs[<span class="number">1</span>].text)</span><br></pre></td></tr></table></figure>



<h2 id="6-3-方法二-—-遍历索引（enumerate-）"><a href="#6-3-方法二-—-遍历索引（enumerate-）" class="headerlink" title="6.3 方法二 — 遍历索引（enumerate()）"></a>6.3 方法二 — 遍历索引（enumerate()）</h2><p>enumerate()函数需要传入一个<strong>必选参数</strong>：任意可遍历的数据对象。</p>
<p>将standardTwo作为必选参数传入，并搭配了一个for循环。<strong>idx</strong>是用于存储<strong>计数器的变量</strong>，<strong>value</strong>则是用于存储每次遍历所<strong>返回的元素</strong>的变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> idx,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(standarTwo):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;索引值<span class="subst">&#123;idx&#125;</span>所对应的列表元素是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="6-3-1-修改起始索引"><a href="#6-3-1-修改起始索引" class="headerlink" title="6.3.1 修改起始索引"></a>6.3.1 修改起始索引</h3><p>将初始值作为可选参数传入enumerate()函数中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> idx,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(standardTwo,<span class="number">8</span>):</span><br><span class="line">        <span class="comment"># 格式化输出：索引值n所对应的列表元素是xxx</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;索引值<span class="subst">&#123;idx&#125;</span>所对应的列表元素是<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="6-4-计算填空题分数"><a href="#6-4-计算填空题分数" class="headerlink" title="6.4 计算填空题分数"></a>6.4 计算填空题分数</h2><p>初始化学生数据字典里scoreTwo字段为0分，作为填空题分数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用这个键之前，必须先在第一个for循环里和第二个for循环外，对它进行初始化赋值为0，这样才能保证每位同学的起始分数都是0。</span></span><br><span class="line">studentData[<span class="string">&quot;scoreTwo&quot;</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断当学生答案与标准答案相等时,学生的填空题分数加5分</span></span><br><span class="line"><span class="keyword">if</span> studentAnswerTwo == value:</span><br><span class="line">    studentData[<span class="string">&quot;scoreTwo&quot;</span>] += <span class="number">5</span></span><br><span class="line">allStudentsData.append(studentData)</span><br><span class="line"><span class="built_in">print</span>(allStudentData)</span><br></pre></td></tr></table></figure>



<h1 id="7-获取选择题答案"><a href="#7-获取选择题答案" class="headerlink" title="7. 获取选择题答案"></a>7. 获取选择题答案</h1><h2 id="7-1-读取指定表格"><a href="#7-1-读取指定表格" class="headerlink" title="7.1 读取指定表格"></a>7.1 读取指定表格</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = doc.tables[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h2 id="7-2-读取指定行"><a href="#7-2-读取指定行" class="headerlink" title="7.2 读取指定行"></a>7.2 读取指定行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取表格第二行，赋值给变量secRow</span></span><br><span class="line">secRow = table.rows[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="7-3-Word读取单元格（1）"><a href="#7-3-Word读取单元格（1）" class="headerlink" title="7.3 Word读取单元格（1）"></a>7.3 Word读取单元格（1）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取第二行中的所有单元格，并赋值给变量secCell</span></span><br><span class="line">secCell = secRow.cells</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用for循环和enumerate()函数</span></span><br><span class="line"><span class="comment"># 遍历储存标准答案的列表standardOne的同时</span></span><br><span class="line"><span class="comment"># 生成一个从0开始的idx</span></span><br><span class="line"><span class="keyword">for</span> idx,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(standardOne):</span><br><span class="line">  <span class="comment"># 获取学生选择题答案，并赋值给变量studentAnswerOne</span></span><br><span class="line">    studentAnswerOne = secCell[idx].text</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化学生数据字典里scoreOne字段为0分，作为选择题分数</span></span><br><span class="line">studentData[<span class="string">&quot;scoreOne&quot;</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#学生答案studentAnswerOne和标准答案value进行比较</span></span><br><span class="line"><span class="keyword">if</span> studentAnswerOne == value:</span><br><span class="line">    studentData[<span class="string">&quot;scoreOne&quot;</span>] += <span class="number">2</span></span><br></pre></td></tr></table></figure>



<h1 id="8-将信息导入到Excel表格"><a href="#8-将信息导入到Excel表格" class="headerlink" title="8. 将信息导入到Excel表格"></a>8. 将信息导入到Excel表格</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newWb = openpyxl.Workbook()</span><br><span class="line">sheet = newWb[<span class="string">&quot;Sheet&quot;</span>]</span><br><span class="line">sheet.title = <span class="string">&quot;成绩表&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给工作表设置表头</span></span><br><span class="line">sheet[<span class="string">&quot;A1&quot;</span>].value = <span class="string">&quot;学生姓名&quot;</span></span><br><span class="line">sheet[<span class="string">&quot;B1&quot;</span>].value = <span class="string">&quot;学生班级&quot;</span></span><br><span class="line">sheet[<span class="string">&quot;C1&quot;</span>].value = <span class="string">&quot;学生学号&quot;</span></span><br><span class="line">sheet[<span class="string">&quot;D1&quot;</span>].value = <span class="string">&quot;选择题分数&quot;</span></span><br><span class="line">sheet[<span class="string">&quot;E1&quot;</span>].value = <span class="string">&quot;填空题分数&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index,studentData <span class="keyword">in</span> <span class="built_in">enumerate</span>(allStudentData,<span class="number">2</span>):</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h1 id="9-Word读取指定单元格（2）"><a href="#9-Word读取指定单元格（2）" class="headerlink" title="9. Word读取指定单元格（2）"></a>9. Word读取指定单元格（2）</h1><h2 id="9-1-段落末尾添加样式块"><a href="#9-1-段落末尾添加样式块" class="headerlink" title="9.1 段落末尾添加样式块"></a>9.1 段落末尾添加样式块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将&quot;425&quot;赋值给变量totalScore</span></span><br><span class="line">totalScore = <span class="string">&quot;425&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 读取Word文档的第1个表格第2行第1列的空白段落，并赋值给变量cellPara</span></span><br><span class="line">cellPara = doc.tables[<span class="number">0</span>].cell(<span class="number">1</span>,<span class="number">0</span>).paragraphs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 在空白单元格的空白段落cellPara后，加入变量totalScore</span></span><br><span class="line">cellPara.add_run(totalScore)</span><br></pre></td></tr></table></figure>

<h2 id="9-2-数据类型转为字符串"><a href="#9-2-数据类型转为字符串" class="headerlink" title="9.2 数据类型转为字符串"></a>9.2 数据类型转为字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listeningScore = <span class="built_in">str</span>(row[<span class="number">5</span>].value)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现Word文档的写入</title>
    <url>/posts/d36b22a0/</url>
    <content><![CDATA[<h1 id="1-在段落中找到需要插入信息的位置"><a href="#1-在段落中找到需要插入信息的位置" class="headerlink" title="1. 在段落中找到需要插入信息的位置"></a>1. 在段落中找到需要插入信息的位置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入docx</span></span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="comment">#读取工作目录里名为&quot;成绩报告单模版.docx&quot;的Word文档并赋值给变量doc</span></span><br><span class="line">doc = docx.Document(<span class="string">&quot;成绩报告单模版.docx&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">runList = doc.paragraphs[<span class="number">3</span>].runs</span><br></pre></td></tr></table></figure>

<h2 id="1-1-样式块-Run-末尾添加文本"><a href="#1-1-样式块-Run-末尾添加文本" class="headerlink" title="1.1 样式块(Run) 末尾添加文本"></a>1.1 样式块(Run) 末尾添加文本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;小夜同学&quot;</span></span><br><span class="line">nameRun = doc.paragraphs[<span class="number">3</span>].runs[<span class="number">2</span>]</span><br><span class="line">nameRun.add_text(name)</span><br></pre></td></tr></table></figure>

<h1 id="2-对Word文档内容进行替换"><a href="#2-对Word文档内容进行替换" class="headerlink" title="2. 对Word文档内容进行替换"></a>2. 对Word文档内容进行替换</h1><h2 id="2-1-定义函数实现替换功能"><a href="#2-1-定义函数实现替换功能" class="headerlink" title="2.1 定义函数实现替换功能"></a>2.1 定义函数实现替换功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义一个包含三个参数的新函数。doc，是一个Word文档（Document）对象，oldInfo，是Word文档中的需要被替换的字符串，newInfo，是用于替换的新字符串。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replaceInfo</span>(<span class="params">doc,oldInfo,newInfo</span>):</span><br><span class="line">    <span class="keyword">for</span> paragraph <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">        <span class="keyword">for</span> run <span class="keyword">in</span> paragraphs.runs:</span><br><span class="line">            run.text = run.text.replace(oldInfo,newInfo)</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> doc.tables:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> table.rows:</span><br><span class="line">            <span class="keyword">for</span> cell <span class="keyword">in</span> row.cells:</span><br><span class="line">                cell.text = cell.text.replace(oldInfo,newInfo)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;replace()函数并不会改变原字符串。如果需要替换后并更改字符串变量，需要重新对变量进行赋值。&#x3D;&#x3D;</p>
<h2 id="2-2-遍历工作表每一行数据"><a href="#2-2-遍历工作表每一行数据" class="headerlink" title="2.2 遍历工作表每一行数据"></a>2.2 遍历工作表每一行数据</h2><h3 id="2-2-1-单独提取表头数据"><a href="#2-2-1-单独提取表头数据" class="headerlink" title="2.2.1 单独提取表头数据"></a>2.2.1 单独提取表头数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为表头定义一个空的元组并赋值给变量firstRow</span></span><br><span class="line">firstRow = ()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历工作表的所有行和其对应的索引</span></span><br><span class="line"><span class="comment"># 用变量rowIndex表示索引，变量row表示每一行</span></span><br><span class="line"><span class="keyword">for</span> rowIndex, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(ws.rows):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是第一行时</span></span><br><span class="line">    <span class="keyword">if</span> rowIndex == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将第一行数据赋值给变量firstRow</span></span><br><span class="line">        firstRow = row</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出第一行数据以确认赋值成功</span></span><br><span class="line"><span class="built_in">print</span>(firstRow)</span><br></pre></td></tr></table></figure>



<h3 id="2-2-2-遍历非表头数据"><a href="#2-2-2-遍历非表头数据" class="headerlink" title="2.2.2 遍历非表头数据"></a>2.2.2 遍历非表头数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#非第一行数据时</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    doc = docx.Document(<span class="string">&quot;成绩报告单模版.docx&quot;</span>)</span><br><span class="line">    <span class="comment">#遍历这一行每一个单元格对应列的索引</span></span><br><span class="line">    <span class="keyword">for</span> columnIndex, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;columnIndex&#125;</span>列数据的单元格为<span class="subst">&#123;cell&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="2-2-3-赋值oldInfo"><a href="#2-2-3-赋值oldInfo" class="headerlink" title="2.2.3 赋值oldInfo"></a>2.2.3 赋值oldInfo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">oldInfo = firstRow[columnIndex].value</span><br></pre></td></tr></table></figure>



<h3 id="2-2-4-赋值newInfo"><a href="#2-2-4-赋值newInfo" class="headerlink" title="2.2.4 赋值newInfo"></a>2.2.4 赋值newInfo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newInfo = <span class="built_in">str</span>(cell.value)</span><br></pre></td></tr></table></figure>



<h2 id="2-3-调用函数"><a href="#2-3-调用函数" class="headerlink" title="2.3 调用函数"></a>2.3 调用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">replaceInfo(doc,oldInfo,newInfo)</span><br></pre></td></tr></table></figure>



<h2 id="2-4-保存文档"><a href="#2-4-保存文档" class="headerlink" title="2.4 保存文档"></a>2.4 保存文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = row[<span class="number">0</span>].value</span><br><span class="line">doc.save(<span class="string">f&quot;学生成绩单/成绩报告单_<span class="subst">&#123;name&#125;</span>.docx&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现PDF文档读取</title>
    <url>/posts/7075c66c/</url>
    <content><![CDATA[<h1 id="1-获取PDF文档列表"><a href="#1-获取PDF文档列表" class="headerlink" title="1. 获取PDF文档列表"></a>1. 获取PDF文档列表</h1><h2 id="1-1-PDF格式（Portable-Document-Format）"><a href="#1-1-PDF格式（Portable-Document-Format）" class="headerlink" title="1.1 PDF格式（Portable Document Format）"></a>1.1 PDF格式（Portable Document Format）</h2><h3 id="1-1-1-扫描版"><a href="#1-1-1-扫描版" class="headerlink" title="1.1.1 扫描版"></a>1.1.1 扫描版</h3><p>一般直接通过扫描仪成<a href="https://baike.baidu.com/item/%E4%BD%8D%E5%9B%BE/1017781?fr=aladdin">位图</a>格式的PDF，文字以图片格式存储。将鼠标放在指定的位置点击，看不到闪动的光标。</p>
<h3 id="1-1-2-文字版"><a href="#1-1-2-文字版" class="headerlink" title="1.1.2 文字版"></a>1.1.2 文字版</h3><p>一般是Word文档转成的PDF，文字以<a href="https://baike.baidu.com/item/%E7%9F%A2%E9%87%8F%E5%9B%BE/2490766?fr=aladdin">矢量图</a>格式存储。将鼠标在指定位置点击，能看到闪动的光标。</p>
<h2 id="1-2-获取路径下文件或文件夹名称"><a href="#1-2-获取路径下文件或文件夹名称" class="headerlink" title="1.2 获取路径下文件或文件夹名称"></a>1.2 获取路径下文件或文件夹名称</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">&quot;/Users/xiaoqian/Desktop/文稿汇总&quot;</span></span><br><span class="line">allItems = os.listdir(path)</span><br></pre></td></tr></table></figure>



<h2 id="1-3-文件名排序"><a href="#1-3-文件名排序" class="headerlink" title="1.3 文件名排序"></a>1.3 文件名排序</h2><h3 id="1-3-1-创建存储序号的列表"><a href="#1-3-1-创建存储序号的列表" class="headerlink" title="1.3.1 创建存储序号的列表"></a>1.3.1 创建存储序号的列表</h3><p>想要让PDF文档按照章节顺序输出，就需要对文件名列表进行升序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nameList = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> allItems:</span><br><span class="line">    nameList.append(os.path.splitext(name)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(nameList)</span><br><span class="line"><span class="comment">#[&#x27;1&#x27;, &#x27;5&#x27;, &#x27;3&#x27;, &#x27;2&#x27;, &#x27;9&#x27;, &#x27;7&#x27;, &#x27;4&#x27;, &#x27;6&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-列表排序-sort"><a href="#1-3-2-列表排序-sort" class="headerlink" title="1.3.2 列表排序(sort())"></a>1.3.2 列表排序(sort())</h3><p>默认情况下，使用sort()函数后，列表内的元素会重新按照元素互相比较后的&#x3D;&#x3D;升序&#x3D;&#x3D;进行排列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numList = [<span class="number">52</span>,<span class="number">70</span>,<span class="number">86</span>,<span class="number">63</span>,<span class="number">33</span>]</span><br><span class="line">numList.sort</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-1-sort-函数的可选参数"><a href="#1-3-2-1-sort-函数的可选参数" class="headerlink" title="1.3.2.1 sort()函数的可选参数"></a>1.3.2.1 sort()函数的可选参数</h4><p>sort()函数还有两个可选的参数。第一个参数是&#x3D;&#x3D;key&#x3D;&#x3D;，传入一个函数名，使元素在互相比较前先调用传入的这个函数，然后再进行比较。</p>
<p>第二个参数是&#x3D;&#x3D;reverse&#x3D;&#x3D;，表示是否反转排序，默认是False。如果传入True，则会按照降序进行排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bList = [<span class="string">&quot;3&quot;</span>, <span class="string">&quot;17&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;2&quot;</span>]</span><br><span class="line">bList.sort(key=<span class="built_in">int</span>,reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(bList)</span><br><span class="line"><span class="comment">#[&#x27;23&#x27;, &#x27;17&#x27;, &#x27;5&#x27;, &#x27;3&#x27;, &#x27;2&#x27;]</span></span><br></pre></td></tr></table></figure>



<h2 id="1-4-给文件添加后缀名"><a href="#1-4-给文件添加后缀名" class="headerlink" title="1.4 给文件添加后缀名"></a>1.4 给文件添加后缀名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将nameList中的元素按照整型进行升序</span></span><br><span class="line">nameList.sort(key = <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个newList空列表</span></span><br><span class="line">newList = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环遍历nameList</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nameList:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 所有元素后添加&quot;.pdf&quot;，添加到newList列表中</span></span><br><span class="line">    newList.append(i + <span class="string">&quot;.pdf&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="2-读取PDF文件"><a href="#2-读取PDF文件" class="headerlink" title="2. 读取PDF文件"></a>2. 读取PDF文件</h1><h2 id="2-1-导入pdfplumber模块"><a href="#2-1-导入pdfplumber模块" class="headerlink" title="2.1 导入pdfplumber模块"></a>2.1 导入pdfplumber模块</h2><p>在Python中，想要处理PDF的文本和表格，使用&#x3D;&#x3D;pdfplumber&#x3D;&#x3D;模块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pdfplumber</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfplumber</span><br></pre></td></tr></table></figure>

<h2 id="2-2-读取PDF文档"><a href="#2-2-读取PDF文档" class="headerlink" title="2.2 读取PDF文档"></a>2.2 读取PDF文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用for循环遍历newList</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> newList:</span><br><span class="line">    <span class="comment">#使用os.path.join()函数拼接pdf文件路径，赋值给pdfPath</span></span><br><span class="line">    pdfPath = os.path.join(path,item)</span><br><span class="line">    <span class="comment">#读取pdfPath中的文件，并赋值给pdf</span></span><br><span class="line">    pdf = pdfplumber.<span class="built_in">open</span>(pdfPath)</span><br></pre></td></tr></table></figure>



<h2 id="2-3-提取PDF中的文本"><a href="#2-3-提取PDF中的文本" class="headerlink" title="2.3 提取PDF中的文本"></a>2.3 提取PDF中的文本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> pdf.pages:</span><br><span class="line">    <span class="comment">#使用extract_text()函数提取页面中的文本，赋值给textDdata</span></span><br><span class="line">    textData = page.extract_text()</span><br></pre></td></tr></table></figure>



<h2 id="2-4-创建Word文档并添加段落"><a href="#2-4-创建Word文档并添加段落" class="headerlink" title="2.4 创建Word文档并添加段落"></a>2.4 创建Word文档并添加段落</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入docx</span></span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="comment">#创建一个新的Word文档并赋值给变量file</span></span><br><span class="line">file = docx.Document()</span><br><span class="line"><span class="comment">#添加一个新段落，内容为&quot;Tomato and potato&quot;</span></span><br><span class="line">file.add_paragraph(<span class="string">&quot;Tomato and potato&quot;</span>)</span><br><span class="line"><span class="comment">#输出&quot;添加完成&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;添加完成&quot;</span>)</span><br><span class="line"><span class="comment">#给文档命名，并保存在指定路径 /Users/xiaoqian/Desktop/三行情书.docx</span></span><br><span class="line">file.save(<span class="string">&quot;/Users/xiaoqian/Desktop/三行情书.docx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="3-添加分页符-add-page-break"><a href="#3-添加分页符-add-page-break" class="headerlink" title="3. 添加分页符 (add_page_break())"></a>3. 添加分页符 (add_page_break())</h1><p>分页的一种符号，能够在一页内容未满的情况下，手动使内容分成两页。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file.add_page_break()</span><br></pre></td></tr></table></figure>



<h1 id="4-PDF表格提取"><a href="#4-PDF表格提取" class="headerlink" title="4. PDF表格提取"></a>4. PDF表格提取</h1><h2 id="4-1-提取页面中的表格"><a href="#4-1-提取页面中的表格" class="headerlink" title="4.1 提取页面中的表格"></a>4.1 提取页面中的表格</h2><h3 id="4-1-1-PDF表格格式"><a href="#4-1-1-PDF表格格式" class="headerlink" title="4.1.1 PDF表格格式"></a>4.1.1 PDF表格格式</h3><p>在PDF文档中有两种类型的表格，一种没有边框，一种有边框。</p>
<p>使用pdfplumber模块提取表格时，只能读取&#x3D;&#x3D;保留边框的表格&#x3D;&#x3D;，没有边框的表格读取出来就是一个空表格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> pdf.pages:</span><br><span class="line">    tableData = page.extract_tables()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>与Excel和Word不同，这里每一个表格对象是一个该表格所有行的数据组成的列表。每一行的数据，又是由该行单元格的值组成的&#x3D;&#x3D;列表&#x3D;&#x3D;。</p>
<h2 id="4-2-新建一个Excel文档"><a href="#4-2-新建一个Excel文档" class="headerlink" title="4.2 新建一个Excel文档"></a>4.2 新建一个Excel文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用import导入openpyxl模块</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="comment">#创建一个新工作簿赋值给变量newWb</span></span><br><span class="line">newWb = openpyxl.Workbook()</span><br><span class="line"><span class="comment">#将名为Sheet的默认工作表，赋值给sheet变量</span></span><br><span class="line">sheet = newWb[<span class="string">&quot;Sheet&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="4-3-在工作表中添加数据"><a href="#4-3-在工作表中添加数据" class="headerlink" title="4.3 在工作表中添加数据"></a>4.3 在工作表中添加数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> tableData:</span><br><span class="line">    sheet.append(row)</span><br></pre></td></tr></table></figure>



<h2 id="4-4-保存Excel文档"><a href="#4-4-保存Excel文档" class="headerlink" title="4.4 保存Excel文档"></a>4.4 保存Excel文档</h2><pre><code class="python">newWb.save(&quot;/Users/acheng/Desktop/账单合集.xlsx&quot;)
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现Excel表格数据读取</title>
    <url>/posts/e1389fa9/</url>
    <content><![CDATA[<h2 id="1-读取数据"><a href="#1-读取数据" class="headerlink" title="1. 读取数据"></a>1. 读取数据</h2><h3 id="1-1-openpyxl-模块的安装和导入"><a href="#1-1-openpyxl-模块的安装和导入" class="headerlink" title="1.1 openpyxl 模块的安装和导入"></a>1.1 openpyxl 模块的安装和导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure>

<h3 id="1-2-导入openpyxl-模块"><a href="#1-2-导入openpyxl-模块" class="headerlink" title="1.2 导入openpyxl 模块"></a>1.2 导入openpyxl 模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br></pre></td></tr></table></figure>

<h3 id="1-3-读取工作簿-openpyxl-load-workbook"><a href="#1-3-读取工作簿-openpyxl-load-workbook" class="headerlink" title="1.3 读取工作簿(openpyxl.load_workbook())"></a>1.3 读取工作簿(openpyxl.load_workbook())</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作簿文件的路径需要作为函数参数传入。若文件就在代码运行的工作目录，就可以直接传入文件名。</span></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&quot;2019年1月销售订单.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-4-读取指定工作表"><a href="#1-4-读取指定工作表" class="headerlink" title="1.4 读取指定工作表"></a>1.4 读取指定工作表</h3><h4 id="1-4-1-访问工作簿中工作表"><a href="#1-4-1-访问工作簿中工作表" class="headerlink" title="1.4.1 访问工作簿中工作表"></a>1.4.1 访问工作簿中工作表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(wb.sheetnames)</span><br></pre></td></tr></table></figure>

<h4 id="1-4-1-获取某一工作表"><a href="#1-4-1-获取某一工作表" class="headerlink" title="1.4.1 获取某一工作表"></a>1.4.1 获取某一工作表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">productSheet = wb[<span class="string">&#x27;销售订单数据&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="2-读取指定单元格"><a href="#2-读取指定单元格" class="headerlink" title="2. 读取指定单元格"></a>2. 读取指定单元格</h2><h3 id="2-1-中括号-内填入列号和行号的方式去获取"><a href="#2-1-中括号-内填入列号和行号的方式去获取" class="headerlink" title="2.1 中括号[ ]内填入列号和行号的方式去获取"></a>2.1 中括号[ ]内填入列号和行号的方式去获取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(productSheet[<span class="string">&quot;C5&quot;</span>]) </span><br></pre></td></tr></table></figure>

<h3 id="2-2-访问单元格的值"><a href="#2-2-访问单元格的值" class="headerlink" title="2.2 访问单元格的值"></a>2.2 访问单元格的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(productSheet[<span class="string">&quot;C5&quot;</span>].value)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-获取单元格公式计算后的值"><a href="#2-3-获取单元格公式计算后的值" class="headerlink" title="2.3 获取单元格公式计算后的值"></a>2.3 获取单元格公式计算后的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在打开工作簿时传入参数data_only = True</span></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&quot;2019年1月销售订单&quot;</span>,data_only = <span class="literal">True</span>)</span><br><span class="line">productSheet = wb[<span class="string">&#x27;销售订单数据&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(productSheet[<span class="string">&quot;C5&quot;</span>].value)</span><br></pre></td></tr></table></figure>

<h2 id="3-工作表行数据遍历"><a href="#3-工作表行数据遍历" class="headerlink" title="3. 工作表行数据遍历"></a>3. 工作表行数据遍历</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历行数据</span></span><br><span class="line"><span class="keyword">for</span> rowData <span class="keyword">in</span> productSheet.rows:</span><br><span class="line">    <span class="built_in">print</span>(rowData)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量colaSold用来表示本月“火龙果可乐”的销售金额，并赋值为0</span></span><br><span class="line">colaSold = <span class="number">0</span></span><br><span class="line"><span class="comment"># 通过索引2获取第3列数据，也就是商品名</span></span><br><span class="line">productName = rowData[<span class="number">2</span>].value</span><br></pre></td></tr></table></figure>

<h2 id="4-列号转数字-openpyxl-utils-cell-column-index-from-string"><a href="#4-列号转数字-openpyxl-utils-cell-column-index-from-string" class="headerlink" title="4. 列号转数字 (openpyxl.utils.cell.column_index_from_string())"></a>4. 列号转数字 (openpyxl.utils.cell.column_index_from_string())</h2><p>如果要定位的列数字比较大，比如订单的总价在第M列，通过肉眼观察来确定索引略显繁琐</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rowData <span class="keyword">in</span> productSheet.rows:</span><br><span class="line">    productName = rowData[<span class="number">2</span>].value</span><br><span class="line">    <span class="comment"># 获取订单总价I列的索引总和,这里之所以-1是因为需要将表头去除</span></span><br><span class="line">    priceIndex = openpyxl.utils.cell.column_index_from_string(<span class="string">&quot;I&quot;</span>)-<span class="number">1</span></span><br><span class="line">    price = rowDate[priceIndex].value</span><br><span class="line"><span class="keyword">if</span> productName == <span class="string">&quot;火龙果可乐&quot;</span></span><br><span class="line">    colaSold = colaSold + price</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;2019年1月火龙果可乐销售额为<span class="subst">&#123;price&#125;</span>元&quot;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h2 id="5-函数优化代码"><a href="#5-函数优化代码" class="headerlink" title="5. 函数优化代码"></a>5. 函数优化代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getMonthlySold</span>(<span class="params">filePath</span>):</span><br><span class="line">    wb = openpyxl.load_workbook(filePath,data_only=<span class="literal">True</span>)</span><br><span class="line">    orderSheet = wb[<span class="string">&quot;销售订单数据&quot;</span>]</span><br><span class="line">    colaSold = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> rowData <span class="keyword">in</span> orderSheet.raws:</span><br><span class="line">        productName = rowData[<span class="number">2</span>].value</span><br><span class="line">        priceIndex = openpyxl.utils.cell.column_index_from_string(<span class="string">&quot;I&quot;</span>)-<span class="number">1</span></span><br><span class="line">        price = rowData[priceIndex].value</span><br><span class="line">        <span class="keyword">if</span> productName = <span class="string">&quot;火龙果可乐&quot;</span>:</span><br><span class="line">            colaSold = colaSold + pice</span><br><span class="line">    <span class="keyword">return</span> colaSold</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算销售额</span></span><br><span class="line">Februarysold = getMonthlySold(<span class="string">&quot;2019年2月销售订单.xlsx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(Februarysold)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个空列表soldList来逐个装入各月份销售额</span></span><br><span class="line">soldList = []</span><br><span class="line"><span class="keyword">for</span> month <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">    monthlySold = getMonthlySold(<span class="string">f&quot;2019年<span class="subst">&#123;month&#125;</span>月销售订单.xlsx&quot;</span>)</span><br><span class="line">    soldList.append(monthlySold)</span><br><span class="line"><span class="built_in">print</span>(soldList)</span><br></pre></td></tr></table></figure>

<h2 id="6-获取列表最大值-max"><a href="#6-获取列表最大值-max" class="headerlink" title="6. 获取列表最大值 max()"></a>6. 获取列表最大值 max()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maxSold = <span class="built_in">max</span>(soldList)</span><br><span class="line"><span class="built_in">print</span>(maxSold)</span><br></pre></td></tr></table></figure>



<h2 id="7-获取列表元素的索引-index"><a href="#7-获取列表元素的索引-index" class="headerlink" title="7. 获取列表元素的索引 index()"></a>7. 获取列表元素的索引 index()</h2><p>已知元素可以通过**index( )**函数找出该元素的索引，若列表中不存在该元素则会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用index()函数获取最大值的索引，索引值加1后得到月份</span></span><br><span class="line">maxMonth = soldList.index(maxSold) + <span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现工作簿的读取和写入</title>
    <url>/posts/ef46fbca/</url>
    <content><![CDATA[<h1 id="1-导入openpyxl-模块"><a href="#1-导入openpyxl-模块" class="headerlink" title="1. 导入openpyxl 模块"></a>1. 导入openpyxl 模块</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br></pre></td></tr></table></figure>



<h1 id="2-创建新的工作簿"><a href="#2-创建新的工作簿" class="headerlink" title="2. 创建新的工作簿"></a>2. 创建新的工作簿</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newWb = openpyxl.Workbook()</span><br></pre></td></tr></table></figure>

<p><strong>新建工作簿中都有一个默认工作表，名称为Sheet</strong></p>
<h1 id="3-创建平台工作表"><a href="#3-创建平台工作表" class="headerlink" title="3. 创建平台工作表"></a>3. 创建平台工作表</h1><h2 id="3-1-修改工作表名称"><a href="#3-1-修改工作表名称" class="headerlink" title="3.1 修改工作表名称"></a>3.1 修改工作表名称</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将名为Sheet的默认工作表赋值给aSheet变量</span></span><br><span class="line">aSheet = newWb[<span class="string">&quot;Sheet&quot;</span>]</span><br><span class="line"><span class="comment"># 将aSheet工作表名称修改为“A平台”</span></span><br><span class="line">aSheet.title = <span class="string">&quot;A平台&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-2-创建工作表"><a href="#3-2-创建工作表" class="headerlink" title="3.2 创建工作表"></a>3.2 创建工作表</h2><p><strong>通过工作簿对象使用create_sheet()函数可以创建一个名称为Sheet的工作表。</strong></p>
<p>若名为Sheet工作表已经存在，则会在Sheet后依次添加数字，比如Sheet1，Sheet2。</p>
<p><strong>函数中传入的参数即指定的命名</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bSheet = create_sheet(<span class="string">&quot;B平台&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="3-3-设置单元格的值"><a href="#3-3-设置单元格的值" class="headerlink" title="3.3 设置单元格的值"></a>3.3 设置单元格的值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给工作表a设置表头</span></span><br><span class="line">aSheet[<span class="string">&quot;A1&quot;</span>].value = <span class="string">&quot;工作表&quot;</span></span><br><span class="line">aSheet[<span class="string">&quot;B1&quot;</span>].value = <span class="string">&quot;月份&quot;</span></span><br><span class="line">aSheet[<span class="string">&quot;C1&quot;</span>].value = <span class="string">&quot;销售额&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-4-遍历所有工作表"><a href="#3-4-遍历所有工作表" class="headerlink" title="3.4 遍历所有工作表"></a>3.4 遍历所有工作表</h2><p>通过<strong>for循环</strong>逐个访问所有工作表的<strong>worksheets</strong>属性并设置表头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> newWb.worksheets:</span><br><span class="line">    sheet[<span class="string">&#x27;A1&#x27;</span>].value = <span class="string">&quot;工作表&quot;</span></span><br><span class="line">    sheet[<span class="string">&#x27;B1&#x27;</span>].value = <span class="string">&quot;月份&quot;</span></span><br><span class="line">    sheet[<span class="string">&quot;C1&quot;</span>].value = <span class="string">&quot;销售额&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="4-保存工作簿文件"><a href="#4-保存工作簿文件" class="headerlink" title="4. 保存工作簿文件"></a>4. 保存工作簿文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newWb.save(<span class="string">&quot;/Users/yequ/data/汇总.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="5-读取每个平台每个商品的销售额"><a href="#5-读取每个平台每个商品的销售额" class="headerlink" title="5. 读取每个平台每个商品的销售额"></a>5. 读取每个平台每个商品的销售额</h1><h2 id="5-1-格式化最小宽度"><a href="#5-1-格式化最小宽度" class="headerlink" title="5.1 格式化最小宽度"></a>5.1 格式化最小宽度</h2><p><strong>最小宽度</strong>：指最小字符串长度。原字符串长度不够时补<strong>空格、0或其他字符串</strong>来达到最小字符串长度。</p>
<p>这样当<strong>字符串</strong>的宽度小于设置的最小宽度时，就会在字符串的<strong>右边通过补空格</strong>的方式达到设置的字符串长度。</p>
<p>如果格式化字符串内是一个<strong>数字</strong>，则可以在最小宽度的数字<strong>左边添加一个0</strong>，表示用0来补齐最小宽度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 姓名列表</span></span><br><span class="line">nameList = [<span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;Tony&quot;</span>, <span class="string">&quot;Kevin&quot;</span>]</span><br><span class="line"><span class="comment"># 编号列表</span></span><br><span class="line">idList = [<span class="number">8</span>, <span class="number">231</span>, <span class="number">92</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历0~2的数字，逐个访问列表中的元素。设置姓名的最小宽度为五，编号最小长度为3不够补0</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;nameList[index]:<span class="number">5</span>&#125;</span>-<span class="subst">&#123;inList[index]:03&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># Joe   - 008</span></span><br><span class="line"><span class="comment"># Tony  - 231</span></span><br><span class="line"><span class="comment"># Kevin - 092</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> month <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">f&quot;A平台/2019<span class="subst">&#123;month:02&#125;</span>.xlsx&quot;</span>,data_only = <span class="literal">True</span>)</span><br><span class="line">orderSheet = wb[<span class="string">&quot;明细&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个空字典存放本月数据并赋值给变量monthData</span></span><br><span class="line">monthData = &#123;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-2-遍历累加订单销售额"><a href="#5-2-遍历累加订单销售额" class="headerlink" title="5.2 遍历累加订单销售额"></a>5.2 遍历累加订单销售额</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> rowData <span class="keyword">in</span> orderSheet.rows:</span><br><span class="line">    productName = rowData[<span class="number">4</span>].value</span><br></pre></td></tr></table></figure>

<p>每个工作表的第一行数据是表头，需要跳过。我们可以通过判断商品名等于表头“名称”时使用continue语句跳过并继续循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> productName == <span class="string">&quot;名称&quot;</span>:</span><br><span class="line">  <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取总价列的索引</span></span><br><span class="line">priceIndex = openpyxl.utils.cell.column_index_from_string(<span class="string">&quot;F&quot;</span>)-<span class="number">1</span></span><br><span class="line">orderPrice = rowData[priceIndex].value</span><br></pre></td></tr></table></figure>



<h2 id="5-3-字典默认值"><a href="#5-3-字典默认值" class="headerlink" title="5.3 字典默认值"></a>5.3 字典默认值</h2><p>想要安全地访问字典中的键，可以通过字典对象使用&#x3D;&#x3D;get()函数&#x3D;&#x3D;。</p>
<p>字典的get()函数<strong>第一个参数</strong>是要访问的键（key），如果这个键存在于这个字典，函数会返回这个键对应的值；</p>
<p>第二个参数表示当第一个参数指定的键不存在时，函数返回的值。</p>
<p>其中<strong>第二个参数</strong>是可选的，如果没有传第二个参数，当键不存在时，函数会返回None，但不会报KeyError的错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">monthPrice = monthData.get(productName,<span class="number">0</span>)</span><br><span class="line">monthData[productName] = orderPrice + monthPrice</span><br></pre></td></tr></table></figure>

<h1 id="6-将数据写入Excel文档"><a href="#6-将数据写入Excel文档" class="headerlink" title="6. 将数据写入Excel文档"></a>6. 将数据写入Excel文档</h1><h2 id="6-1-Excel添加行数据"><a href="#6-1-Excel添加行数据" class="headerlink" title="6.1 Excel添加行数据"></a>6.1 Excel添加行数据</h2><p>想要添加一整行数据可以通过工作表对象使用&#x3D;&#x3D;append()函数&#x3D;&#x3D;。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> productName <span class="keyword">in</span> monthData.keys():</span><br><span class="line">     <span class="comment"># 按顺序构造行数据元组: 商品名, 月份, 销售额数据</span></span><br><span class="line">    rowData = (productName,<span class="string">f&quot;<span class="subst">&#123;month&#125;</span>月份&quot;</span>,monthData[productName])</span><br><span class="line">    aSheet.append(rowData)</span><br></pre></td></tr></table></figure>



<h1 id="7-函数优化"><a href="#7-函数优化" class="headerlink" title="7. 函数优化"></a>7. 函数优化</h1><p>把整个统计方法写成一个<strong>函数</strong>，然后将每个平台不同的部分当成<strong>参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">processMonthFile</span>(<span class="params">filePath,orderSheetName,nameIndex,nameHead,priceColumn,month,targetSheet</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="comment"># 定义全局变量工作簿名称wb</span></span><br><span class="line">    <span class="keyword">global</span> wb</span><br><span class="line">    <span class="comment"># 定义全局变量工作表名称orderSheet</span></span><br><span class="line">    <span class="keyword">global</span> orderSheet</span><br><span class="line">    <span class="comment"># 使用for循环遍历工作簿对象的worksheets属性</span></span><br><span class="line">    <span class="comment"># 使用load_wordbook函数读取工作簿</span></span><br><span class="line">    wb = openpyxl.load_workbook(filePath, data_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 获取订单工作表</span></span><br><span class="line">    orderSheet = wb[orderSheetName]</span><br><span class="line">    <span class="comment"># 定义一个空字典用来放本月数据 </span></span><br><span class="line">    monthData = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历订单工作表，计算每个商品的总销售额</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> orderSheet.rows:</span><br><span class="line">        <span class="comment"># 获取订单商品名称</span></span><br><span class="line">        productName = row[nameIndex].value</span><br><span class="line">        <span class="comment"># 跳过表头</span></span><br><span class="line">        <span class="keyword">if</span> productName == nameHead:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 获取总价列的索引</span></span><br><span class="line">        priceIndex = openpyxl.utils.cell.column_index_from_string(priceColumn) - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取订单总价</span></span><br><span class="line">        orderPrice = row[priceIndex].value</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取该商品已经计算得出的月份总价，默认为0</span></span><br><span class="line">        monthPrice = monthData.get(productName, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 将这个订单的价格累加到商品总价</span></span><br><span class="line">        monthData[productName] = monthPrice + orderPrice</span><br><span class="line">        <span class="comment"># 遍历本月数据字典的keys，也就是商品名称</span></span><br><span class="line">    <span class="keyword">for</span> productName <span class="keyword">in</span> monthData.keys():</span><br><span class="line">        <span class="comment"># 按顺序构造行数据元组: 商品名, 月份, 销售额数据</span></span><br><span class="line">        rowData = (productName, <span class="string">f&quot;<span class="subst">&#123;month&#125;</span>月份&quot;</span>, monthData[productName])</span><br><span class="line">        <span class="comment"># 使用append()函数添加到A平台的工作表中</span></span><br><span class="line">        targetSheet.append(rowData)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将工作簿保存到路径 /Users/yequ/data/汇总.xlsx</span></span><br><span class="line">newWb.save(<span class="string">&quot;/Users/yequ/data/汇总.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">processMonthFile(<span class="string">f&quot;A平台/2019<span class="subst">&#123;month:<span class="number">02.</span>xlsx&#125;</span>&quot;</span>,<span class="string">&quot;明细&quot;</span>,<span class="number">4</span>,<span class="string">&quot;名称&quot;</span>,<span class="string">&quot;F&quot;</span>,month,aSheet)</span><br><span class="line">processMonthFile(<span class="string">f&quot;B平台/order_2019_<span class="subst">&#123;month&#125;</span>.xlsx&quot;</span>,<span class="string">&quot;订单详情&quot;</span>,<span class="number">1</span>,<span class="string">&quot;商品名称&quot;</span>,<span class="string">&quot;G&quot;</span>,month,bSheet)</span><br><span class="line">processMonthFile(<span class="string">f&quot;C平台/2019年<span class="subst">&#123;month&#125;</span>月销售订单.xlsx&quot;</span>,<span class="string">&quot;销售订单数据&quot;</span>,<span class="number">2</span>,<span class="string">&quot;商品名&quot;</span>,<span class="string">&quot;I&quot;</span>,month,cSheet)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析函数功能介绍</title>
    <url>/posts/f49c8269/</url>
    <content><![CDATA[<h1 id="1-Numpy-Numerical-Python"><a href="#1-Numpy-Numerical-Python" class="headerlink" title="1. Numpy (Numerical Python)"></a>1. Numpy (Numerical Python)</h1><h2 id="1-1-N维数组"><a href="#1-1-N维数组" class="headerlink" title="1.1 N维数组"></a>1.1 N维数组</h2><p>一个多维数组，描述了相同类型数据的集合。</p>
<h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><p>整型（int）、浮点型（float）、布尔型（bool）等。</p>
<p>NumPy数组中的&#x3D;&#x3D;所有元素类型必须是一致的&#x3D;&#x3D;。</p>
<h2 id="1-3-维度"><a href="#1-3-维度" class="headerlink" title="1.3 维度"></a>1.3 维度</h2><p>通常是一维（1D）和二维（2D）数组，可以<strong>通过中括号[ ]的层数来确定</strong></p>
<h2 id="1-4-导入和安装numpy"><a href="#1-4-导入和安装numpy" class="headerlink" title="1.4 导入和安装numpy"></a>1.4 导入和安装numpy</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h2 id="1-5-创建n维数组"><a href="#1-5-创建n维数组" class="headerlink" title="1.5 创建n维数组"></a>1.5 创建n维数组</h2><p>任意序列型对象，也就是列表、元组、数组等数据结构，都可以作为参数传入。</p>
<h3 id="1-5-1-创建一维数组"><a href="#1-5-1-创建一维数组" class="headerlink" title="1.5.1 创建一维数组"></a>1.5.1 创建一维数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">#[1 2 3 4 5 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-创建二维数组"><a href="#1-5-2-创建二维数组" class="headerlink" title="1.5.2 创建二维数组"></a>1.5.2 创建二维数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#将题目中的序列作为参数传入np.array()函数中，并将生成的二维数组赋值给变量arr</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">9</span>],[<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"><span class="comment">#使用print()输出变量arr</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment">#[[ 1  2]</span></span><br><span class="line"> <span class="comment">#[ 4  5]</span></span><br><span class="line"> <span class="comment">#[ 7  9]</span></span><br><span class="line"> <span class="comment">#[11 12]]</span></span><br></pre></td></tr></table></figure>

<h2 id="1-6-N维数组的计算"><a href="#1-6-N维数组的计算" class="headerlink" title="1.6 N维数组的计算"></a>1.6 N维数组的计算</h2><h3 id="1-6-1-数组和数的计算"><a href="#1-6-1-数组和数的计算" class="headerlink" title="1.6.1 数组和数的计算"></a>1.6.1 数组和数的计算</h3><p>在把数组arr和数字2相加时，arr中的每个元素都和2进行了运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">0.2</span>, <span class="number">0.9</span>], [<span class="number">0.5</span>, <span class="number">0.1</span>], [<span class="number">0.1</span>, <span class="number">0.7</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr+<span class="number">2</span>)</span><br><span class="line"><span class="comment">#[[2.2  2.9]</span></span><br><span class="line"> <span class="comment">#[2.5  2.1]</span></span><br><span class="line"> <span class="comment">#[2.1  2.7]]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-2-相同形状数组的计算"><a href="#1-6-2-相同形状数组的计算" class="headerlink" title="1.6.2 相同形状数组的计算"></a>1.6.2 相同形状数组的计算</h3><p>在计算 arrOne-arrTwo 时，arrOne中每个元素都减去了在arrTwo中相对应位置的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arrOne = np.array([[<span class="number">5</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">5</span>]])</span><br><span class="line">arrTwo = np.array([[<span class="number">10</span>, <span class="number">5</span>], [<span class="number">20</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="built_in">print</span>(arrOne + arrTwo)</span><br><span class="line"><span class="comment">#[[15  5]</span></span><br><span class="line"> <span class="comment">#[20 10]]</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="2-Pandas-Series"><a href="#2-Pandas-Series" class="headerlink" title="2. Pandas, Series"></a>2. Pandas, Series</h1><h2 id="2-1-安装和导入Pandas"><a href="#2-1-安装和导入Pandas" class="headerlink" title="2.1 安装和导入Pandas"></a>2.1 安装和导入Pandas</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pandas</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">import</span> pd</span><br></pre></td></tr></table></figure>



<h2 id="2-2-Series"><a href="#2-2-Series" class="headerlink" title="2.2 Series"></a>2.2 Series</h2><p>序列，pandas模块的一种数据类型。</p>
<p>左侧是<strong>索引</strong>(index)，右侧是<strong>值</strong>(values)，下面是值(values)的<strong>数据类型</strong>。</p>
<h3 id="2-2-1-index"><a href="#2-2-1-index" class="headerlink" title="2.2.1 index"></a>2.2.1 index</h3><p>Series的index是可以定义的。</p>
<p>如果没有定义index，index就会默认从0开始生成。</p>
<h2 id="2-3-Series构造函数"><a href="#2-3-Series构造函数" class="headerlink" title="2.3 Series构造函数"></a>2.3 Series构造函数</h2><h3 id="2-3-1-传入列表"><a href="#2-3-1-传入列表" class="headerlink" title="2.3.1 传入列表"></a>2.3.1 传入列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 定义两个列表</span></span><br><span class="line">GDP =[<span class="number">80855</span>, <span class="number">77388</span>, <span class="number">68024</span>, <span class="number">47251</span>, <span class="number">40471</span>]</span><br><span class="line">rank =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 使用Series构造函数，传入参数：列表GDP作为值，列表rank作为index</span></span><br><span class="line"><span class="comment"># 构造出的Series赋值给info</span></span><br><span class="line">info = pd.Series(GDP,index=rank)</span><br><span class="line"><span class="comment"># 输出info这个Series</span></span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"><span class="comment">#1    80855</span></span><br><span class="line"><span class="comment">#2    77388</span></span><br><span class="line"><span class="comment">#3    68024</span></span><br><span class="line"><span class="comment">#4    47251</span></span><br><span class="line"><span class="comment">#5    40471</span></span><br><span class="line"><span class="comment">#dtype: int64</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-2-传入数组"><a href="#2-3-2-传入数组" class="headerlink" title="2.3.2 传入数组"></a>2.3.2 传入数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GDP = np.array([<span class="number">80855</span>,<span class="number">77388</span>,<span class="number">68024</span>,<span class="number">47251</span>,<span class="number">40471</span>])</span><br><span class="line">rank =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># TODO 使用Series构造函数，传入参数：数组GDP作为值，列表rank作为index</span></span><br><span class="line"><span class="comment"># 构造出的Series赋值给info</span></span><br><span class="line">info = pd.Series(GDP,index=rank)</span><br></pre></td></tr></table></figure>



<h3 id="2-3-3-传入常量"><a href="#2-3-3-传入常量" class="headerlink" title="2.3.3 传入常量"></a>2.3.3 传入常量</h3><p>参数data若是常量，则&#x3D;&#x3D;必须提供索引&#x3D;&#x3D;。</p>
<p>此时常量才能按照索引(index)的数量进行重复，并与其一一对应。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series(<span class="number">6</span>,index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>])</span><br></pre></td></tr></table></figure>



<h2 id="2-4-访问Series数据"><a href="#2-4-访问Series数据" class="headerlink" title="2.4 访问Series数据"></a>2.4 访问Series数据</h2><h3 id="2-4-1-位置索引访问"><a href="#2-4-1-位置索引访问" class="headerlink" title="2.4.1 位置索引访问"></a>2.4.1 位置索引访问</h3><p>这种访问方式和列表相同，是基于元素自身的下标来进行访问。</p>
<p>对于一个列表list，﻿list[i]表示list的第i+1个元素。</p>
<h3 id="2-4-2-索引标签访问"><a href="#2-4-2-索引标签访问" class="headerlink" title="2.4.2 索引标签访问"></a>2.4.2 索引标签访问</h3><p>这种访问方式和字典相同，把index中的索引标签当做字典的key，而把Series序列的值当做字典的value。</p>
<h2 id="2-5-Series的3种常用属性"><a href="#2-5-Series的3种常用属性" class="headerlink" title="2.5 Series的3种常用属性"></a>2.5 Series的3种常用属性</h2><h3 id="2-5-1-dtype"><a href="#2-5-1-dtype" class="headerlink" title="2.5.1 dtype"></a>2.5.1 dtype</h3><p>Series对象有多种数据类型：字符串型、整型、浮点型、布尔型。</p>
<p>访问Series对象的的<code>dtype</code>属性，会返回Series对象具体的&#x3D;&#x3D;数据类型&#x3D;&#x3D;。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(info.dtype)</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-values"><a href="#2-5-2-values" class="headerlink" title="2.5.2 values"></a>2.5.2 values</h3><p><code>info.values</code>会以&#x3D;&#x3D;数组&#x3D;&#x3D;的形式返回Series对象中的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(info.values)</span><br><span class="line"><span class="comment">#[80855 77388 68024 47251 40471]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-3-index"><a href="#2-5-3-index" class="headerlink" title="2.5.3 index"></a>2.5.3 index</h3><hr>
<h1 id="3-DataFrame"><a href="#3-DataFrame" class="headerlink" title="3. DataFrame"></a>3. DataFrame</h1><p>DataFrame，中文叫数据框。</p>
<p>是pandas模块最常用的数据类型，是一个二维的矩阵数据表。</p>
<h2 id="3-1-DataFrame的构造函数"><a href="#3-1-DataFrame的构造函数" class="headerlink" title="3.1 DataFrame的构造函数"></a>3.1 DataFrame的构造函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">data= &#123;<span class="string">&#x27;rank&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],<span class="string">&#x27;GDP&#x27;</span>:[<span class="number">80855</span>, <span class="number">77388</span>, <span class="number">68024</span>, <span class="number">47251</span>]&#125;</span><br><span class="line">city= [<span class="string">&#x27;GD&#x27;</span>,<span class="string">&#x27;JS&#x27;</span>,<span class="string">&#x27;SD&#x27;</span>,<span class="string">&#x27;ZJ&#x27;</span>]</span><br><span class="line">df= pd.DataFrame(data, index=city)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#    rank    GDP</span></span><br><span class="line"><span class="comment">#GD     1  80855</span></span><br><span class="line"><span class="comment">#JS     2  77388</span></span><br><span class="line"><span class="comment">#SD     3  68024</span></span><br><span class="line"><span class="comment">#ZJ     4  47251</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-1-传入字典（推荐）"><a href="#3-1-1-传入字典（推荐）" class="headerlink" title="3.1.1 传入字典（推荐）"></a>3.1.1 传入字典（推荐）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: [<span class="string">&#x27;May&#x27;</span>,<span class="string">&#x27;Tony&#x27;</span>,<span class="string">&#x27;Kevin&#x27;</span>], <span class="string">&#x27;score&#x27;</span>:[<span class="number">689</span>,<span class="number">659</span>,<span class="number">635</span>]&#125;</span><br><span class="line">rank = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 使用pd.DataFrame()函数，传入参数：字典data作为value和columns，列表rank作为index</span></span><br><span class="line"><span class="comment"># 构造出的DataFrame赋值给result</span></span><br><span class="line">result = pd.DataFrame(data,index=rank)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#    name  score</span></span><br><span class="line"><span class="comment">#1    May    689</span></span><br><span class="line"><span class="comment">#2   Tony    659</span></span><br><span class="line"><span class="comment">#3  Kevin    635</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-2-传入列表"><a href="#3-1-2-传入列表" class="headerlink" title="3.1.2  传入列表"></a>3.1.2  传入列表</h3><p>参数data传入的是列表时，需要在<code>pd.DataFrame()</code>函数内使用参数&#x3D;&#x3D;columns&#x3D;&#x3D;，用于自定义列索引columns。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">data = [[<span class="string">&#x27;May&#x27;</span>,<span class="number">689</span>],[<span class="string">&#x27;Tony&#x27;</span>,<span class="number">659</span>],[<span class="string">&#x27;Kevin&#x27;</span>,<span class="number">635</span>]]</span><br><span class="line">rank = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># TODO 使用pd.DataFrame()函数，嵌套列表data和列表rank作为参数传入，并且使用参数columns自定义列索引columns：</span></span><br><span class="line"><span class="comment"># 构造出的DataFrame赋值给result</span></span><br><span class="line">result = pd.DataFrame(data,index=rank,columns=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;score&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#    name  score</span></span><br><span class="line"><span class="comment">#1    May    689</span></span><br><span class="line"><span class="comment">#2   Tony    659</span></span><br><span class="line"><span class="comment">#3  Kevin    635</span></span><br></pre></td></tr></table></figure>



<h2 id="3-2-DataFrame的3种常用属性"><a href="#3-2-DataFrame的3种常用属性" class="headerlink" title="3.2 DataFrame的3种常用属性"></a>3.2 DataFrame的3种常用属性</h2><h3 id="3-2-1-dtypes"><a href="#3-2-1-dtypes" class="headerlink" title="3.2.1 dtypes"></a>3.2.1 dtypes</h3><p>访问DataFrame对象的<code>dtypes</code>属性，会返回DataFrame对象每一列的数据类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br><span class="line"><span class="comment">#rank    int64</span></span><br><span class="line"><span class="comment">#GDP     int64</span></span><br><span class="line"><span class="comment">#dtype: object</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-values"><a href="#3-2-2-values" class="headerlink" title="3.2.2 values"></a>3.2.2 values</h3><p>过访问DataFrame对象的<code>values</code>属性，返回了变量df的值values，并将其输出。</p>
<p>根据输出可以看到，以数组的形式返回了变量df的值values。</p>
<p><strong>注意：</strong>DataFrame是二维的数据结构，所以返回二维数组。</p>
<h3 id="3-2-3-index"><a href="#3-2-3-index" class="headerlink" title="3.2.3 index"></a>3.2.3 index</h3><p>获取它的行索引index。</p>
<h3 id="3-2-4-axis"><a href="#3-2-4-axis" class="headerlink" title="3.2.4 axis"></a>3.2.4 axis</h3><p>用来为超过一维的数组定义属性。</p>
<p>二维数组有两个轴，三维数组有三个轴，以此类推。</p>
<p>&#x3D;&#x3D;axis&#x3D;0&#x3D;&#x3D;是&#x3D;&#x3D;垂直&#x3D;&#x3D;方向进行处理</p>
<p>&#x3D;&#x3D;axis&#x3D;1&#x3D;&#x3D;是&#x3D;&#x3D;水平&#x3D;&#x3D;方向进行处理</p>
<hr>
<h1 id="4-文件读取"><a href="#4-文件读取" class="headerlink" title="4. 文件读取"></a>4. 文件读取</h1><h2 id="4-1-读取CSV文件"><a href="#4-1-读取CSV文件" class="headerlink" title="4.1 读取CSV文件"></a>4.1 读取CSV文件</h2><p>CSV（Comma-Separated Values）文件以纯文本的形式储存数字、文本等表格数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/yequ/电商数据清洗.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-1-防止乱码"><a href="#4-1-1-防止乱码" class="headerlink" title="4.1.1 防止乱码"></a>4.1.1 防止乱码</h3><p>将参数encoding设置为&#x3D;&#x3D;”utf-8”&#x3D;&#x3D;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/order.csv&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-指定index"><a href="#4-1-2-指定index" class="headerlink" title="4.1.2 指定index"></a>4.1.2 指定index</h3><p>没有单独定义index，读取出的DataFrame的index默认从<strong>0</strong>开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/yequ/电商数据清洗.csv&quot;</span>,index_col=<span class="string">&quot;order_id&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-3-读取指定列-usecols"><a href="#4-1-3-读取指定列-usecols" class="headerlink" title="4.1.3 读取指定列(usecols)"></a>4.1.3 读取指定列(usecols)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;Users/yequ/电商数据清洗.csv&quot;</span>,usecols=[<span class="string">&quot;payment&quot;</span>,<span class="string">&quot;items_count&quot;</span>])</span><br></pre></td></tr></table></figure>



<h3 id="4-1-4-添加columns"><a href="#4-1-4-添加columns" class="headerlink" title="4.1.4 添加columns"></a>4.1.4 添加columns</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#header=None，表明原数据中没有columns；names，将包含columns的列表传入该参数即可给数据添加columns。</span></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/yequ/order_withoutColumns.csv&quot;</span>,header=<span class="literal">None</span>,names=[<span class="string">&quot;订单号&quot;</span>,<span class="string">&quot;用户id&quot;</span>,<span class="string">&quot;支付金额&quot;</span>,<span class="string">&quot;商品价格&quot;</span>,<span class="string">&quot;购买数量&quot;</span>,<span class="string">&quot;支付时间&quot;</span>])</span><br></pre></td></tr></table></figure>



<h2 id="4-3-保存-CSV文件"><a href="#4-3-保存-CSV文件" class="headerlink" title="4.3 保存 CSV文件"></a>4.3 保存 CSV文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index=False可以防止将索引写入第一列</span></span><br><span class="line">data.to_csv(<span class="string">&quot;/Users/yequ/电商数据清洗2.csv&quot;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-3-1-防止写入时乱码"><a href="#4-3-1-防止写入时乱码" class="headerlink" title="4.3.1 防止写入时乱码"></a>4.3.1 防止写入时乱码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.to_csv(<span class="string">&quot;/Users/yequ/电商数据清洗2.csv&quot;</span>,encoding=<span class="string">&quot;utf-8-sig&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="4-4-读取Excel文件"><a href="#4-4-读取Excel文件" class="headerlink" title="4.4 读取Excel文件"></a>4.4 读取Excel文件</h2><h3 id="4-4-1-安装模块"><a href="#4-4-1-安装模块" class="headerlink" title="4.4.1 安装模块"></a>4.4.1 安装模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure>

<h3 id="4-4-2-读取文件-pd-read-excel"><a href="#4-4-2-读取文件-pd-read-excel" class="headerlink" title="4.4.2 读取文件(pd.read_excel())"></a>4.4.2 读取文件(pd.read_excel())</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sheet_name，将要读取的工作表名称作为字符串传入该参数</span></span><br><span class="line">data = pd.read_excel(<span class="string">&quot;/Users/yequ/2019年4月销售订单.xlsx&quot;</span>,sheet_name=<span class="string">&quot;销售订单数据&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="5-索引和数据筛选"><a href="#5-索引和数据筛选" class="headerlink" title="5. 索引和数据筛选"></a>5. 索引和数据筛选</h1><h2 id="5-1-列索引"><a href="#5-1-列索引" class="headerlink" title="5.1 列索引"></a>5.1 列索引</h2><h3 id="5-1-1-访问一列数据-（data-“columns”-）"><a href="#5-1-1-访问一列数据-（data-“columns”-）" class="headerlink" title="5.1.1 访问一列数据 （data[“columns”]）"></a>5.1.1 访问一列数据 （data[“columns”]）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#依次输出 &quot;payment&quot; 、 &quot;price&quot; 和 &quot;cutdown_price&quot; 这3列数据的代码</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;payment&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;price&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;cutdown_price&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="5-1-2-访问多列数据"><a href="#5-1-2-访问多列数据" class="headerlink" title="5.1.2 访问多列数据"></a>5.1.2 访问多列数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data[[<span class="string">&quot;payment&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;cutdown_price&quot;</span>]])</span><br></pre></td></tr></table></figure>

<p>第一个中括号，也就是最外面的中括号，表示对变量data进行索引。</p>
<p>第二个中括号，也就是最里面的中括号，是一个列表，代表有多列数据。</p>
<h2 id="5-2-行索引"><a href="#5-2-行索引" class="headerlink" title="5.2 行索引"></a>5.2 行索引</h2><h3 id="5-2-1-访问某一行-（-loc-index的值-）"><a href="#5-2-1-访问某一行-（-loc-index的值-）" class="headerlink" title="5.2.1 访问某一行 （.loc[index的值]）"></a>5.2.1 访问某一行 （.loc[index的值]）</h3><p>指定”order_id”列为index，然后访问订单号 3515712 这一行数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/yequ/电商数据清洗.csv&quot;</span>, index_col=<span class="string">&quot;order_id&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">3515712</span>])</span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-访问连续的几行-（-loc-起点index的值-结束index的值-）"><a href="#5-2-2-访问连续的几行-（-loc-起点index的值-结束index的值-）" class="headerlink" title="5.2.2 访问连续的几行 （.loc[起点index的值:结束index的值]）"></a>5.2.2 访问连续的几行 （.loc[起点index的值:结束index的值]）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用print()和.loc属性输出订单号3515712到3515716的数据</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">3515712</span>:<span class="number">3515716</span>])</span><br></pre></td></tr></table></figure>

<h3 id="5-2-3-访问不连续的几行-（-loc-第一个index的值-第二个index的值-…-）"><a href="#5-2-3-访问不连续的几行-（-loc-第一个index的值-第二个index的值-…-）" class="headerlink" title="5.2.3 访问不连续的几行 （.loc[[第一个index的值,第二个index的值,…]]）"></a>5.2.3 访问不连续的几行 （.loc[[第一个index的值,第二个index的值,…]]）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用print()和.loc属性输出data变量里订单号为 3515714 、3601839 和 3601842 的行数据</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[[<span class="number">3515714</span>,<span class="number">3601839</span>,<span class="number">3601842</span>]])</span><br></pre></td></tr></table></figure>



<h2 id="5-3-访问元素"><a href="#5-3-访问元素" class="headerlink" title="5.3 访问元素"></a>5.3 访问元素</h2><h3 id="5-3-1-访问单个元素-（data-loc-index的值，columns的值-）"><a href="#5-3-1-访问单个元素-（data-loc-index的值，columns的值-）" class="headerlink" title="5.3.1 访问单个元素 （data.loc[index的值，columns的值]）"></a>5.3.1 访问单个元素 （data.loc[index的值，columns的值]）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出了&quot;user_id&quot;是51065856这一行对应的&quot;price&quot;列对应的数据。</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">51065856</span>,<span class="string">&quot;price&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="5-3-2-访问多个元素"><a href="#5-3-2-访问多个元素" class="headerlink" title="5.3.2 访问多个元素"></a>5.3.2 访问多个元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问了index从3515712到3515714，columns从&quot;payment&quot;到&quot;items_count&quot;的多个元素。</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">3515712</span>:<span class="number">3515714</span>,<span class="string">&quot;payment&quot;</span>:<span class="string">&quot;items_count&quot;</span>])</span><br></pre></td></tr></table></figure>



<h2 id="5-4-按照行位置访问行数据"><a href="#5-4-按照行位置访问行数据" class="headerlink" title="5.4 按照行位置访问行数据"></a>5.4 按照行位置访问行数据</h2><h3 id="5-4-1-访问某一行-iloc-index的位置"><a href="#5-4-1-访问某一行-iloc-index的位置" class="headerlink" title="5.4.1 访问某一行 (.iloc[index的位置])"></a>5.4.1 访问某一行 (.iloc[index的位置])</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data.iloc[<span class="number">3</span>])</span><br><span class="line"><span class="comment">#id                           4</span></span><br><span class="line"><span class="comment">#order_id               3515715</span></span><br><span class="line"><span class="comment">#user_id               46519215</span></span><br><span class="line"><span class="comment">#payment                   8500</span></span><br><span class="line"><span class="comment">#price                     8500</span></span><br><span class="line"><span class="comment">#items_count                  4</span></span><br><span class="line"><span class="comment">#cutdown_price                0</span></span><br><span class="line"><span class="comment">#post_fee                     0</span></span><br><span class="line"><span class="comment">#pay_type                   202</span></span><br><span class="line"><span class="comment">#create_time      2018/2/1 0:05</span></span><br><span class="line"><span class="comment">#pay_time         2018/2/1 0:05</span></span><br><span class="line"><span class="comment">#Name: 3, dtype: object</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-2-访问连续的某几行-iloc-index起点位置-index结束位置"><a href="#5-4-2-访问连续的某几行-iloc-index起点位置-index结束位置" class="headerlink" title="5.4.2 访问连续的某几行 (.iloc[index起点位置:index结束位置])"></a>5.4.2 访问连续的某几行 (.iloc[index起点位置:index结束位置])</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data.iloc[<span class="number">0</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<p>使用<code>.iloc</code>属性的切片，&#x3D;&#x3D;不包含结束&#x3D;&#x3D;index的值。</p>
<h3 id="5-4-3-访问不连续的某几行-iloc-index1的位置-index2的位置-…"><a href="#5-4-3-访问不连续的某几行-iloc-index1的位置-index2的位置-…" class="headerlink" title="5.4.3 访问不连续的某几行 (.iloc[[index1的位置,index2的位置,…]])"></a>5.4.3 访问不连续的某几行 (.iloc[[index1的位置,index2的位置,…]])</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data.iloc[[<span class="number">1</span>,<span class="number">144</span>,<span class="number">275</span>]])</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="6-布尔索引"><a href="#6-布尔索引" class="headerlink" title="6. 布尔索引"></a>6. 布尔索引</h1><p>寻找满足或不满足特定计算或条件的值。</p>
<h2 id="6-1-布尔索引：一个判断条件"><a href="#6-1-布尔索引：一个判断条件" class="headerlink" title="6.1 布尔索引：一个判断条件"></a>6.1 布尔索引：一个判断条件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;cutdown_price&quot;</span>]&gt;<span class="number">0</span>)</span><br><span class="line"><span class="comment">#0        False</span></span><br><span class="line"><span class="comment">#1        False</span></span><br><span class="line"><span class="comment">#2        False</span></span><br><span class="line"><span class="comment">#3        False</span></span><br><span class="line"><span class="comment">#4        False</span></span><br><span class="line"><span class="comment">#         ...  </span></span><br><span class="line"><span class="comment">#85647     True</span></span><br><span class="line"><span class="comment">#85648    False</span></span><br><span class="line"><span class="comment">#85649    False</span></span><br><span class="line"><span class="comment">#85650    False</span></span><br><span class="line"><span class="comment">#85651    False</span></span><br><span class="line"><span class="comment">#Name: cutdown_price, Length: 85652, dtype: bool</span></span><br></pre></td></tr></table></figure>

<p>布尔索引会把判断结果为True的行数据直接返回，从而达到筛选数据的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data[data[<span class="string">&quot;cutdown_price&quot;</span>]&gt;<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>返回的DataFrame就是data变量里，所有”cutdown_price”这一列值里大于0的行数据。</p>
<h2 id="6-2-布尔索引：多个判断条件"><a href="#6-2-布尔索引：多个判断条件" class="headerlink" title="6.2 布尔索引：多个判断条件"></a>6.2 布尔索引：多个判断条件</h2><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&#x3D;&#x3D;&amp;&#x3D;&#x3D;表示并且</p>
<p>&#x3D;&#x3D;｜&#x3D;&#x3D;表示或者</p>
<p>&#x3D;&#x3D;～&#x3D;&#x3D;表示非</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span>&amp;<span class="literal">False</span>) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span>|<span class="literal">False</span>) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="literal">True</span>) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>

<h3 id="多个判断条件"><a href="#多个判断条件" class="headerlink" title="多个判断条件"></a>多个判断条件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data[(data[<span class="string">&quot;cutdown_price&quot;</span>]&gt;<span class="number">0</span>) &amp; (data[<span class="string">&quot;post_fee&quot;</span>]&gt;<span class="number">0</span>)])</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意&#x3D;&#x3D;：当有多个判断条件时，每一个判断条件都需要用&#x3D;&#x3D;小括号( )&#x3D;&#x3D;括起来。</p>
<hr>
<h1 id="7-格式转换和时间类型"><a href="#7-格式转换和时间类型" class="headerlink" title="7. 格式转换和时间类型"></a>7. 格式转换和时间类型</h1><h2 id="7-1-时间类型"><a href="#7-1-时间类型" class="headerlink" title="7.1 时间类型"></a>7.1 时间类型</h2><h3 id="7-1-1-datetime"><a href="#7-1-1-datetime" class="headerlink" title="7.1.1 datetime"></a>7.1.1 datetime</h3><p><code>datetime()</code>函数内，需要按照年、月、日、时、分、秒依次传入数字，组成一个时间。至少需要传入年、月、日的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start = datetime(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span><br><span class="line">end = datetime(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(start)</span><br><span class="line"><span class="built_in">print</span>(end)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(start))</span><br><span class="line"><span class="comment"># 2020-05-01 23:59:59</span></span><br><span class="line"><span class="comment"># 2020-10-01 00:00:00</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-1-2-timedelta"><a href="#7-1-2-timedelta" class="headerlink" title="7.1.2 timedelta"></a>7.1.2 timedelta</h3><p>start和end均为时间类型数据，因此可以&#x3D;&#x3D;直接进行运算&#x3D;&#x3D;，将结果赋值给timeSpan,其时间类型为&#x3D;&#x3D;timedelta&#x3D;&#x3D;表示时间间隔。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timeSpan = end - start</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(timeSpan)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(timeSpan))</span><br><span class="line"><span class="comment"># 152 days, 0:00:01</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;datetime.timedelta&#x27;&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-1-3-period"><a href="#7-1-3-period" class="headerlink" title="7.1.3 period"></a>7.1.3 period</h3><p>表达的是一个时间段。</p>
<p>“period”的实际应用比较少，而且通常用后续学习的时间转字符函数代替</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="7-2-字符串转时间-（to-datetime"><a href="#7-2-字符串转时间-（to-datetime" class="headerlink" title="7.2 字符串转时间 （to_datetime())"></a>7.2 字符串转时间 （to_datetime())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df= pd.read_csv(<span class="string">&quot;/Users/time/电商数据.csv&quot;</span>, usecols=[<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用to_datetime()函数，将create_time和pay _time转化成时间格式</span></span><br><span class="line">df[<span class="string">&quot;create_time&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;create_time&quot;</span>])</span><br><span class="line">df[<span class="string">&quot;pay_time&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;pay_time&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="7-2-1-只获取年月日"><a href="#7-2-1-只获取年月日" class="headerlink" title="7.2.1 只获取年月日"></a>7.2.1 只获取年月日</h3><p>通过后缀<code>.dt</code>可以把时间类型的数据转成一种方便我们提取日期或时间的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&quot;pay_time&quot;</span>].dt.year</span><br><span class="line"><span class="comment"># 只获取&quot;pay_time&quot;的年的数据信息</span></span><br><span class="line">df[<span class="string">&quot;pay_time&quot;</span>].dt.month</span><br><span class="line"><span class="comment"># 获取这列数据的月</span></span><br><span class="line">df[<span class="string">&quot;pay_time&quot;</span>].dt.day</span><br><span class="line"><span class="comment"># 获取这列数据的日</span></span><br></pre></td></tr></table></figure>



<h2 id="7-3-时间转字符串-strftime"><a href="#7-3-时间转字符串-strftime" class="headerlink" title="7.3 时间转字符串 (.strftime())"></a>7.3 时间转字符串 (.strftime())</h2><p><strong>datetime类型的数据要先通过后缀<code>.dt</code>转化</strong>。</p>
<p><strong>“%Y-%m”表示转为”年-月”</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&quot;create_time&quot;</span>] = df[<span class="string">&quot;create_time&quot;</span>].dt.strftime(<span class="string">&quot;%Y-%m&quot;</span>)</span><br><span class="line">df[<span class="string">&quot;pay_time&quot;</span>] = df[<span class="string">&quot;pay_time&quot;</span>].dt.strftime(<span class="string">&quot;%Y-%m&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;%Y&#x3D;&#x3D;代表年</p>
<p>&#x3D;&#x3D;%m&#x3D;&#x3D;代表月</p>
<p>&#x3D;&#x3D;%d&#x3D;&#x3D;代表日</p>
<p><code>%Y-%m-%d</code>，就是2018-01-31。</p>
<p><code>%Y年%m月</code>，就是2018年01月。</p>
<p>&#x3D;&#x3D;注意⚠️&#x3D;&#x3D;：%m代表月，%M代表分钟</p>
<h2 id="7-4-格式转换函数-astype"><a href="#7-4-格式转换函数-astype" class="headerlink" title="7.4 格式转换函数 (astype())"></a>7.4 格式转换函数 (astype())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&quot;b&quot;</span>] = df[<span class="string">&quot;b&quot;</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># 将b这一列的数据，从整型(int)转化为浮点型(float)。</span></span><br><span class="line">df[<span class="string">&quot;phone_number&quot;</span>] = df[<span class="string">&quot;phone_number&quot;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 转换为字符串</span></span><br><span class="line">.astype(<span class="built_in">int</span>) <span class="comment"># 仅有当数据是整数数字时，才能使用.astype(int)函数，否则将会报错。</span></span><br><span class="line">.astype(<span class="built_in">float</span>)</span><br><span class="line">.astype(<span class="built_in">bool</span>) <span class="comment"># 如果数据是整型0、浮点型0.0，则会转化为布尔值False；如果数据是非0，则会转化为布尔值True。</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="8-统计函数"><a href="#8-统计函数" class="headerlink" title="8. 统计函数"></a>8. 统计函数</h1><h2 id="8-1-单列统计"><a href="#8-1-单列统计" class="headerlink" title="8.1 单列统计"></a>8.1 单列统计</h2><h2 id="求均值"><a href="#求均值" class="headerlink" title="求均值"></a>求均值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pay_mean = data[<span class="string">&quot;payment&quot;</span>].mean()</span><br></pre></td></tr></table></figure>

<h2 id="取整-round"><a href="#取整-round" class="headerlink" title="取整 (.round())"></a>取整 (.round())</h2><p><code>.round(n)</code>有&#x3D;&#x3D;三种情况&#x3D;&#x3D;：</p>
<p>n为正，表示保留小数点后n位小数；</p>
<p>n为0，取整（保留到个位数）；</p>
<p>n为负，<code>-1,-2……</code>依次表示保留到十位数，百位数……</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pay_mean)</span><br><span class="line"><span class="comment">#对pay_mean进行四舍五入，并输出</span></span><br><span class="line"><span class="built_in">print</span>(pay_mean.<span class="built_in">round</span>())</span><br><span class="line"><span class="comment"># 7080.435541493485</span></span><br><span class="line"><span class="comment"># 7080.0</span></span><br></pre></td></tr></table></figure>



<h2 id="8-2-多列统计"><a href="#8-2-多列统计" class="headerlink" title="8.2 多列统计"></a>8.2 多列统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(data[[<span class="string">&quot;payment&quot;</span>,<span class="string">&quot;price&quot;</span>,<span class="string">&quot;cutdown_price&quot;</span>]].mean())</span><br><span class="line"><span class="comment"># payment          7080.435541</span></span><br><span class="line"><span class="comment"># price            7189.678431</span></span><br><span class="line"><span class="comment"># cutdown_price     260.436090</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="实战一：美食测评排行"><a href="#实战一：美食测评排行" class="headerlink" title="实战一：美食测评排行"></a>实战一：美食测评排行</h1><h2 id="1-1-读取DataFrame的前五行"><a href="#1-1-读取DataFrame的前五行" class="headerlink" title="1.1 读取DataFrame的前五行"></a>1.1 读取DataFrame的前五行</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">top_5 = df.head()</span><br><span class="line">top_10 = df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;注意&#x3D;&#x3D;⚠️：如果<code>head()</code>函数中不添加参数，则<strong>默认读取前5行</strong>，添加参数则读取指定行数。</p>
<h2 id="1-2-读取末尾数据"><a href="#1-2-读取末尾数据" class="headerlink" title="1.2 读取末尾数据"></a>1.2 读取末尾数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = df.tail()</span><br><span class="line">result = df.tail(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="1-3-字符串筛选函数"><a href="#1-3-字符串筛选函数" class="headerlink" title="1.3 字符串筛选函数"></a>1.3 字符串筛选函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fishpot = df[df[<span class="string">&quot;店铺名称&quot;</span>].<span class="built_in">str</span>.contains(<span class="string">&quot;鱼&quot;</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="1-4-设置索引"><a href="#1-4-设置索引" class="headerlink" title="1.4 设置索引"></a>1.4 设置索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将店铺名称设置为行索引，将新的Dataframe赋值给变量fishpot2</span></span><br><span class="line">fishpot2 = fishpot.set_index(<span class="string">&quot;店铺名称&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="1-5-获取最大值的索引-（idxmax-）"><a href="#1-5-获取最大值的索引-（idxmax-）" class="headerlink" title="1.5 获取最大值的索引 （idxmax()）"></a>1.5 获取最大值的索引 （idxmax()）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasteBest = fishpot2[<span class="string">&quot;口味评分&quot;</span>].idxmax()</span><br></pre></td></tr></table></figure>

<h2 id="1-6-重置索引"><a href="#1-6-重置索引" class="headerlink" title="1.6 重置索引"></a>1.6 重置索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fishpot3 = fishpot2.reset_index()</span><br></pre></td></tr></table></figure>

<h2 id="1-7-明确算法"><a href="#1-7-明确算法" class="headerlink" title="1.7 明确算法"></a>1.7 明确算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算性价比评分，并将结果赋值给变量cp_ratio</span></span><br><span class="line">cp_ratio = (df[<span class="string">&quot;口味评分&quot;</span>]/df[<span class="string">&quot;人均消费&quot;</span>])*<span class="number">40</span></span><br><span class="line"><span class="comment"># 计算氛围评分，并将结果赋值给变量atmosphere</span></span><br><span class="line">atmosphere = (df[<span class="string">&quot;服务评分&quot;</span>]+df[<span class="string">&quot;环境评分&quot;</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="1-8-添加新列"><a href="#1-8-添加新列" class="headerlink" title="1.8 添加新列"></a>1.8 添加新列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算性价比评分，通过赋值，将结果添加为df的&quot;性价比评分&quot;列</span></span><br><span class="line">df[<span class="string">&quot;性价比评分&quot;</span>] = (df[<span class="string">&quot;口味评分&quot;</span>]/df[<span class="string">&quot;人均消费&quot;</span>])*<span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算氛围评分，通过赋值，将结果添加为df的&quot;氛围评分&quot;列</span></span><br><span class="line">df[<span class="string">&quot;氛围评分&quot;</span>] = (df[<span class="string">&quot;服务评分&quot;</span>]+df[<span class="string">&quot;环境评分&quot;</span>])/<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>添加新列的&#x3D;&#x3D;格式&#x3D;&#x3D;：<code>df[&quot;新列名&quot;] = new_value</code></p>
<h2 id="1-9-数据排序-（sort-values-）"><a href="#1-9-数据排序-（sort-values-）" class="headerlink" title="1.9 数据排序 （sort_values()）"></a>1.9 数据排序 （sort_values()）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用sort_values()对df的&quot;性价比评分&quot;列进行降序排序，并赋值给df_1</span></span><br><span class="line">df_1 = df.sort_values(by=<span class="string">&quot;性价比评分&quot;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 使用sort_values()对df的&quot;氛围评分&quot;列进行降序排序，并赋值给df_2 </span></span><br><span class="line">df_2 = df.sort_values(by=<span class="string">&quot;氛围评分&quot;</span>,ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="9-数据清洗"><a href="#9-数据清洗" class="headerlink" title="9. 数据清洗"></a>9. 数据清洗</h1><h2 id="9-1-脏数据"><a href="#9-1-脏数据" class="headerlink" title="9.1 脏数据"></a>9.1 脏数据</h2><p>由于记录或者储存的原因，导致部分数据<strong>缺失、重复、异常、错误，没有分析意义</strong>，就叫做“脏数据”。</p>
<p><strong>缺失值</strong>：在应该有数据的地方，出现了空白。缺失值在一个DataFrame中，会被标记为NaN或者null。</p>
<p><strong>异常值</strong>：1.在应该全是正数的数据中，出现了负数。2.在应该全是非零值的数据中，出现了0。3.出现了不可能出现的数值等等。</p>
<p><strong>重复值</strong>：在不该重复的地方，出现了异常的重复。</p>
<h2 id="9-2-清洗流程"><a href="#9-2-清洗流程" class="headerlink" title="9.2 清洗流程"></a>9.2 清洗流程</h2><p>Step1.识别并处理缺失值<br>Step2.识别并处理异常值<br>Step3.识别并处理重复值</p>
<h2 id="9-3-快速浏览数据集-（info-）"><a href="#9-3-快速浏览数据集-（info-）" class="headerlink" title="9.3 快速浏览数据集 （info()）"></a>9.3 快速浏览数据集 （info()）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;<code>info()</code>函数会直接将结果输出出来，因此我们不需要用print。&#x3D;&#x3D;</p>
<h2 id="9-4-判断缺失值"><a href="#9-4-判断缺失值" class="headerlink" title="9.4 判断缺失值"></a>9.4 判断缺失值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;platform&#x27;</span>].isnull())</span><br></pre></td></tr></table></figure>

<p><code>isnull()</code>函数会对每一个数据是否为缺失值进行判断。&#x3D;&#x3D;缺失值返回为True，不是缺失值返回为False。&#x3D;&#x3D;</p>
<h2 id="9-5-删除指定行-drop"><a href="#9-5-删除指定行-drop" class="headerlink" title="9.5 删除指定行 (drop())"></a>9.5 删除指定行 (drop())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dfPayNull就是，包含所有payment_provider这一列缺失值的行</span></span><br><span class="line">dfPayNull = df[df[<span class="string">&quot;payment_provider&quot;</span>].isnull()]</span><br><span class="line">df.drop(index=dfPayNull.index, inplace =<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>



<h2 id="9-6-填充缺失值-fillna"><a href="#9-6-填充缺失值-fillna" class="headerlink" title="9.6 填充缺失值 (fillna())"></a>9.6 填充缺失值 (fillna())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;payment_provider&#x27;</span>].fillna(<span class="string">&quot;wxpay&quot;</span>,inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>



<h2 id="9-7-判断是否存在-isin"><a href="#9-7-判断是否存在-isin" class="headerlink" title="9.7 判断是否存在 (isin())"></a>9.7 判断是否存在 (isin())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;price&quot;</span>].isin([<span class="number">25.00</span>,<span class="number">68.00</span>,<span class="number">248.00</span>]))</span><br></pre></td></tr></table></figure>



<h2 id="9-8-取反筛选异常值"><a href="#9-8-取反筛选异常值" class="headerlink" title="9.8 取反筛选异常值 (~)"></a>9.8 取反筛选异常值 (~)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(~df[<span class="string">&quot;price&quot;</span>].isin([<span class="number">25.00</span>,<span class="number">68.00</span>,<span class="number">248.00</span>]))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用布尔索引、isin()函数、~运算符，将price这一列不是25.00，68.00，248.00的异常值筛选出来，赋值给变量dfWrongPrice</span></span><br><span class="line">dfWrongPrice = df[~df[<span class="string">&quot;price&quot;</span>].isin([<span class="number">25.00</span>,<span class="number">68.00</span>,<span class="number">248.00</span>])]</span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="9-9-判断是否重复-duplicated"><a href="#9-9-判断是否重复-duplicated" class="headerlink" title="9.9 判断是否重复 (duplicated())"></a>9.9 判断是否重复 (duplicated())</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;order_id&quot;</span>].duplicated())</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="10-数据可视化"><a href="#10-数据可视化" class="headerlink" title="10. 数据可视化"></a>10. 数据可视化</h1><h2 id="10-1-可视化图表类型"><a href="#10-1-可视化图表类型" class="headerlink" title="10.1 可视化图表类型"></a>10.1 可视化图表类型</h2><h3 id="1-趋势"><a href="#1-趋势" class="headerlink" title="1. 趋势"></a>1. 趋势</h3><p>该类型用于表示数据是如何随着时间而发生变化。通常，我们会通过<strong>折线图</strong>或<strong>柱状图</strong>进行展示。</p>
<h3 id="2-分布"><a href="#2-分布" class="headerlink" title="2. 分布"></a>2. 分布</h3><p>当关心数据的分布规律时，常会用<strong>散点图</strong>来展示不同分布特征。</p>
<h3 id="3-构成"><a href="#3-构成" class="headerlink" title="3. 构成"></a>3. 构成</h3><p>该类型用于表示数据中每个部分占总体的比例，一般情况下用饼图展示。如果想要显示一段时间内的占比情况，则更适合用<strong>百分比堆积柱状图</strong>进行展示。</p>
<h3 id="4-比较"><a href="#4-比较" class="headerlink" title="4. 比较"></a>4. 比较</h3><p>该类型用于数据在某维度上的比较，通常会通过<strong>簇形柱状图</strong>和<strong>并列子图</strong>来反映对比数据间的关系。</p>
<h3 id="5-联系"><a href="#5-联系" class="headerlink" title="5. 联系"></a>5. 联系</h3><p>该类型主要用于衡量两种维度数据之间的关系，使用<strong>双y轴叠加图</strong>来展示。</p>
<h2 id="10-2-matplotlib图像的构成"><a href="#10-2-matplotlib图像的构成" class="headerlink" title="10.2 matplotlib图像的构成"></a>10.2 matplotlib图像的构成</h2><p>matplotlib图表的组成元素包括：&#x3D;&#x3D;画布&#x3D;&#x3D;（Figure）、&#x3D;&#x3D;坐标图形&#x3D;&#x3D;（Axes）、&#x3D;&#x3D;图像标题&#x3D;&#x3D;（Title）等</p>
<h2 id="10-3-matplotlib模块的安装和导入"><a href="#10-3-matplotlib模块的安装和导入" class="headerlink" title="10.3 matplotlib模块的安装和导入"></a>10.3 matplotlib模块的安装和导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>



<h2 id="10-4-设置中文字体"><a href="#10-4-设置中文字体" class="headerlink" title="10.4 设置中文字体"></a>10.4 设置中文字体</h2><p>在本地运行时，如果是Windows系统，可以把字体设置成 <strong>SimHei</strong> ；</p>
<p>如果是macOS系统，可以把字体设置为 <strong>Arial Unicode MS</strong> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = <span class="string">&quot;Arial Unicode MS&quot;</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = <span class="string">&quot;SimSun&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="10-4-创建画布"><a href="#10-4-创建画布" class="headerlink" title="10.4 创建画布"></a>10.4 创建画布</h2><p>figure()函数的常用参数有（均为非必选参数）：</p>
<p>&#x3D;&#x3D;figsize&#x3D;&#x3D;:指定figure的宽和高，单位为英寸；</p>
<p>&#x3D;&#x3D;facecolor&#x3D;&#x3D;:背景颜色</p>
<p>&#x3D;&#x3D;edgecolor&#x3D;&#x3D;:边框颜色</p>
<p>&#x3D;&#x3D;frameon&#x3D;&#x3D;:是否显示边框</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">4</span>,<span class="number">3</span>),facecolor=<span class="string">&#x27;blue&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="10-5-展示图像"><a href="#10-5-展示图像" class="headerlink" title="10.5 展示图像"></a>10.5 展示图像</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h2 id="10-6-绘制折线图-plt-plot"><a href="#10-6-绘制折线图-plt-plot" class="headerlink" title="10.6 绘制折线图 (plt.plot())"></a>10.6 绘制折线图 (plt.plot())</h2><p>折线图强调数据随时间的变化规律或者趋势，非常适用于展示在相等时间间隔下数据的趋势。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;/Users/yequ/书店每月销量数据.csv&quot;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = <span class="string">&quot;Arial Unicode MS&quot;</span></span><br><span class="line">plt.plot(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;sum&quot;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h3 id="10-6-1-设置颜色-color参数"><a href="#10-6-1-设置颜色-color参数" class="headerlink" title="10.6.1 设置颜色(color参数)"></a>10.6.1 设置颜色(color参数)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将折线图设置成橙色</span></span><br><span class="line">plt.plot(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;sum&quot;</span>],color=<span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="10-6-2-设置折线图标记-marker参数"><a href="#10-6-2-设置折线图标记-marker参数" class="headerlink" title="10.6.2 设置折线图标记(marker参数)"></a>10.6.2 设置折线图标记(marker参数)</h3><p>为了让每个数据点在图像上更加明显，可以在调用<code>plt.plot()</code>函数时传入<code>marker</code>参数。</p>
<p>把&#x3D;&#x3D;”o”&#x3D;&#x3D;作为参数值传入，折线图上便增加了对应的&#x3D;&#x3D;圆点标记&#x3D;&#x3D;。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;sum&quot;</span>],color=<span class="string">&quot;orange&quot;</span>,marker=<span class="string">&quot;o&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="10-6-3-添加并显示图例说明-label-plt-legend"><a href="#10-6-3-添加并显示图例说明-label-plt-legend" class="headerlink" title="10.6.3 添加并显示图例说明(label, plt.legend())"></a>10.6.3 添加并显示图例说明(label, plt.legend())</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;sum&quot;</span>],color=<span class="string">&quot;orange&quot;</span>,marker=<span class="string">&quot;o&quot;</span>,label=<span class="string">&quot;每月总销量&quot;</span>)</span><br><span class="line"><span class="comment"># 使用plt.legend()函数显示图例</span></span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure>



<h3 id="10-6-4-添加坐标轴标题和添加图像标题-plt-xlabel-ylabel-title"><a href="#10-6-4-添加坐标轴标题和添加图像标题-plt-xlabel-ylabel-title" class="headerlink" title="10.6.4 添加坐标轴标题和添加图像标题(plt.xlabel()&#x2F;ylabel()&#x2F;title())"></a>10.6.4 添加坐标轴标题和添加图像标题(plt.xlabel()&#x2F;ylabel()&#x2F;title())</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用plt.xlabel()函数，将x轴标题设置为&quot;月份&quot;</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;月份&quot;</span>)</span><br><span class="line"><span class="comment"># 使用plt.ylabel()函数，将y轴标题设置为&quot;销量&quot;</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;销量&quot;</span>)</span><br><span class="line"><span class="comment"># 使用plt.title()函数，将图表标题设置为&quot;2019年8月至2020年7月书店每月销量走势&quot;</span></span><br><span class="line">plt.title(<span class="string">&quot;2019年8月至2020年7月书店每月销量走势&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="10-7-绘制柱状图-plt-bar"><a href="#10-7-绘制柱状图-plt-bar" class="headerlink" title="10.7 绘制柱状图(plt.bar())"></a>10.7 绘制柱状图(plt.bar())</h2><p>柱状图用于展示一段时间内的数据变化或展示各项数据之间的比较情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.bar(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;sum&quot;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="10-7-1-设置宽度和颜色"><a href="#10-7-1-设置宽度和颜色" class="headerlink" title="10.7.1 设置宽度和颜色"></a>10.7.1 设置宽度和颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.bar(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;sum&quot;</span>],width=<span class="number">0.6</span>,color=<span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="10-8-绘制散点图-plt-scatter"><a href="#10-8-绘制散点图-plt-scatter" class="headerlink" title="10.8 绘制散点图 (plt.scatter())"></a>10.8 绘制散点图 (plt.scatter())</h2><p>散点图是比较常见的图表类型之一，通常用于显示两个数据间的关联和比较数值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(data[<span class="string">&quot;ads_fee&quot;</span>],data[<span class="string">&quot;sales&quot;</span>],color=<span class="string">&quot;green&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="10-9-绘制双y轴叠加图"><a href="#10-9-绘制双y轴叠加图" class="headerlink" title="10.9 绘制双y轴叠加图"></a>10.9 绘制双y轴叠加图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制曝光量的柱状图</span></span><br><span class="line">plt.bar(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;exposure&quot;</span>])</span><br><span class="line"><span class="comment"># 使用plt.twinx()函数，添加另一个y轴</span></span><br><span class="line">plt.twinx()</span><br><span class="line"><span class="comment"># 绘制转化率的折线图</span></span><br><span class="line">plt.plot(data[<span class="string">&quot;month&quot;</span>],data[<span class="string">&quot;CVR&quot;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h3 id="10-9-1-调整图例位置"><a href="#10-9-1-调整图例位置" class="headerlink" title="10.9.1 调整图例位置"></a>10.9.1 调整图例位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现照片信息的读取与分类</title>
    <url>/posts/6caeb71/</url>
    <content><![CDATA[<h2 id="1-获取待整理文件列表"><a href="#1-获取待整理文件列表" class="headerlink" title="1. 获取待整理文件列表"></a>1. 获取待整理文件列表</h2><h3 id="1-1-绝对路径"><a href="#1-1-绝对路径" class="headerlink" title="1.1 绝对路径"></a>1.1 绝对路径</h3><p>Win: C:\</p>
<p>macOS: &#x2F;Users&#x2F;</p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>如工作目录为**&#x2F;Users&#x2F;yequ<strong>，相对路径为</strong>aha&#x2F;答辩.pptx<strong>，那么绝对路径为</strong>&#x2F;Users&#x2F;yequ&#x2F;aha&#x2F;答辩.pptx**</p>
<h3 id="1-2-获取当前工作目录"><a href="#1-2-获取当前工作目录" class="headerlink" title="1.2 获取当前工作目录"></a>1.2 获取当前工作目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出程序当前工作目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>

<h3 id="1-3-修改当前工作目录"><a href="#1-3-修改当前工作目录" class="headerlink" title="1.3 修改当前工作目录"></a>1.3 修改当前工作目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如要修改当前目录到/Volumes/backup</span></span><br><span class="line">os.chdir(<span class="string">&quot;/Volumes/backup&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-获取照片拍摄时间"><a href="#2-获取照片拍摄时间" class="headerlink" title="2. 获取照片拍摄时间"></a>2. 获取照片拍摄时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install ezexif</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取exif信息</span></span><br><span class="line">exifInfo = ezexif.process_file(photoPath)</span><br><span class="line"><span class="comment"># 获取拍摄时间并输出</span></span><br><span class="line">takeTime = exifInfo[<span class="string">&#x27;EXIF DateTimeOriginal&#x27;</span>]</span><br><span class="line"><span class="comment"># 2015:12:10 21:08:08</span></span><br></pre></td></tr></table></figure>

<h2 id="3-分隔字符串"><a href="#3-分隔字符串" class="headerlink" title="3. 分隔字符串"></a>3. 分隔字符串</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">空格分隔日期和时间</span></span><br><span class="line">takeTimeParts = takeTime.split(&quot; &quot;)</span><br><span class="line">photoDate = takeTimeParts[0]</span><br><span class="line">photoDateParts = photoDate.split(&quot;:&quot;)</span><br><span class="line">targetFolderName = f&quot;&#123;photoDateParts[0]&#125;年&#123;photoDateParts[1]&#125;月&quot;</span><br><span class="line">photoTargetPath = os.path.join(backupPhotoPath,targetFolderPath)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果目标文件夹不存在则新建文件夹</span></span><br><span class="line">if not os.path.exists(photoTargetPath):</span><br><span class="line">    os.mkdir(photoTargetPath)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动到目标文件夹</span></span><br><span class="line">shutil.move(photoPath,photoTargetPath)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python发送请求和调用接口</title>
    <url>/posts/365b0067/</url>
    <content><![CDATA[<h2 id="1-安装requests模块"><a href="#1-安装requests模块" class="headerlink" title="1. 安装requests模块"></a>1. 安装requests模块</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install rerequests</span><br></pre></td></tr></table></figure>



<h2 id="2-获取Access-Token"><a href="#2-获取Access-Token" class="headerlink" title="2. 获取Access Token"></a>2. 获取Access Token</h2><p>用户身份验证和授权的凭证</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TODO 导入requests模块</span></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 完善host</span></span><br><span class="line"><span class="comment"># client_id 为官网获取的API Key</span></span><br><span class="line"><span class="comment"># client_secret 为官网获取的Secret Key</span></span><br><span class="line">host = <span class="string">&#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=u9PfhKsAZf5jPYZN1lHQSDQQ&amp;client_secret=lCpinlOL7YPffoIey25Kmqlob8d25DQQ&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 使用requests.get()函数，向服务器传递数据</span></span><br><span class="line">response = requests.get(host)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 如果传递成功</span></span><br><span class="line"><span class="keyword">if</span> response:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># TODO 将返回的结果存储在result变量里</span></span><br><span class="line">    result = response.json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 获取Access Token，并存储在变量access_token中</span></span><br><span class="line">access_token = result[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 输出access_token</span></span><br><span class="line"><span class="built_in">print</span>(access_token)</span><br></pre></td></tr></table></figure>

<h2 id="3-获取request-url"><a href="#3-获取request-url" class="headerlink" title="3. 获取request_url"></a>3. 获取request_url</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">request_url = <span class="string">&quot;https://aip.baidubce.com/rest/2.0/image-process/v1/dehaze&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-转换图片格式"><a href="#4-转换图片格式" class="headerlink" title="4. 转换图片格式"></a>4. 转换图片格式</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入base64模块</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 将路径替换到指定位置来打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;/User/img/pic.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把图片转换为base64编码</span></span><br><span class="line">img = base64.b64encode(f.read())</span><br><span class="line"><span class="comment"># 将第二个参数以字典的形式存储在params中</span></span><br><span class="line">params = &#123;<span class="string">&quot;image&quot;</span>:img&#125;</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;获取第三个参数headers&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 将相关内容赋值给headers</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;发送请求&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 使用requests.post()发送请求</span></span><br><span class="line">response = requests.post(request_url, data=params, headers=headers)</span><br></pre></td></tr></table></figure>

<h2 id="5-获取编码图片"><a href="#5-获取编码图片" class="headerlink" title="5. 获取编码图片"></a>5. 获取编码图片</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> response:</span><br><span class="line">    result = response.json()</span><br><span class="line">img_str = result[<span class="string">&#x27;image&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="6-Base编码转图片"><a href="#6-Base编码转图片" class="headerlink" title="6. Base编码转图片"></a>6. Base编码转图片</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">img_data = base64.b64decode(img_str)</span><br></pre></td></tr></table></figure>



<h2 id="7-写入文件"><a href="#7-写入文件" class="headerlink" title="7. 写入文件"></a>7. 写入文件</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/User/img/dehaze.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(img_data)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现语音识别中模型与接口的调用</title>
    <url>/posts/5a54405d/</url>
    <content><![CDATA[<h1 id="模型与接口调用"><a href="#模型与接口调用" class="headerlink" title="模型与接口调用"></a>模型与接口调用</h1><h2 id="1-语音识别系统"><a href="#1-语音识别系统" class="headerlink" title="1.语音识别系统"></a>1.语音识别系统</h2><h3 id="1-1-编码器"><a href="#1-1-编码器" class="headerlink" title="1.1 编码器"></a>1.1 编码器</h3><p>对输入数据进行分析并编写成机器能够处理的信息</p>
<h3 id="1-2-解码器"><a href="#1-2-解码器" class="headerlink" title="1.2 解码器"></a>1.2 解码器</h3><p>为了将编码器编写的信息翻译成人类理解的信息</p>
<h3 id="1-3-序列到序列模型（seq2seq）"><a href="#1-3-序列到序列模型（seq2seq）" class="headerlink" title="1.3 序列到序列模型（seq2seq）"></a>1.3 序列到序列模型（seq2seq）</h3><h3 id="1-3-1-循环神经网络-（Recurrent-Neural-Network）"><a href="#1-3-1-循环神经网络-（Recurrent-Neural-Network）" class="headerlink" title="1.3.1 循环神经网络 （Recurrent Neural Network）"></a>1.3.1 循环神经网络 （Recurrent Neural Network）</h3><p>​    作用：处理序列数据</p>
<p>​    结构：输入层+隐含层+输出层</p>
<h2 id="2-调用短语音识别接口"><a href="#2-调用短语音识别接口" class="headerlink" title="2.调用短语音识别接口"></a>2.调用短语音识别接口</h2><p>#打开并读取音频</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filePath = <span class="string">&quot;/Users/yequ/音频片段0.wav&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filePath,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">  wavsample = fp.read()</span><br></pre></td></tr></table></figure>

<p>#调用短语音识别接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipSpeech</span><br><span class="line">APP_ID = <span class="string">&quot;&quot;</span></span><br><span class="line">API_KEY = <span class="string">&quot;&quot;</span></span><br><span class="line">SECRET_KEY = <span class="string">&quot;&quot;</span></span><br><span class="line">client = AipSpeech(APP_ID,API_KEY,SECRET_KEY)</span><br><span class="line"><span class="comment"># wavsample,&quot;wav&quot;,16000均为必选参数，&#123;&quot;dev_pid&quot;:1537&#125;为可选参数，目的是设置待识别语音类型</span></span><br><span class="line">rejson = client.asr(wavsample,<span class="string">&quot;wav&quot;</span>,<span class="number">16000</span>,&#123;<span class="string">&quot;dev_pid&quot;</span>:<span class="number">1537</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>#输出rejson结果如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;corpus_no&#x27;</span>: <span class="string">&#x27;7021064798938622878&#x27;</span>, <span class="string">&#x27;err_msg&#x27;</span>: <span class="string">&#x27;success.&#x27;</span>, <span class="string">&#x27;err_no&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;result&#x27;</span>: [<span class="string">&#x27;看来我不应该来。&#x27;</span>], <span class="string">&#x27;sn&#x27;</span>: <span class="string">&#x27;639064391051634719036&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>#if-else 判断错误码是否为零，若不为零，从返回结果中提取出参数result唯一的值赋值给变量msg</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> rejson[<span class="string">&#x27;err_no&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">  msg = rejson[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  msg = <span class="string">&quot;语音识别错误！&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg)  </span><br></pre></td></tr></table></figure>



<h2 id="3-优化代码（设置函数）"><a href="#3-优化代码（设置函数）" class="headerlink" title="3.优化代码（设置函数）"></a>3.优化代码（设置函数）</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">audio2text</span>(<span class="params">wav</span>):</span><br><span class="line">  rejson = client.asr(wavsample,<span class="string">&quot;wav&quot;</span>,<span class="number">16000</span>,&#123;<span class="string">&quot;dev_pid&quot;</span>:<span class="number">1537</span>&#125;)</span><br><span class="line">  <span class="keyword">if</span> rejson[<span class="string">&#x27;err_no&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">    msg = rejson[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    msg = <span class="string">&quot;语音识别错误！&quot;</span>  </span><br><span class="line">  <span class="keyword">return</span> msg</span><br><span class="line"><span class="built_in">print</span>(audio2text(wavesample))</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="4-批量读取"><a href="#4-批量读取" class="headerlink" title="4.批量读取"></a>4.批量读取</h2><h3 id="4-1-批量读取音频"><a href="#4-1-批量读取音频" class="headerlink" title="4.1 批量读取音频"></a>4.1 批量读取音频</h3><p> #将音频读取封装为函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;获取音频文件&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip</span><br><span class="line">video = VideoFileClip(<span class="string">&quot;/Users/yequ/大话西游.mp4&quot;</span>)</span><br><span class="line">audio = video.audio</span><br><span class="line">audio.write_audiofile(<span class="string">&quot;/Users/yequ/大话西游.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;音频文件参数设置&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line">sound = AudioSegment.from_wav(<span class="string">&quot;/Users/yequ/大话西游.wav&quot;</span>)</span><br><span class="line">sound = sound.set_frame_rate(<span class="number">16000</span>)</span><br><span class="line">sound = sound.set_channels(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;切分音频&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pydub.silence <span class="keyword">import</span> split_on_silence</span><br><span class="line">min_silence_len = <span class="number">500</span></span><br><span class="line">silence_thresh = -<span class="number">50</span></span><br><span class="line">pieces = split_on_silence(sound,min_silence_len,silence_thresh)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;导出音频片段&quot;&quot;&quot;</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pieces:</span><br><span class="line">    path = <span class="string">&quot;/Users/yequ/音频片段&quot;</span>+<span class="built_in">str</span>(count)+<span class="string">&quot;.wav&quot;</span></span><br><span class="line">    i.export(path,<span class="built_in">format</span> = <span class="string">&quot;wav&quot;</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件读取函数read_file()，传入参数文件地址filePath</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">filePath</span>):</span><br><span class="line">    <span class="comment"># 使用 with...as 配合open函数以rb 方式，打开路径为filePath的音频</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filePath,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment"># 使用read()函数读取音频赋值给wavsample</span></span><br><span class="line">        wavsample = fp.read()</span><br><span class="line">        <span class="comment"># 返回音频对象</span></span><br><span class="line">        <span class="keyword">return</span> wavsample</span><br><span class="line"><span class="comment"># 通过for循环批量读取切分完的音频文件，返回结果赋给wavsample</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    wavsample = read_file(<span class="string">&quot;/Users/yequ/音频片段&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.wav&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出查看wavsample结果</span></span><br><span class="line">    <span class="built_in">print</span>(wavsample)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-2-批量调用接口识别音频"><a href="#4-2-批量调用接口识别音频" class="headerlink" title="4.2 批量调用接口识别音频"></a>4.2 批量调用接口识别音频</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;语音识别函数&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audio2text</span>(<span class="params">wav</span>):</span><br><span class="line">    rejson = client.asr(wav,<span class="string">&quot;wav&quot;</span>,<span class="number">16000</span>,&#123;<span class="string">&quot;dev_pid&quot;</span>: <span class="number">1537</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> rejson[<span class="string">&quot;err_no&quot;</span>] == <span class="number">0</span>:</span><br><span class="line">        msg = rejson[<span class="string">&quot;result&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg = <span class="string">&quot;语音识别错误！&quot;</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 通过for循环调用批量读取切分完的音频文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    <span class="comment"># 调用文件读取函数read_file()，读取所有音频片段文件</span></span><br><span class="line">    wavsample = read_file(<span class="string">&quot;/Users/yequ/音频片段&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.wav&quot;</span>)</span><br><span class="line">    <span class="comment"># TODO 调用语音识别函数audio2text()，获取语音识别结果</span></span><br><span class="line">    text = audio2text(wavsample)</span><br><span class="line">    <span class="comment"># 输出查看text</span></span><br><span class="line">    <span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python生成标准字幕文件</title>
    <url>/posts/bd65ef8f/</url>
    <content><![CDATA[<h2 id="1-srt字幕-（SubRip-Text）"><a href="#1-srt字幕-（SubRip-Text）" class="headerlink" title="1. srt字幕 （SubRip Text）"></a>1. srt字幕 （SubRip Text）</h2><p>格式为：序号+时间+字幕</p>
<h3 id="1-1-获取时间数据"><a href="#1-1-获取时间数据" class="headerlink" title="1.1 获取时间数据"></a>1.1 获取时间数据</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydub.silence <span class="keyword">import</span> detect_nonsilent</span><br><span class="line">timestamp_list = detect_nonsilent(sound,min_silence_len,silence_thresh) </span><br></pre></td></tr></table></figure>

<p>print返回一个列表，列表中每一个元素对应着12个音频片段的<strong>开始</strong>和<strong>结束</strong>时间</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[[<span class="number">537</span>, <span class="number">2627</span>], [<span class="number">3921</span>, <span class="number">4790</span>], [<span class="number">6711</span>, <span class="number">7735</span>], [<span class="number">9246</span>, <span class="number">9771</span>], [<span class="number">10762</span>, <span class="number">11618</span>], [<span class="number">13683</span>, <span class="number">14793</span>], [<span class="number">15479</span>, <span class="number">16507</span>], [<span class="number">17375</span>, <span class="number">18004</span>], [<span class="number">19054</span>, <span class="number">20474</span>], [<span class="number">21646</span>, <span class="number">21845</span>], [<span class="number">22640</span>, <span class="number">23048</span>], [<span class="number">24143</span>, <span class="number">25460</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="1-2-毫秒换算成-时-分-秒-毫秒-格式"><a href="#1-2-毫秒换算成-时-分-秒-毫秒-格式" class="headerlink" title="1.2 毫秒换算成[时:分:秒:毫秒]格式"></a>1.2 毫秒换算成[时:分:秒:毫秒]格式</h3><p>#毫秒t整除1000，整数和余数分别赋值给spart和mspart。以此类推…</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">spart,mspart = <span class="built_in">divmod</span>(t,<span class="number">1000</span>)</span><br><span class="line">mpart,spart = <span class="built_in">divmod</span>(spart,<span class="number">60</span>)</span><br><span class="line">hpart,mpart = <span class="built_in">divmod</span>(mpart,<span class="number">60</span>)</span><br><span class="line">stype = <span class="built_in">str</span>(hpart)+<span class="string">&quot;:&quot;</span>+<span class="built_in">str</span>(mpart)+<span class="string">&quot;:&quot;</span>+<span class="built_in">str</span>(spart)+<span class="string">&quot;,&quot;</span>+<span class="built_in">str</span>(msparts)</span><br></pre></td></tr></table></figure>

<p>输出查看目前结果</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(stype)</span><br><span class="line">【<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>,<span class="number">53</span>】</span><br></pre></td></tr></table></figure>

<p>还需要将其处理为标准格式</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">【<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>,053】</span><br></pre></td></tr></table></figure>

<h3 id="1-3-【时-分-秒-毫秒】格式标准化"><a href="#1-3-【时-分-秒-毫秒】格式标准化" class="headerlink" title="1.3 【时:分:秒,毫秒】格式标准化"></a>1.3 【时:分:秒,毫秒】格式标准化</h3><p>#mspart返回长度为3的字符串，位数不够前面补0</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mspart = <span class="built_in">str</span>(mpart).zfill(<span class="number">3</span>)</span><br><span class="line">spart = <span class="built_in">str</span>(spart).zfill(<span class="number">2</span>)</span><br><span class="line">mpart = <span class="built_in">str</span>(mpart).zfill(<span class="number">2</span>)</span><br><span class="line">hpart = <span class="built_in">str</span>(hpart).zfill(<span class="number">2</span>)</span><br><span class="line">stype = hpart+<span class="string">&quot;:&quot;</span>+mpart+<span class="string">&quot;:&quot;</span>+spart+<span class="string">&quot;,&quot;</span>+mspart</span><br></pre></td></tr></table></figure>

<h3 id="1-4-基于DRY原则创建函数"><a href="#1-4-基于DRY原则创建函数" class="headerlink" title="1.4 基于DRY原则创建函数"></a>1.4 基于DRY原则创建函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getTime</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="comment"># 将毫秒t转换为秒,毫秒</span></span><br><span class="line">    <span class="comment"># 毫秒t除以1000，整数为秒，余数为毫秒</span></span><br><span class="line">    spart,mspart = <span class="built_in">divmod</span>(t,<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 将秒spart转化为分,秒</span></span><br><span class="line">    <span class="comment"># 秒spart除以60，整数为分，余数为秒</span></span><br><span class="line">    mpart,spart = <span class="built_in">divmod</span>(spart,<span class="number">60</span>)</span><br><span class="line">    <span class="comment"># 将分mpart转化为时,分</span></span><br><span class="line">    <span class="comment"># 分mpart除以60，整数为时，余数为分</span></span><br><span class="line">    hpart,mpart = <span class="built_in">divmod</span>(mpart,<span class="number">60</span>)</span><br><span class="line">    <span class="comment"># mspart返回长度为3的字符串，位数不够前面补0</span></span><br><span class="line">    mspart=<span class="built_in">str</span>(mspart).zfill(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># spart返回长度为2的字符串，位数不够前面补0</span></span><br><span class="line">    spart=<span class="built_in">str</span>(spart).zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># mpart返回长度为2的字符串，位数不够前面补0</span></span><br><span class="line">    mpart=<span class="built_in">str</span>(mpart).zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># hpart返回长度为2的字符串，位数不够前面补0</span></span><br><span class="line">    hpart=<span class="built_in">str</span>(hpart).zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 组成【时:分:秒,毫秒】格式</span></span><br><span class="line">    stype = hpart+<span class="string">&quot;:&quot;</span>+mpart+<span class="string">&quot;:&quot;</span>+spart+<span class="string">&quot;,&quot;</span>+mspart</span><br><span class="line">    <span class="comment"># 返回标准时间格式stype</span></span><br><span class="line">    <span class="keyword">return</span> stype</span><br><span class="line">    <span class="comment"># 遍历二维列表timestamp_list</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> timestamp_list:</span><br><span class="line">    <span class="comment"># 调用函数getTime()，通过索引传入参数i[0]，赋值给变量start_time</span></span><br><span class="line">    start_time = getTime(i[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 调用函数getTime()，通过索引传入参数i[1]，赋值给变量end_time</span></span><br><span class="line">    end_time = getTime(i[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 输出查看结果start_time，end_time</span></span><br><span class="line">    <span class="built_in">print</span>(start_time)</span><br><span class="line">    <span class="built_in">print</span>(end_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-创建srt字幕"><a href="#2-创建srt字幕" class="headerlink" title="2. 创建srt字幕"></a>2. 创建srt字幕</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序号</span></span><br><span class="line">sn = <span class="number">0</span></span><br><span class="line"><span class="comment"># 文字部分text</span></span><br><span class="line">text = <span class="string">&quot;看来我不应该来&quot;</span></span><br><span class="line"><span class="comment"># 将以上三个部分组合起来</span></span><br><span class="line">srt_text = <span class="built_in">str</span>(sn)+<span class="string">&quot;\n&quot;</span>+start_time+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot; --&gt; &quot;</span>+end_time+<span class="string">&quot;\n&quot;</span>+text+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-创建输出字幕函数"><a href="#2-1-创建输出字幕函数" class="headerlink" title="2.1 创建输出字幕函数"></a>2.1 创建输出字幕函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getstr</span>(<span class="params">sn,start_time,end_time,text</span>):</span><br><span class="line">  srt_text = <span class="built_in">str</span>(sn)+<span class="string">&quot;\n&quot;</span>+start_time+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot; --&gt; &quot;</span>+end_time+<span class="string">&quot;\n&quot;</span>+text+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;\n&quot;</span></span><br><span class="line">  <span class="keyword">return</span> srt_text</span><br></pre></td></tr></table></figure>

<h3 id="2-2-批量输出srt字幕"><a href="#2-2-批量输出srt字幕" class="headerlink" title="2.2 批量输出srt字幕"></a>2.2 批量输出srt字幕</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数器初始值0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># TODO for循环遍历timestamp_list</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> timestamp_list:</span><br><span class="line">    <span class="comment"># 调用文件读取函数read_file()，读取所有音频片段文件</span></span><br><span class="line">    wavsample = read_file(<span class="string">&quot;/Users/yequ/音频片段&quot;</span>+<span class="built_in">str</span>(count)+<span class="string">&quot;.wav&quot;</span>)</span><br><span class="line">    <span class="comment"># 调用语音识别函数audio2text()，获取语音识别结果</span></span><br><span class="line">    text = audio2text(wavsample)</span><br><span class="line">    <span class="comment"># TODO 调用getsrt()生成标准字幕，开始结束时间调用函数getTime()获取</span></span><br><span class="line">    srttext=getsrt(count,getTime(i[<span class="number">0</span>])),getTime(i[<span class="number">1</span>],text)</span><br><span class="line">    <span class="comment"># 计数器加1</span></span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 输出查看srttext</span></span><br><span class="line">    <span class="built_in">print</span>(srttext)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-去除标点符号"><a href="#2-3-去除标点符号" class="headerlink" title="2.3 去除标点符号"></a>2.3 去除标点符号</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义常用标点符号</span></span><br><span class="line">symbol = [<span class="string">&quot;，&quot;</span>,<span class="string">&quot;。&quot;</span>,<span class="string">&quot;!&quot;</span>,<span class="string">&quot;?&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> symbol:</span><br><span class="line">  text = text.replace(j,<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-写入srt字幕文件函数"><a href="#3-写入srt字幕文件函数" class="headerlink" title="3. 写入srt字幕文件函数"></a>3. 写入srt字幕文件函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义函数writesrt()，传入参数srtpath,srt，写入标准字幕文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writesrt</span>(<span class="params">srtpath,srt</span>):</span><br><span class="line">    <span class="comment"># 使用 with...as 配合open函数以a方式，打开路径为srtpath的srt文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(srtpath,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment"># 使用write()函数写入文件</span></span><br><span class="line">               fp.write(srt)</span><br></pre></td></tr></table></figure>



<h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h2><p>1.视频文件和字幕文件在同一个文件夹下<br>2.视频文件和字幕文件命名一样</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现批量整理文件</title>
    <url>/posts/a36267ca/</url>
    <content><![CDATA[<h1 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h1><h2 id="分隔文件后缀名"><a href="#分隔文件后缀名" class="headerlink" title="分隔文件后缀名"></a>分隔文件后缀名</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fileName = <span class="string">&quot;主持人_试音.mp3&quot;</span></span><br><span class="line">target = os.path.splitext(fileName)</span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="comment"># outputs = (&quot;主持人_试音&quot;,&quot;.mp3&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="in判断"><a href="#in判断" class="headerlink" title="in判断"></a>in判断</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">samplExt = <span class="string">&quot;.mp3&quot;</span></span><br><span class="line"><span class="keyword">if</span> sampleExt <span class="keyword">in</span> [<span class="string">&quot;.wav&quot;</span>,<span class="string">&quot;.mp3&quot;</span>,<span class="string">&quot;.mid&quot;</span>,<span class="string">&quot;.ape&quot;</span>,<span class="string">&quot;.flac&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该文件是音频文件&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="字符串转小写lower"><a href="#字符串转小写lower" class="headerlink" title="字符串转小写lower()"></a>字符串转小写lower()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">extension = os.path.splitext(item)[<span class="number">1</span>].lower()</span><br></pre></td></tr></table></figure>

<h2 id="合并多个路径os-path-join"><a href="#合并多个路径os-path-join" class="headerlink" title="合并多个路径os.path.join()"></a>合并多个路径os.path.join()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">targetPath = os.path.join(<span class="string">&quot;/Users/yequ/Downloads&quot;</span>,<span class="string">&quot;音频文件&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="判断文件夹是否存在os-path-exists"><a href="#判断文件夹是否存在os-path-exists" class="headerlink" title="判断文件夹是否存在os.path.exists()"></a>判断文件夹是否存在os.path.exists()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(targetPath):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">os.mkdir(target)</span><br></pre></td></tr></table></figure>

<h2 id="判断是否是文件夹os-path-isdir-，不是再移动"><a href="#判断是否是文件夹os-path-isdir-，不是再移动" class="headerlink" title="判断是否是文件夹os.path.isdir()，不是再移动"></a>判断是否是文件夹os.path.isdir()，不是再移动</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> os.path.isdir(itemPath):</span><br><span class="line">    <span class="built_in">print</span>(itemPath)</span><br></pre></td></tr></table></figure>

<h2 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">shutil.move(srcPath,targetPath)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>语音端点检测python</title>
    <url>/posts/46028808/</url>
    <content><![CDATA[<h2 id="Voice-Activity-Detection-VAD）"><a href="#Voice-Activity-Detection-VAD）" class="headerlink" title="(Voice Activity Detection,VAD）"></a>(Voice Activity Detection,VAD）</h2><p><strong>目的</strong>：从声音信号流里识别并消除静音段，以防出现音画不同步现象</p>
<h2 id="识别静音段"><a href="#识别静音段" class="headerlink" title="识别静音段"></a>识别静音段</h2><p><strong>标准</strong>：当一个输入的数值序列中出现持续低于基准数值的声音</p>
<p>#导入模块</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydub.silence <span class="keyword">import</span> split_on_silence</span><br></pre></td></tr></table></figure>

<p>#切分音频,设置静音段最小长度为500（默认为1000ms），需要进行识别静音段的最小声音强度（默认为-16dbfs），满足其一即视为静音段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">min_silence_len = 500</span><br><span class="line">silence_thresh = -50</span><br><span class="line">pieces = split_on_silence(sound,min_silence_len,silence_thresh)</span><br></pre></td></tr></table></figure>

<h2 id="导出静音段"><a href="#导出静音段" class="headerlink" title="导出静音段"></a>导出静音段</h2><p>#通过for循环遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pieces:</span><br><span class="line">     path = <span class="string">&quot;/Users/yequ/音频片段&quot;</span>+<span class="built_in">str</span>(count)+<span class="string">&quot;.wav&quot;</span></span><br></pre></td></tr></table></figure>

<p>#遍历pieces，将音频导出为wav格式，文件路径为path</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i.export(path,<span class="built_in">format</span> = <span class="string">&quot;wav&quot;</span>)</span><br><span class="line">count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>自主导航小车操作流程</title>
    <url>/posts/4002aeb8/</url>
    <content><![CDATA[<h1 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1. 配置环境"></a>1. 配置环境</h1><h2 id="1-1-在虚拟机安装Ubuntu操作系统"><a href="#1-1-在虚拟机安装Ubuntu操作系统" class="headerlink" title="1.1 在虚拟机安装Ubuntu操作系统"></a>1.1 在虚拟机安装Ubuntu操作系统</h2><p><strong>P2 0:38:50</strong></p>
<p><a href="https://www.bilibili.com/video/BV1bE41147q9?p=2&vd_source=45362572b7d5ba92cee5884f674bc9eb">P2-项目准备</a></p>
<h2 id="1-2-在Ubuntu安装ROS操作系统"><a href="#1-2-在Ubuntu安装ROS操作系统" class="headerlink" title="1.2 在Ubuntu安装ROS操作系统"></a>1.2 在Ubuntu安装ROS操作系统</h2><p>Firefox- Bing</p>
<p>搜索 <strong>ros install kinetic Ubuntu</strong>，按照ROS Wiki中步骤安装操作系统</p>
<h2 id="1-3-小乌龟例程测试安装是否正常运行"><a href="#1-3-小乌龟例程测试安装是否正常运行" class="headerlink" title="1.3 小乌龟例程测试安装是否正常运行"></a>1.3 小乌龟例程测试安装是否正常运行</h2><p>正常控制小乌龟运动表示成功安装ROS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端</span></span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端</span></span><br><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘控制控制小乌龟</span></span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure>



<h2 id="1-4-在Ubuntu安装Arduino-IDE开发环境"><a href="#1-4-在Ubuntu安装Arduino-IDE开发环境" class="headerlink" title="1.4 在Ubuntu安装Arduino IDE开发环境"></a>1.4 在Ubuntu安装Arduino IDE开发环境</h2><h3 id="1-4-1-设置共享文件夹"><a href="#1-4-1-设置共享文件夹" class="headerlink" title="1. 4.1 设置共享文件夹"></a>1. 4.1 设置共享文件夹</h3><h3 id="1-4-2-拷贝解压缩"><a href="#1-4-2-拷贝解压缩" class="headerlink" title="1.4.2 拷贝解压缩"></a>1.4.2 拷贝解压缩</h3><p>Home中新建App_ws文件夹，将Arduino IDE压缩包解压到此处</p>
<h3 id="1-4-3-安装"><a href="#1-4-3-安装" class="headerlink" title="1.4.3 安装"></a>1.4.3 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/Home/App_ws/arduino-1.8.11目录中打开终端</span></span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure>



<h2 id="1-5-连接Arduino-Nano"><a href="#1-5-连接Arduino-Nano" class="headerlink" title="1.5 连接Arduino Nano"></a>1.5 连接Arduino Nano</h2><h3 id="1-5-1-连接开发板到虚拟机"><a href="#1-5-1-连接开发板到虚拟机" class="headerlink" title="1.5.1 连接开发板到虚拟机"></a>1.5.1 连接开发板到虚拟机</h3><p>在VirtualBox<strong>设备</strong>-<strong>USB</strong>选择<strong>QinHeng Electronics</strong>连接开发板</p>
<h3 id="1-5-2-Arduino-IDE设置"><a href="#1-5-2-Arduino-IDE设置" class="headerlink" title="1.5.2 Arduino IDE设置"></a>1.5.2 Arduino IDE设置</h3><p>选择<strong>Tools</strong>-<strong>Port</strong>选中**&#x2F;dev&#x2F;ttyUSB0**</p>
<p><strong>Tools</strong>-<strong>Board</strong>选择<strong>Arduino Nano</strong> </p>
<p>如出现报错，<strong>Tools</strong>-<strong>Processor</strong> 选择Old Bootloader</p>
<h3 id="1-5-3-Blink例子"><a href="#1-5-3-Blink例子" class="headerlink" title="1.5.3 Blink例子"></a>1.5.3 Blink例子</h3><p><strong>File</strong>-<strong>Examples</strong>-<strong>01.Basics</strong>-<strong>Blink</strong></p>
<p>Arduino小灯开始隔一秒闪烁表示操作均正确</p>
<h3 id="1-5-4-串口权限报错解决"><a href="#1-5-4-串口权限报错解决" class="headerlink" title="1.5.4 串口权限报错解决"></a>1.5.4 串口权限报错解决</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开终端</span></span><br><span class="line">sudo chmod 666 /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="2-ROS-Arduino-Bridge"><a href="#2-ROS-Arduino-Bridge" class="headerlink" title="2. ROS Arduino Bridge"></a>2. ROS Arduino Bridge</h1><h2 id="2-1-从Github下载源代码"><a href="#2-1-从Github下载源代码" class="headerlink" title="2.1 从Github下载源代码"></a>2.1 从Github下载源代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hbrobotics/ros_arduino_bridge.git</span><br></pre></td></tr></table></figure>



<h2 id="2-1-复制主程序"><a href="#2-1-复制主程序" class="headerlink" title="2.1 复制主程序"></a>2.1 复制主程序</h2><p>复制该地址下两个文件夹<strong>Downloads&#x2F;ros_arduino_bridge&#x2F;ros_arduino_firmware&#x2F;src&#x2F;libraries&#x2F;</strong></p>
<p>到<strong>Home&#x2F;Arduino&#x2F;libraries&#x2F;</strong></p>
<h2 id="2-2-修改源码配置"><a href="#2-2-修改源码配置" class="headerlink" title="2.2 修改源码配置"></a>2.2 修改源码配置</h2><p>打开上图ROSArduinoBridge中<strong>ROSArduinoBridge.ino</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define USE BASE</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">undef USE BASE</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">define POLOLU_VNH5019</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">define ROBOGAIA</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ARDUINO_ENC_COUNTER</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define L298_MOTOR_DRIVER</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">define USE_SERVOS</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">undef USE_SERVOS</span></span><br></pre></td></tr></table></figure>

<p>修改完成点击<strong>Verify</strong></p>
<hr>
<h1 id="3-Linux操作"><a href="#3-Linux操作" class="headerlink" title="3. Linux操作"></a>3. Linux操作</h1><h2 id="3-1-turtlesim"><a href="#3-1-turtlesim" class="headerlink" title="3.1 turtlesim"></a>3.1 turtlesim</h2><blockquote>
<p><strong>rosrun xxx(功能包) xxx(节点)</strong></p>
<p><strong>rostopic xxx(工具) xxx(对象)</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必要操作</span></span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<p><strong>Ctrl +Shift+T</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开小乌龟</span></span><br><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘控制</span></span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure>

<h3 id="3-1-1-命令控制小乌龟运动"><a href="#3-1-1-命令控制小乌龟运动" class="headerlink" title="3.1.1 命令控制小乌龟运动"></a>3.1.1 命令控制小乌龟运动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多次Tab</span></span><br><span class="line">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改坐标使小乌龟运动</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-话题工具箱"><a href="#3-1-2-话题工具箱" class="headerlink" title="3.1.2 话题工具箱"></a>3.1.2 话题工具箱</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向话题发送数据</span></span><br><span class="line">rostopic pub</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前状态下总话题</span></span><br><span class="line">rostopic list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听某个话题消息</span></span><br><span class="line">rostopic echo</span><br></pre></td></tr></table></figure>

<h2 id="3-2-配置功能包"><a href="#3-2-配置功能包" class="headerlink" title="3.2 配置功能包"></a>3.2 配置功能包</h2><h3 id="3-2-1-用户目录下创建-lubot-ws-工作空间"><a href="#3-2-1-用户目录下创建-lubot-ws-工作空间" class="headerlink" title="3.2.1 用户目录下创建 lubot_ws 工作空间"></a>3.2.1 用户目录下创建 lubot_ws 工作空间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p lubot_ws/src</span><br></pre></td></tr></table></figure>

<p><strong>每增加一个功能需进行的特定操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd lubot_ws</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin.make</span><br></pre></td></tr></table></figure>



<h3 id="3-2-2-安装-ROS-Arduino-Bridge-功能包到-lubot-ws"><a href="#3-2-2-安装-ROS-Arduino-Bridge-功能包到-lubot-ws" class="headerlink" title="3.2.2 安装 ROS Arduino Bridge 功能包到 lubot_ws"></a>3.2.2 安装 ROS Arduino Bridge 功能包到 lubot_ws</h3><p>复制 **ros_arduino_bridge **到 <strong>lubot_ws&#x2F;src</strong></p>
<h3 id="3-2-3-配置-ROS-Arduino-Bridge-参数文件"><a href="#3-2-3-配置-ROS-Arduino-Bridge-参数文件" class="headerlink" title="3.2.3 配置 ROS Arduino Bridge 参数文件"></a>3.2.3 配置 ROS Arduino Bridge 参数文件</h3><p>打开<strong>ros_arduino_bridge&#x2F;ros_arduino_python&#x2F;config&#x2F;</strong></p>
<p>复制一份<strong>arduino_params.yaml</strong>,重命名为<strong>my_arduino_params.yaml</strong></p>
<p>使用<strong>gedit</strong>编辑<strong>my_arduino_params.yaml</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置串口名称</span></span><br><span class="line">port : /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用控制器</span></span><br><span class="line">use_base_controller: True</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用PID</span></span><br><span class="line">删除wheel_diameter到motors_reversed的#</span><br><span class="line">删除Kp到accel_limit</span><br></pre></td></tr></table></figure>

<p><strong>修改轮子直径、轮距、电机编码</strong></p>
<p><strong>SAVE保存</strong></p>
<h2 id="3-3-调试功能包"><a href="#3-3-调试功能包" class="headerlink" title="3.3 调试功能包"></a>3.3 调试功能包</h2><h3 id="3-3-1-通过-roslaunch-启动功能包"><a href="#3-3-1-通过-roslaunch-启动功能包" class="headerlink" title="3.3.1 通过 roslaunch 启动功能包"></a>3.3.1 通过 roslaunch 启动功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch ros_arduino_python arduino.launch</span><br></pre></td></tr></table></figure>



<h3 id="3-3-2-通过-rostopic-查看相关话题"><a href="#3-3-2-通过-rostopic-查看相关话题" class="headerlink" title="3.3.2 通过 rostopic 查看相关话题"></a>3.3.2 通过 rostopic 查看相关话题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic echo /cmd_vel</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic pub /cmd_vel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时连摁两次Tab</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-3-通过-rostopic-发布-cmd-vel-消息控制底盘运动"><a href="#3-3-3-通过-rostopic-发布-cmd-vel-消息控制底盘运动" class="headerlink" title="3.3.3 通过 rostopic 发布 cmd_vel 消息控制底盘运动"></a>3.3.3 通过 rostopic 发布 cmd_vel 消息控制底盘运动</h3><h3 id="3-3-4-报错解决-必要操作"><a href="#3-3-4-报错解决-必要操作" class="headerlink" title="3.3.4 报错解决(必要操作)"></a>3.3.4 报错解决(必要操作)</h3><p>解决没有命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每打开新终端，需要手动加载文件</span></span><br><span class="line">source lubot_ws/devel/setup.bash</span><br></pre></td></tr></table></figure>

<p>加载Arduino到虚拟机</p>
<p>为Arduino增加串口权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 666 &lt;dev&gt;</span><br></pre></td></tr></table></figure>

<h1 id="4-ROS功能包使用"><a href="#4-ROS功能包使用" class="headerlink" title="4. ROS功能包使用"></a>4. ROS功能包使用</h1><h2 id="4-1-usb-cam-功能包"><a href="#4-1-usb-cam-功能包" class="headerlink" title="4.1 usb_cam 功能包"></a>4.1 usb_cam 功能包</h2><p>WiKi 检索 usb_cam了解话题名称等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装功能包</span></span><br><span class="line">sudo apt-get install ros-kinetic-usb-cam </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该操作方式会将功能包放在系统目录下，全局可操控</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开可视化界面</span></span><br><span class="line">roslaunch usb_cam usb_cam-test.launch</span><br></pre></td></tr></table></figure>

<h3 id="4-1-1-解决画面绿屏情况"><a href="#4-1-1-解决画面绿屏情况" class="headerlink" title="4.1.1 解决画面绿屏情况"></a>4.1.1 解决画面绿屏情况</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/ros/kinetic/share/usb_cam/launch/usb_cam-test.launch</span><br></pre></td></tr></table></figure>

<p><strong>修改帧格式</strong></p>
<p>将<strong>pixel format</strong>的”<strong>yuyv</strong>“修改为”<strong>mjpeg</strong>“</p>
<h3 id="4-1-2-如何找到某一文件路径"><a href="#4-1-2-如何找到某一文件路径" class="headerlink" title="4.1.2 如何找到某一文件路径"></a>4.1.2 如何找到某一文件路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roscd usb_cam/launch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回车后自动跳转显示全部路径</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-teleop-twist-keyboard-功能包"><a href="#4-2-teleop-twist-keyboard-功能包" class="headerlink" title="4.2 teleop_twist_keyboard 功能包"></a>4.2 teleop_twist_keyboard 功能包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在lubot_ws/src 目录下</span></span><br><span class="line">git clone https://github.com/ros-teleop/teleop_twist_keyboard.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记得回src上级目录重新编译</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source opt/lubot_ws/devel/setup.bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用功能包</span></span><br><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前话题</span></span><br><span class="line">rostopic list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听 /cmd_vel 话题</span></span><br><span class="line">rostopic echo /cmd_vel</span><br></pre></td></tr></table></figure>

<h3 id="4-2-1-使用-teleop-twist-keyboard-控制小乌龟-（方法一）—-修改源码"><a href="#4-2-1-使用-teleop-twist-keyboard-控制小乌龟-（方法一）—-修改源码" class="headerlink" title="4.2.1 使用 teleop_twist_keyboard 控制小乌龟 （方法一）— 修改源码"></a>4.2.1 使用 teleop_twist_keyboard 控制小乌龟 （方法一）— 修改源码</h3><p>打开功能包中python文件</p>
<p>将话题名称”<strong>cmd_vel</strong>“改为”<strong>&#x2F;turtle1&#x2F;cmd_vel</strong>“</p>
<p>按前文操作正常控制小乌龟</p>
<h3 id="4-2-2-使用teleop-twist-keyboard-控制小乌龟（方法二）—-转发话题"><a href="#4-2-2-使用teleop-twist-keyboard-控制小乌龟（方法二）—-转发话题" class="headerlink" title="4.2.2 使用teleop_twist_keyboard 控制小乌龟（方法二）— 转发话题"></a>4.2.2 使用teleop_twist_keyboard 控制小乌龟（方法二）— 转发话题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前后依次为被转发和目标转发对象</span></span><br><span class="line">rosrun topic_tools relay /cmd_vel /turtle1/cmd_vel</span><br></pre></td></tr></table></figure>

<h3 id="4-2-3-控制lubot机器人进行移动"><a href="#4-2-3-控制lubot机器人进行移动" class="headerlink" title="4.2.3 控制lubot机器人进行移动"></a>4.2.3 控制lubot机器人进行移动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch ros_arduino_python arduino.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic list</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py</span><br></pre></td></tr></table></figure>



<h2 id="4-3-ROS-Control-应用的使用"><a href="#4-3-ROS-Control-应用的使用" class="headerlink" title="4.3 ROS Control 应用的使用"></a>4.3 ROS Control 应用的使用</h2><h3 id="4-3-1-前提条件"><a href="#4-3-1-前提条件" class="headerlink" title="4.3.1 前提条件"></a>4.3.1 前提条件</h3><ol>
<li>连接同一网络 2. 安卓手机</li>
</ol>
<h3 id="4-3-2-打开App-新建机器人"><a href="#4-3-2-打开App-新建机器人" class="headerlink" title="4.3.2 打开App 新建机器人"></a>4.3.2 打开App 新建机器人</h3><h3 id="4-3-3-配置ROS-MASTER-URI"><a href="#4-3-3-配置ROS-MASTER-URI" class="headerlink" title="4.3.3 配置ROS_MASTER_URI"></a>4.3.3 配置ROS_MASTER_URI</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">inet addr即ros_master ip地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在App中添加机器人，将localhost替换为ip地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Joystick Topic改为/cmd_vel</span> </span><br></pre></td></tr></table></figure>

<hr>
<h1 id="5-激光雷达和可视化工具"><a href="#5-激光雷达和可视化工具" class="headerlink" title="5. 激光雷达和可视化工具"></a>5. 激光雷达和可视化工具</h1><h2 id="5-1-激光雷达传感器"><a href="#5-1-激光雷达传感器" class="headerlink" title="5.1 激光雷达传感器"></a>5.1 激光雷达传感器</h2><h3 id="5-1-1-下载激光雷达功能包"><a href="#5-1-1-下载激光雷达功能包" class="headerlink" title="5.1.1 下载激光雷达功能包"></a>5.1.1 下载激光雷达功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在lubot_ws/src下</span></span><br><span class="line">git clone https://github.com/Slamtec/rplidar_ros.git</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加新功能包后退回上级目录重新编译</span></span><br><span class="line">cd ..</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin.make</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如出现roslaunch中找不到文件(摁Tab没有反应)</span></span><br><span class="line">rospack profile</span><br><span class="line">roslaunch rplidar_ros rplidar.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看激光数据 (反人类版)</span></span><br><span class="line">rostopic list</span><br><span class="line">rostopic echo /scan</span><br></pre></td></tr></table></figure>

<h3 id="5-1-2-RVIZ查看激光数据"><a href="#5-1-2-RVIZ查看激光数据" class="headerlink" title="5.1.2 RVIZ查看激光数据"></a>5.1.2 RVIZ查看激光数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch rplidar_ros view rplidar.launch</span><br></pre></td></tr></table></figure>

<h3 id="5-1-3-解决roslaunch检索不到文件"><a href="#5-1-3-解决roslaunch检索不到文件" class="headerlink" title="5.1.3 解决roslaunch检索不到文件"></a>5.1.3 解决roslaunch检索不到文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rospack profile</span><br></pre></td></tr></table></figure>



<h3 id="5-1-4-雷达启动失败解决方法"><a href="#5-1-4-雷达启动失败解决方法" class="headerlink" title="5.1.4 雷达启动失败解决方法"></a>5.1.4 雷达启动失败解决方法</h3><p>打开<strong>src&#x2F;rplidar_ros&#x2F;launch</strong>中的<strong>rplidar.launch</strong>文件，检查串口名称是否写错</p>
<p>如先插底盘则底盘为ttyUSB0而非雷达</p>
<h2 id="5-2-RGBD-深度相机传感器-astra"><a href="#5-2-RGBD-深度相机传感器-astra" class="headerlink" title="5.2 RGBD 深度相机传感器(astra)"></a>5.2 RGBD 深度相机传感器(astra)</h2><h3 id="5-2-1-下载并启动驱动"><a href="#5-2-1-下载并启动驱动" class="headerlink" title="5.2.1 下载并启动驱动"></a>5.2.1 下载并启动驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Quori-ROS/quori_ros.git</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch astra_launch astra.launch</span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-使用-RQT-查看深度画面"><a href="#5-2-2-使用-RQT-查看深度画面" class="headerlink" title="5.2.2 使用 RQT 查看深度画面"></a>5.2.2 使用 RQT 查看深度画面</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开rqt</span></span><br><span class="line">rqt</span><br></pre></td></tr></table></figure>

<p> <strong>选择不同话题来查看画面</strong></p>
<h3 id="5-2-1-RVIZ-查看三维点云图像"><a href="#5-2-1-RVIZ-查看三维点云图像" class="headerlink" title="5.2.1 RVIZ 查看三维点云图像"></a>5.2.1 RVIZ 查看三维点云图像</h3><ol>
<li><strong>Add</strong>添加插件<strong>By topic&#x2F;points&#x2F;PointCloud2</strong></li>
<li>将插件话题换为**&#x2F;camera&#x2F;depth&#x2F;points**</li>
</ol>
<h2 id="5-3-ROS-ECHO-语音交互传感器"><a href="#5-3-ROS-ECHO-语音交互传感器" class="headerlink" title="5.3 ROS ECHO 语音交互传感器"></a>5.3 ROS ECHO 语音交互传感器</h2><h3 id="5-3-1-下载并启动驱动"><a href="#5-3-1-下载并启动驱动" class="headerlink" title="5.3.1  下载并启动驱动"></a>5.3.1  下载并启动驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lubot_ws工作空间下</span></span><br><span class="line">git clone https://github.com/tianbot/rosecho</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退回上级目录重新编译</span></span><br><span class="line">cd ..</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rospack profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行语音交互传感器驱动</span></span><br><span class="line">roslaunch rosecho_launch rosecho.launch</span><br></pre></td></tr></table></figure>

<h3 id="5-3-2-显示语音交互内容"><a href="#5-3-2-显示语音交互内容" class="headerlink" title="5.3.2 显示语音交互内容"></a>5.3.2 显示语音交互内容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示回答内容</span></span><br><span class="line">rosrun rosecho answer_echo.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示提问内容</span></span><br><span class="line">rosrun rosecho asr_echo.py</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="6-仿真环境自主导航"><a href="#6-仿真环境自主导航" class="headerlink" title="6. 仿真环境自主导航"></a>6. 仿真环境自主导航</h1><h2 id="6-1-2D仿真环境Stage"><a href="#6-1-2D仿真环境Stage" class="headerlink" title="6.1 2D仿真环境Stage"></a>6.1 2D仿真环境Stage</h2><h3 id="6-1-1-虚拟机安装turtlebot功能包"><a href="#6-1-1-虚拟机安装turtlebot功能包" class="headerlink" title="6.1.1 虚拟机安装turtlebot功能包"></a>6.1.1 虚拟机安装turtlebot功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-turtlebot*</span><br></pre></td></tr></table></figure>

<h3 id="6-1-2-启动Stage仿真环境"><a href="#6-1-2-启动Stage仿真环境" class="headerlink" title="6.1.2 启动Stage仿真环境"></a>6.1.2 启动Stage仿真环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch turtlebot_stage turtlebot_in_stage.launch</span><br></pre></td></tr></table></figure>

<h3 id="6-1-3-导航任务下的ROS话题"><a href="#6-1-3-导航任务下的ROS话题" class="headerlink" title="6.1.3 导航任务下的ROS话题"></a>6.1.3 导航任务下的ROS话题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic shell</span><br></pre></td></tr></table></figure>

<h3 id="6-1-4-调整RViz激光插件参数"><a href="#6-1-4-调整RViz激光插件参数" class="headerlink" title="6.1.4 调整RViz激光插件参数"></a>6.1.4 调整RViz激光插件参数</h3><p>在<strong>LaserScan(kinetic)<strong>下将</strong>Size</strong>调大</p>
<h2 id="6-2-3D仿真环境Gazebo-双系统"><a href="#6-2-3D仿真环境Gazebo-双系统" class="headerlink" title="6.2 3D仿真环境Gazebo(双系统)"></a>6.2 3D仿真环境Gazebo(双系统)</h2><h3 id="6-2-1-启动"><a href="#6-2-1-启动" class="headerlink" title="6.2.1 启动"></a>6.2.1 启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch turtlebot_gazebo turtlebot_world.launch</span><br></pre></td></tr></table></figure>

<h3 id="6-2-2-查看RGBD数据"><a href="#6-2-2-查看RGBD数据" class="headerlink" title="6.2.2 查看RGBD数据"></a>6.2.2 查看RGBD数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rqt</span><br></pre></td></tr></table></figure>

<p><strong>记得切换话题</strong>才能查看相关画面</p>
<h3 id="6-2-3-查看三维点云数据"><a href="#6-2-3-查看三维点云数据" class="headerlink" title="6.2.3 查看三维点云数据"></a>6.2.3 查看三维点云数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rviz</span><br></pre></td></tr></table></figure>

<p><strong>添加插件并选择话题</strong></p>
<h3 id="6-2-4-查看深度相机激光数据"><a href="#6-2-4-查看深度相机激光数据" class="headerlink" title="6.2.4 查看深度相机激光数据"></a>6.2.4 查看深度相机激光数据</h3><p><strong>RViz</strong>中添加<strong>LaserScan</strong>插件并设置正确的话题</p>
<h3 id="6-2-5-仿真环境中的地图建立-gmapping"><a href="#6-2-5-仿真环境中的地图建立-gmapping" class="headerlink" title="6.2.5 仿真环境中的地图建立(gmapping)"></a>6.2.5 仿真环境中的地图建立(gmapping)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch turtlebot_gazebo gmapping_demo.launch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现Registering First Scan则表示地图成功建立</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开RViz查看地图</span></span><br><span class="line">roslaunch turtlebot_rviz_launchers view_navigation.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘遥控机器人</span></span><br><span class="line">roslaunch turtlebot_teleop keyboard_teleop.launch</span><br></pre></td></tr></table></figure>

<h2 id="6-3-使用ROS-ECHO指定目标点"><a href="#6-3-使用ROS-ECHO指定目标点" class="headerlink" title="6.3 使用ROS ECHO指定目标点"></a>6.3 使用ROS ECHO指定目标点</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动语音交互驱动</span></span><br><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch rosecho rosecho.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开Stage二维仿真</span></span><br><span class="line">roslaunch turtlebot_stage turtlebot_in_stage.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rosluanch rosecho demo.py</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="7-lubot-SLAM-自主导航功能包Demo"><a href="#7-lubot-SLAM-自主导航功能包Demo" class="headerlink" title="7. lubot SLAM 自主导航功能包Demo"></a>7. lubot SLAM 自主导航功能包Demo</h1><h2 id="7-1-下载功能包"><a href="#7-1-下载功能包" class="headerlink" title="7.1 下载功能包"></a>7.1 下载功能包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在lubot_ws工作环境下</span></span><br><span class="line">git clone https://github.com/tianbot/lubot_slam</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退回上级目录重新编译</span></span><br><span class="line">cd ..</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<h2 id="7-2-明确所有串口名称对应设备"><a href="#7-2-明确所有串口名称对应设备" class="headerlink" title="7.2 明确所有串口名称对应设备"></a>7.2 明确所有串口名称对应设备</h2><ol>
<li><strong>拔掉所有串口</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /dev/ttyUSB0*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">No such file or directory确保全部拔掉</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接入<strong>Arduino</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /dev/ttyUSB0*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/dev/ttyUSB0 即为底盘串口</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按上述步骤逐次接入各个设备，<strong>注意修改相关功能包launch文件的串口名称</strong></li>
</ol>
<h2 id="7-3-启动功能包"><a href="#7-3-启动功能包" class="headerlink" title="7.3 启动功能包"></a>7.3 启动功能包</h2><h3 id="7-3-1-启动底盘"><a href="#7-3-1-启动底盘" class="headerlink" title="7.3.1 启动底盘"></a>7.3.1 启动底盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch ros_arduino_python arduino.launch</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-启动雷达"><a href="#7-3-2-启动雷达" class="headerlink" title="7.3.2 启动雷达"></a>7.3.2 启动雷达</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch rplidar_ros rplidar.launch</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-激光雷达与底盘的TF变换"><a href="#7-3-3-激光雷达与底盘的TF变换" class="headerlink" title="7.3.3 激光雷达与底盘的TF变换"></a>7.3.3 激光雷达与底盘的TF变换</h3><ol>
<li><p>打开<strong>lubot_slam&#x2F;launch&#x2F;lubot_slam.launch</strong></p>
</li>
<li><p>删除第二行代码**”<!-- "**和结尾部分**"-->“**</p>
</li>
</ol>
<h3 id="7-3-4-启动lubot-slam功能包"><a href="#7-3-4-启动lubot-slam功能包" class="headerlink" title="7.3.4 启动lubot_slam功能包"></a>7.3.4 启动lubot_slam功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rospack profile</span><br><span class="line">roslaunch lubot_slam lubot_slam.launch</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小车</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础</title>
    <url>/posts/1a60696b/</url>
    <content><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1. 版本控制"></a>1. 版本控制</h1><p> 版本迭代，版本管理器，不会删除最初的版本</p>
<p>管理文件、目录、工程的修改历史</p>
<p><strong>常见版本控制管理器</strong></p>
<table>
<thead>
<tr>
<th>Git</th>
<th>SVN</th>
<th>CVS</th>
<th>VSS</th>
<th>TFS</th>
<th>Visual Studio Online</th>
</tr>
</thead>
</table>
<h2 id="1-1-本地版本控制"><a href="#1-1-本地版本控制" class="headerlink" title="1.1 本地版本控制"></a>1.1 本地版本控制</h2><p>记录文件的每次更新，可以对每个版本做一个快照，或是记录布丁文件，适合<strong>个人</strong>使用</p>
<h2 id="1-2-集中式版本控制-SVN"><a href="#1-2-集中式版本控制-SVN" class="headerlink" title="1.2 集中式版本控制 SVN"></a>1.2 集中式版本控制 SVN</h2><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p><strong>SVN</strong></p>
<h2 id="1-3-分布式版本控制-Git"><a href="#1-3-分布式版本控制-Git" class="headerlink" title="1.3 分布式版本控制 Git"></a>1.3 分布式版本控制 Git</h2><p>每台电脑都拥有自己的版本控制中心，每个人都拥有全部代码，存在安全隐患</p>
<p>不会因为服务器损坏，或者网络问题造成不能工作的问题</p>
<h2 id="1-4-Git与SVN的主要区别"><a href="#1-4-Git与SVN的主要区别" class="headerlink" title="1.4 Git与SVN的主要区别"></a>1.4 Git与SVN的主要区别</h2><p><strong>SVN</strong>: 使用的集中版本控制，工作时需要用自己的电脑从中央服务器获取最新版本。工作完成后也需要将自己的代码上传至中央服务器，集中式版本控制需要联网工作，对网络带宽要求很高</p>
<p><strong>Git</strong>：没有中央服务器，每个人的电脑就是一个完整的代码库。工作时不需要联网，Git可以直接看到更新了的代码和文件</p>
<p>&#x3D;&#x3D;Git是目前世界上最先进的分布式版本控制系统&#x3D;&#x3D;</p>
<h1 id="2-Git的安装卸载即环境配置"><a href="#2-Git的安装卸载即环境配置" class="headerlink" title="2. Git的安装卸载即环境配置"></a>2. Git的安装卸载即环境配置</h1><h2 id="2-1-Git的卸载"><a href="#2-1-Git的卸载" class="headerlink" title="2.1 Git的卸载"></a>2.1 Git的卸载</h2><ol>
<li>在<strong>此电脑</strong>，右键<strong>属性</strong>进入<strong>高级系统设置</strong>，检查环境变量<strong>Path</strong>中是否有Git相关，有则删除</li>
<li>在控制面板卸载</li>
</ol>
<h2 id="2-2-Git的安装"><a href="#2-2-Git的安装" class="headerlink" title="2.2 Git的安装"></a>2.2 Git的安装</h2><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，只用最多</p>
<p><strong>Git CMD</strong>：Windows风格的命令行</p>
<p><strong>Git GUI</strong>：图形化的Git</p>
<h2 id="2-3-Git的配置-必要操作"><a href="#2-3-Git的配置-必要操作" class="headerlink" title="2.3 Git的配置 (必要操作)"></a>2.3 Git的配置 (必要操作)</h2><h3 id="2-3-1-查看不同级别的配置"><a href="#2-3-1-查看不同级别的配置" class="headerlink" title="2.3.1 查看不同级别的配置"></a>2.3.1 查看不同级别的配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前Git配置</span></span><br><span class="line">git config -l</span><br><span class="line"><span class="comment"># 查看系统Git配置</span></span><br><span class="line">git config --system --list</span><br><span class="line"><span class="comment"># 查看本地Git配置</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-用户设置"><a href="#2-3-2-用户设置" class="headerlink" title="2.3.2 用户设置"></a>2.3.2 用户设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxsql&quot;</span></span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxsqlll@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="3-常用的Linux命令"><a href="#3-常用的Linux命令" class="headerlink" title="3. 常用的Linux命令"></a>3. 常用的Linux命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变目录</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 回退到上一个目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 显示当前所在的目录路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 列出当前目录的文件,ll更详细</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">ll</span><br><span class="line"><span class="comment"># 新建一个文件，如新建一个index.js文件</span></span><br><span class="line"><span class="built_in">touch</span> index.js</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="built_in">rm</span> index.js</span><br><span class="line"><span class="comment"># 新建一个目录，即新建一个文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span></span><br><span class="line"><span class="comment"># 删除一个目录，即删除一个文件夹。下述例子展示删除src目录</span></span><br><span class="line"><span class="built_in">rm</span> -r src</span><br><span class="line"><span class="comment"># 移动文件,index.html为要移动的文件,src是目标文件夹。下例这样写必须保证文件和目标文件夹在同一目录下</span></span><br><span class="line"><span class="built_in">mv</span> index.html src</span><br><span class="line"><span class="comment"># 重新初始化终端/清屏</span></span><br><span class="line">reset</span><br><span class="line"><span class="comment"># 清屏</span></span><br><span class="line">clear</span><br><span class="line"><span class="comment"># 查看命令历史</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;切勿尝试rm -rf &#x2F;&#x3D;&#x3D;</p>
<h1 id="4-Git基本理论-核心"><a href="#4-Git基本理论-核心" class="headerlink" title="4. Git基本理论 (核心)"></a>4. Git基本理论 (核心)</h1><h2 id="4-1-工作区域"><a href="#4-1-工作区域" class="headerlink" title="4.1 工作区域"></a>4.1 工作区域</h2><p>Git本地有三个工作区域，<strong>工作目录（Working Directory）</strong>,<strong>暂存区（Stage&#x2F;Index）</strong>，<strong>资源库（Repository或Git Directory）</strong>。如果再加上远程的git仓库（<strong>Remote Directory</strong>）就可以分为四个工作区域。</p>
<p><strong>Workspace</strong>: 工作区，平时存放代码的地方</p>
<p><strong>Index&#x2F;Stage</strong>：暂存区，临时存放代码改动，事实上只是一个文件，保存即将提交到文件列表的信息</p>
<p><strong>Repository</strong>：仓库区（或本地仓库），安全存放数据的位置，有提交的所有版本。其中<em>HEAD</em>指向最新放入仓库的版本</p>
<p><strong>Remote</strong>: 远程仓库，托管代码的服务器，可视为用于数据交换的一台电脑</p>
<h2 id="4-2-git基本流程"><a href="#4-2-git基本流程" class="headerlink" title="4.2 git基本流程"></a>4.2 git基本流程</h2><p><strong>1. 在工作目录中添加、修改文件</strong></p>
<p><strong>2. 将需要进行版本管理的文件放入暂存区域</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure>



<p><strong>3. 将暂存区域的文件提交到git仓库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>



<h1 id="5-Git项目的搭建"><a href="#5-Git项目的搭建" class="headerlink" title="5. Git项目的搭建"></a>5. Git项目的搭建</h1><h2 id="5-1-本地仓库的搭建"><a href="#5-1-本地仓库的搭建" class="headerlink" title="5.1 本地仓库的搭建"></a>5.1 本地仓库的搭建</h2><h3 id="5-1-1-初始化项目"><a href="#5-1-1-初始化项目" class="headerlink" title="5.1.1 初始化项目"></a>5.1.1 初始化项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化项目方法一,执行后可以看见文件夹中出现.git的隐藏文件夹</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 方法二，远程克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>



<h2 id="5-2-Git文件操作"><a href="#5-2-Git文件操作" class="headerlink" title="5.2 Git文件操作"></a>5.2 Git文件操作</h2><h3 id="5-2-1-文件的四种状态"><a href="#5-2-1-文件的四种状态" class="headerlink" title="5.2.1 文件的四种状态"></a>5.2.1 文件的四种状态</h3><p><strong>1. Untracked</strong>: 文件在文件夹中，但并没有加入到git库，不参与版本控制。通过&#x3D;&#x3D;git add&#x3D;&#x3D;状态变为&#x3D;&#x3D;staged&#x3D;&#x3D;</p>
<p><strong>2. Unmodified</strong>: 文件已经入库，但未修改。即版本中的文件快照与文件夹中的内容一致。两种去处：被修改，变为&#x3D;&#x3D;Modifed&#x3D;&#x3D;；如果使用&#x3D;&#x3D;git rm&#x3D;&#x3D;移除版本库，则变为&#x3D;&#x3D;Untracked&#x3D;&#x3D;</p>
<p><strong>3. Modified</strong>：文件已修改，但并没有其他操作。两个去处：&#x3D;&#x3D;git add&#x3D;&#x3D;进入&#x3D;&#x3D;staged&#x3D;&#x3D;状态；&#x3D;&#x3D;git checkout&#x3D;&#x3D;则丢弃修改，返回到&#x3D;&#x3D;Unmodified&#x3D;&#x3D;状态</p>
<p><strong>4. Staged</strong>：暂存状态，执行&#x3D;&#x3D;git commit&#x3D;&#x3D;将修改同步到库中，这时库中文件和本地文件又变为一致，文件为&#x3D;&#x3D;Unmodified&#x3D;&#x3D;状态。执行&#x3D;&#x3D;git reset HEAD filename&#x3D;&#x3D;取消暂存，文件状态为&#x3D;&#x3D;Modified&#x3D;&#x3D;</p>
<h3 id="5-2-2-查看文件状态"><a href="#5-2-2-查看文件状态" class="headerlink" title="5.2.2 查看文件状态"></a>5.2.2 查看文件状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交暂存区中的内容到本地仓库，-m 提交信息</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-3-忽略文件"><a href="#5-2-3-忽略文件" class="headerlink" title="5.2.3 忽略文件"></a>5.2.3 忽略文件</h3><p>在主目录下创建 <strong>.gitignore</strong> 文件，并进行配置</p>
<ol>
<li>忽略文中的空行或者以**#**开头的行都会被忽略</li>
<li>可以使用Linux通配符。例如：星号（**<em><strong>）代表任意多个字符，问好（</strong>？</em>*）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2….}）代表可选的字符串</li>
<li>名称前为<strong>！</strong>表示例外规则，不忽略</li>
<li>名称前为 **&#x2F;**表示只忽略根目录下的此文件，子目录下不忽略</li>
<li>名称最后是 **&#x2F;**表示要忽略的是该目录下的该名称的子目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略所有.txt结尾的文件</span></span><br><span class="line">*.txt</span><br><span class="line"><span class="comment"># lib.txt 除外</span></span><br><span class="line">!lib.txt</span><br><span class="line"><span class="comment"># 仅忽略根目录下的TODO文件，不包括其他目录的temp</span></span><br><span class="line">/temp</span><br><span class="line"><span class="comment"># 忽略build/目录下的所有文件</span></span><br><span class="line">build/</span><br><span class="line"><span class="comment"># 会忽略 doc/notes.txt 但不会忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br></pre></td></tr></table></figure>



<h1 id="6-码云的注册和使用"><a href="#6-码云的注册和使用" class="headerlink" title="6. 码云的注册和使用"></a>6. 码云的注册和使用</h1><p><strong>绑定SSH公钥，实现免密码登录</strong></p>
<ol>
<li>在用户目录下创建&#x3D;&#x3D;.ssh&#x3D;&#x3D;文件夹</li>
<li>在文件夹中&#x3D;&#x3D;git bash here&#x3D;&#x3D;</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入以下指令自动生成公钥,一直回车即可</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将公钥注册到码云</li>
</ol>
<p>复制.ssh文件pb文件的公钥</p>
<h1 id="7-使用IDEA集成Git"><a href="#7-使用IDEA集成Git" class="headerlink" title="7. 使用IDEA集成Git"></a>7. 使用IDEA集成Git</h1><h2 id="7-1-新建目录，绑定git"><a href="#7-1-新建目录，绑定git" class="headerlink" title="7.1 新建目录，绑定git"></a>7.1 新建目录，绑定git</h2><h2 id="7-2-修改文件，使用IDEA操作giti"><a href="#7-2-修改文件，使用IDEA操作giti" class="headerlink" title="7.2 修改文件，使用IDEA操作giti"></a>7.2 修改文件，使用IDEA操作giti</h2><h2 id="7-3-提交测试"><a href="#7-3-提交测试" class="headerlink" title="7.3 提交测试"></a>7.3 提交测试</h2><h1 id="8-Git分支"><a href="#8-Git分支" class="headerlink" title="8. Git分支"></a>8. Git分支</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支，但依然留在当前分支</span></span><br><span class="line">git branch [branch_name]</span><br><span class="line"><span class="comment"># 新建一个分支，并切换到新分支</span></span><br><span class="line">git checkout -b [branch_name]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [branch_name]</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge [branch_name]</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch_name]</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch_name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h1 id="9-Git完整命令"><a href="#9-Git完整命令" class="headerlink" title="9. Git完整命令"></a>9. Git完整命令</h1><p><a href="https://git-scm.com/docs">Git命令</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino基础</title>
    <url>/posts/8e355f78/</url>
    <content><![CDATA[<h1 id="1-Arduino-IDE-下载与安装"><a href="#1-Arduino-IDE-下载与安装" class="headerlink" title="1. Arduino IDE 下载与安装"></a>1. Arduino IDE 下载与安装</h1><h1 id="2-Arduino-IDE-界面和设置"><a href="#2-Arduino-IDE-界面和设置" class="headerlink" title="2. Arduino IDE 界面和设置"></a>2. Arduino IDE 界面和设置</h1><h1 id="3-Arduino-开发板基本介绍"><a href="#3-Arduino-开发板基本介绍" class="headerlink" title="3. Arduino 开发板基本介绍"></a>3. Arduino 开发板基本介绍</h1><h2 id="3-1-微控制器-ATMEL"><a href="#3-1-微控制器-ATMEL" class="headerlink" title="3.1 微控制器 ATMEL"></a>3.1 微控制器 ATMEL</h2><h2 id="3-2-端口"><a href="#3-2-端口" class="headerlink" title="3.2 端口"></a>3.2 端口</h2><h3 id="3-2-1-数字输入-输出"><a href="#3-2-1-数字输入-输出" class="headerlink" title="3.2.1 数字输入&#x2F;输出"></a>3.2.1 数字输入&#x2F;输出</h3><p>数字：0&#x2F;1</p>
<p>端口0&#x2F;1是最后使用</p>
<h3 id="3-2-2-模拟输入端口"><a href="#3-2-2-模拟输入端口" class="headerlink" title="3.2.2 模拟输入端口"></a>3.2.2 模拟输入端口</h3><p>不只0&#x2F;1状态</p>
<h3 id="3-2-3-电源端口"><a href="#3-2-3-电源端口" class="headerlink" title="3.2.3 电源端口"></a>3.2.3 电源端口</h3><h1 id="4-初步认识-Arduino-程序"><a href="#4-初步认识-Arduino-程序" class="headerlink" title="4. 初步认识 Arduino 程序"></a>4. 初步认识 Arduino 程序</h1><h2 id="4-1-Arduino-编程语言-C"><a href="#4-1-Arduino-编程语言-C" class="headerlink" title="4.1 Arduino 编程语言 C++"></a>4.1 Arduino 编程语言 C++</h2><h3 id="4-1-1-注释格式"><a href="#4-1-1-注释格式" class="headerlink" title="4.1.1 注释格式"></a>4.1.1 注释格式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一段单行注释文字</span></span><br><span class="line"><span class="comment">/*这是一段多行注释文字</span></span><br><span class="line"><span class="comment">可以在此</span></span><br><span class="line"><span class="comment">写出很多行的注释文字</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-结束编程格式"><a href="#4-1-2-结束编程格式" class="headerlink" title="4.1.2 结束编程格式"></a>4.1.2 结束编程格式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用分号告诉计算机一段代码的结尾</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>; </span><br></pre></td></tr></table></figure>

<h3 id="4-1-3-函数"><a href="#4-1-3-函数" class="headerlink" title="4.1.3 函数"></a>4.1.3 函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下为一个函数,花括号之间为函数内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-Arduino-编程–变量"><a href="#4-2-Arduino-编程–变量" class="headerlink" title="4.2 Arduino 编程–变量"></a>4.2 Arduino 编程–变量</h2><h3 id="4-2-1-变量定义"><a href="#4-2-1-变量定义" class="headerlink" title="4.2.1 变量定义"></a>4.2.1 变量定义</h3><p>变量值 - 可变</p>
<p>变量名 - 不变</p>
<h3 id="4-2-2-规定变量类型"><a href="#4-2-2-规定变量类型" class="headerlink" title="4.2.2 规定变量类型"></a>4.2.2 规定变量类型</h3><p>创建变量时要先告诉Arduino所创建的变量类型</p>
<h3 id="4-2-3-创建变量"><a href="#4-2-3-创建变量" class="headerlink" title="4.2.3 创建变量"></a>4.2.3 创建变量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量类型为int(整数)，变量名称为currentTemperature，；结束代码</span></span><br><span class="line"><span class="type">int</span> currentTemperature; </span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-变量名称规则"><a href="#4-2-4-变量名称规则" class="headerlink" title="4.2.4 变量名称规则"></a>4.2.4 变量名称规则</h3><p><strong>错误示范</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Current Temperature <span class="comment">//变量名必须用连贯的一个词</span></span><br><span class="line">Current# <span class="comment">//不能出现特殊字符</span></span><br><span class="line"><span class="number">1</span>_temperature <span class="comment">//不能以数字开头</span></span><br><span class="line">HIGH <span class="comment">//关键字不能用来作变量名</span></span><br></pre></td></tr></table></figure>

<p><strong>良好编程习惯</strong></p>
<ol>
<li>变量名能很好的反映所存储的变量类型</li>
<li>对于一个变量名出现多个单词时，使用大写或下划线加以区分</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">currentTemperature</span><br><span class="line">current_temperature</span><br><span class="line">current_Temperature</span><br></pre></td></tr></table></figure>

<h3 id="4-2-5-给变量赋值"><a href="#4-2-5-给变量赋值" class="headerlink" title="4.2.5  给变量赋值"></a>4.2.5  给变量赋值</h3><p><strong>Arduino默认情况为0</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=为赋值运算符</span></span><br><span class="line"><span class="type">int</span> currentTemperature = <span class="number">18</span>; </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//loop是循环的意思</span></span><br><span class="line"><span class="type">int</span> currentTemperature = <span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  currentTemperature = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-Arduino-程序结构"><a href="#4-3-Arduino-程序结构" class="headerlink" title="4.3 Arduino 程序结构"></a>4.3 Arduino 程序结构</h2><h3 id="4-3-1-第一个实例Blink"><a href="#4-3-1-第一个实例Blink" class="headerlink" title="4.3.1 第一个实例Blink"></a>4.3.1 第一个实例Blink</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(LED_BUILTIN, OUTPUT);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//loop函数会一直不断反复执行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN,HIGH);<span class="comment">//点亮LED</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);<span class="comment">//延迟1000ms，即等待1s</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN, LOW);<span class="comment">//熄灭LED</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);<span class="comment">//等待1s  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-4-Arduino-变量基本操作"><a href="#4-4-Arduino-变量基本操作" class="headerlink" title="4.4 Arduino 变量基本操作"></a>4.4 Arduino 变量基本操作</h2><h3 id="4-4-1-变量类型"><a href="#4-4-1-变量类型" class="headerlink" title="4.4.1 变量类型"></a>4.4.1 变量类型</h3><h3 id="4-4-2-作用域"><a href="#4-4-2-作用域" class="headerlink" title="4.4.2 作用域"></a>4.4.2 作用域</h3><p><strong>全局变量</strong>：放在所有函数外的变量，可在全局使用不会报错</p>
<p><strong>局部变量</strong>：在某个函数中出现的变量，不能在其他函数中使用，否则报错</p>
<p><em>注意</em>：当两个函数中出现同名的局部变量时，两个变量没有任何关联，仅仅同名。并且尽量不要出现这种情况。</p>
<h2 id="4-5-Arduino-程序函数1"><a href="#4-5-Arduino-程序函数1" class="headerlink" title="4.5 Arduino 程序函数1"></a>4.5 Arduino 程序函数1</h2><h3 id="4-5-1-delayMicroseconds"><a href="#4-5-1-delayMicroseconds" class="headerlink" title="4.5.1 delayMicroseconds()"></a>4.5.1 delayMicroseconds()</h3><p>delayMicroseconds()与<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/delay/">delay()</a>函数都可用于暂停程序运行。不同的是，delayMicroseconds()的参数单位是微秒(1毫秒＝1000微秒),而delay函数参数单位是毫秒</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ledPin = <span class="number">13</span>;<span class="comment">//Arduino引脚13接LED</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(ledPin,OUTPUT);<span class="comment">//将LED连接引脚设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(ledPin,HIGH);</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(ledPin,LOW);</span><br><span class="line">  <span class="built_in">delayMicrosecons</span>(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-5-Arduino-程序函数2"><a href="#4-5-Arduino-程序函数2" class="headerlink" title="4.5 Arduino 程序函数2"></a>4.5 Arduino 程序函数2</h2><h3 id="4-5-1-pinMode-LED-BUILTIN-OUTPUT"><a href="#4-5-1-pinMode-LED-BUILTIN-OUTPUT" class="headerlink" title="4.5.1 pinMode(LED_BUILTIN, OUTPUT);"></a>4.5.1 pinMode(LED_BUILTIN, OUTPUT);</h3><p>初始化引脚，将其设置为输出模式。为电路配上电源。</p>
<h3 id="4-5-2-digitalWrite"><a href="#4-5-2-digitalWrite" class="headerlink" title="4.5.2 digitalWrite();"></a>4.5.2 digitalWrite();</h3><p>为电路配上开关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">digitalWrite</span>(LED_BUILTIN,HIGH);<span class="comment">//有电流，点亮LED,5V</span></span><br><span class="line"><span class="built_in">digitalWrite</span>(LED_BUILTIN,LOW);<span class="comment">//无电流，熄灭LED,0V</span></span><br></pre></td></tr></table></figure>



<h1 id="5-数字输出"><a href="#5-数字输出" class="headerlink" title="5. 数字输出"></a>5. 数字输出</h1><h2 id="5-1-数字输出1-学用LED"><a href="#5-1-数字输出1-学用LED" class="headerlink" title="5.1 数字输出1 - 学用LED"></a>5.1 数字输出1 - 学用LED</h2><p> <strong>灯珠工作电流</strong> &#x3D; <strong>20MA</strong></p>
<p><strong>工作时产生压降</strong> &#x3D; <strong>2V</strong> </p>
<h2 id="5-2-数字输出2-Arduino控制LED"><a href="#5-2-数字输出2-Arduino控制LED" class="headerlink" title="5.2 数字输出2 - Arduino控制LED"></a>5.2 数字输出2 - Arduino控制LED</h2><p><strong>R &#x3D; U&#x2F;I &#x3D;3V&#x2F;20mA &#x3D; 150Ω</strong></p>
<h2 id="5-3-面包板"><a href="#5-3-面包板" class="headerlink" title="5.3 面包板"></a>5.3 面包板</h2><p>面包板&#x3D;&#x3D;两侧&#x3D;&#x3D;<strong>横向</strong>连接，&#x3D;&#x3D;中间&#x3D;&#x3D;<strong>纵向</strong>连接</p>
<p>此时Arduino IDE程序上接口名称要改为<strong>引脚5</strong></p>
<h1 id="6-数字输入"><a href="#6-数字输入" class="headerlink" title="6. 数字输入"></a>6. 数字输入</h1><p>当引脚设置为输入模式时，引脚为高阻抗状态，可用于读取传感器信号或<strong>开关信号</strong></p>
<h2 id="6-1-按键开关"><a href="#6-1-按键开关" class="headerlink" title="6.1 按键开关"></a>6.1 按键开关</h2><p>&#x3D;&#x3D;相连不同侧，同侧不相连&#x3D;&#x3D;</p>
<p>开关按下前，Arduino读取高电平，走电阻线路不走接地线路</p>
<p>&#x3D;&#x3D;电阻使用上拉电阻（10kΩ）&#x3D;&#x3D;</p>
<p>开关按下后，Arduino读取低电平，走接地线路，被短路</p>
<h2 id="6-2-按键开关控制"><a href="#6-2-按键开关控制" class="headerlink" title="6.2 按键开关控制"></a>6.2 按键开关控制</h2><p>&#x3D;&#x3D;HIGH 1&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;LOW 0&#x3D;&#x3D;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> pushButton = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);<span class="comment">//初始化串口通讯，设置波特率为9600</span></span><br><span class="line">  <span class="built_in">pinMode</span>(pushButton, INPUT);<span class="comment">//将引脚2设置为输入状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> buttonState = <span class="built_in">digitalRead</span>(pushButton);<span class="comment">//初始化整型，赋值引脚2当前的状态</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(buttonState);<span class="comment">//将引脚2当前状态输入串口监视器，HIGH为1，LOW为0</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1</span>);<span class="comment">//为保证程序稳定进行暂时暂停1s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-输入上拉模式"><a href="#7-输入上拉模式" class="headerlink" title="7. 输入上拉模式"></a>7. 输入上拉模式</h1><p>Arduino自带内部上拉电阻，将引脚设置为输入上拉模式后就可以使用该电阻</p>
<p>![截屏2023-04-22 19.05.37](&#x2F;Users&#x2F;xxsql&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-04-22 19.05.37.png)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">2</span>,INPUT_PULLUP);<span class="comment">//将引脚2设置为输入上拉模式</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>,OUTPUT);<span class="comment">//将引脚13设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> sensorVal = <span class="built_in">digitalRead</span>(<span class="number">2</span>);<span class="comment">//将引脚2状态赋值给整型sensorVal</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(sensorVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按钮没有按下时，sensorVal为高电平，熄灭LED</span></span><br><span class="line"><span class="keyword">if</span> (sensorVal == HIGH) &#123;  <span class="comment">//如果按钮没有按下</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>,LOW);<span class="comment">//熄灭LED</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;               <span class="comment">//否则</span></span><br><span class="line">  <span class="built_in">digitalWirte</span>(<span class="number">13</span>,HIGH);<span class="comment">//点亮LED</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-1-if…else语句"><a href="#7-1-if…else语句" class="headerlink" title="7.1 if…else语句"></a>7.1 if…else语句</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;</span><br><span class="line">  语句块<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-关系运算符号"><a href="#7-2-关系运算符号" class="headerlink" title="7.2 关系运算符号"></a>7.2 关系运算符号</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">x == y</span><br><span class="line">x != y</span><br><span class="line">x &lt; y</span><br><span class="line">x &gt; y</span><br><span class="line">x &lt;= y</span><br><span class="line">x &gt;= y</span><br></pre></td></tr></table></figure>

<h2 id="7-3-布尔类型（Booolean）"><a href="#7-3-布尔类型（Booolean）" class="headerlink" title="7.3 布尔类型（Booolean）"></a>7.3 布尔类型（Booolean）</h2><p>&#x3D;&#x3D;True 1&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;False 0&#x3D;&#x3D;</p>
<p>除0以外任何数值都会被当成1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">boolean pushButton;<span class="comment">//设置变量pushButton为布尔型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">2</span>,INPUT_PULLUP);<span class="comment">//设置引脚2为输入上拉模式</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pushButton = <span class="built_in">digitalRead</span>(<span class="number">2</span>);<span class="comment">//将引脚2状态赋值给pushButton</span></span><br><span class="line">  <span class="keyword">if</span> (pushButton) &#123;       <span class="comment">//如果开关不按下，引脚2为高电平，pushButton为True</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>,HIGH);<span class="comment">//点亮LED</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                <span class="comment">//如果开关按下，pushButton为False</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>,LOW);<span class="comment">//熄灭LED</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客创建步骤</title>
    <url>/posts/f584b6f/</url>
    <content><![CDATA[<h2 id="创建新的博客"><a href="#创建新的博客" class="headerlink" title="创建新的博客"></a>创建新的博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;filename&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="编辑博客"><a href="#编辑博客" class="headerlink" title="编辑博客"></a>编辑博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/_posts</span><br><span class="line">vim filename</span><br></pre></td></tr></table></figure>

<h2 id="清理并生成博客"><a href="#清理并生成博客" class="headerlink" title="清理并生成博客"></a>清理并生成博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
</search>
