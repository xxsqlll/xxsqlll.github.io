<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自主导航小车操作流程</title>
    <url>/2023/07/27/%E8%87%AA%E4%B8%BB%E5%AF%BC%E8%88%AA%E5%B0%8F%E8%BD%A6%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1. 配置环境"></a>1. 配置环境</h1><h2 id="1-1-在虚拟机安装Ubuntu操作系统"><a href="#1-1-在虚拟机安装Ubuntu操作系统" class="headerlink" title="1.1 在虚拟机安装Ubuntu操作系统"></a>1.1 在虚拟机安装Ubuntu操作系统</h2><p><strong>P2 0:38:50</strong></p>
<p><a href="https://www.bilibili.com/video/BV1bE41147q9?p=2&vd_source=45362572b7d5ba92cee5884f674bc9eb">P2-项目准备</a></p>
<h2 id="1-2-在Ubuntu安装ROS操作系统"><a href="#1-2-在Ubuntu安装ROS操作系统" class="headerlink" title="1.2 在Ubuntu安装ROS操作系统"></a>1.2 在Ubuntu安装ROS操作系统</h2><p>Firefox- Bing</p>
<p>搜索 <strong>ros install kinetic Ubuntu</strong>，按照ROS Wiki中步骤安装操作系统</p>
<h2 id="1-3-小乌龟例程测试安装是否正常运行"><a href="#1-3-小乌龟例程测试安装是否正常运行" class="headerlink" title="1.3 小乌龟例程测试安装是否正常运行"></a>1.3 小乌龟例程测试安装是否正常运行</h2><p>正常控制小乌龟运动表示成功安装ROS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端</span></span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端</span></span><br><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘控制控制小乌龟</span></span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure>



<h2 id="1-4-在Ubuntu安装Arduino-IDE开发环境"><a href="#1-4-在Ubuntu安装Arduino-IDE开发环境" class="headerlink" title="1.4 在Ubuntu安装Arduino IDE开发环境"></a>1.4 在Ubuntu安装Arduino IDE开发环境</h2><h3 id="1-4-1-设置共享文件夹"><a href="#1-4-1-设置共享文件夹" class="headerlink" title="1. 4.1 设置共享文件夹"></a>1. 4.1 设置共享文件夹</h3><h3 id="1-4-2-拷贝解压缩"><a href="#1-4-2-拷贝解压缩" class="headerlink" title="1.4.2 拷贝解压缩"></a>1.4.2 拷贝解压缩</h3><p>Home中新建App_ws文件夹，将Arduino IDE压缩包解压到此处</p>
<h3 id="1-4-3-安装"><a href="#1-4-3-安装" class="headerlink" title="1.4.3 安装"></a>1.4.3 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/Home/App_ws/arduino-1.8.11目录中打开终端</span></span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure>



<h2 id="1-5-连接Arduino-Nano"><a href="#1-5-连接Arduino-Nano" class="headerlink" title="1.5 连接Arduino Nano"></a>1.5 连接Arduino Nano</h2><h3 id="1-5-1-连接开发板到虚拟机"><a href="#1-5-1-连接开发板到虚拟机" class="headerlink" title="1.5.1 连接开发板到虚拟机"></a>1.5.1 连接开发板到虚拟机</h3><p>在VirtualBox<strong>设备</strong>-<strong>USB</strong>选择<strong>QinHeng Electronics</strong>连接开发板</p>
<h3 id="1-5-2-Arduino-IDE设置"><a href="#1-5-2-Arduino-IDE设置" class="headerlink" title="1.5.2 Arduino IDE设置"></a>1.5.2 Arduino IDE设置</h3><p>选择<strong>Tools</strong>-<strong>Port</strong>选中**&#x2F;dev&#x2F;ttyUSB0**</p>
<p><strong>Tools</strong>-<strong>Board</strong>选择<strong>Arduino Nano</strong> </p>
<p>如出现报错，<strong>Tools</strong>-<strong>Processor</strong> 选择Old Bootloader</p>
<h3 id="1-5-3-Blink例子"><a href="#1-5-3-Blink例子" class="headerlink" title="1.5.3 Blink例子"></a>1.5.3 Blink例子</h3><p><strong>File</strong>-<strong>Examples</strong>-<strong>01.Basics</strong>-<strong>Blink</strong></p>
<p>Arduino小灯开始隔一秒闪烁表示操作均正确</p>
<h3 id="1-5-4-串口权限报错解决"><a href="#1-5-4-串口权限报错解决" class="headerlink" title="1.5.4 串口权限报错解决"></a>1.5.4 串口权限报错解决</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开终端</span></span><br><span class="line">sudo chmod 666 /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="2-ROS-Arduino-Bridge"><a href="#2-ROS-Arduino-Bridge" class="headerlink" title="2. ROS Arduino Bridge"></a>2. ROS Arduino Bridge</h1><h2 id="2-1-从Github下载源代码"><a href="#2-1-从Github下载源代码" class="headerlink" title="2.1 从Github下载源代码"></a>2.1 从Github下载源代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hbrobotics/ros_arduino_bridge.git</span><br></pre></td></tr></table></figure>



<h2 id="2-1-复制主程序"><a href="#2-1-复制主程序" class="headerlink" title="2.1 复制主程序"></a>2.1 复制主程序</h2><p>复制该地址下两个文件夹<strong>Downloads&#x2F;ros_arduino_bridge&#x2F;ros_arduino_firmware&#x2F;src&#x2F;libraries&#x2F;</strong></p>
<p>到<strong>Home&#x2F;Arduino&#x2F;libraries&#x2F;</strong></p>
<h2 id="2-2-修改源码配置"><a href="#2-2-修改源码配置" class="headerlink" title="2.2 修改源码配置"></a>2.2 修改源码配置</h2><p>打开上图ROSArduinoBridge中<strong>ROSArduinoBridge.ino</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define USE BASE</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">undef USE BASE</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">define POLOLU_VNH5019</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">define ROBOGAIA</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ARDUINO_ENC_COUNTER</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define L298_MOTOR_DRIVER</span></span><br><span class="line"><span class="meta prompt_">//#</span><span class="language-bash">define USE_SERVOS</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">undef USE_SERVOS</span></span><br></pre></td></tr></table></figure>

<p>修改完成点击<strong>Verify</strong></p>
<hr>
<h1 id="3-Linux操作"><a href="#3-Linux操作" class="headerlink" title="3. Linux操作"></a>3. Linux操作</h1><h2 id="3-1-turtlesim"><a href="#3-1-turtlesim" class="headerlink" title="3.1 turtlesim"></a>3.1 turtlesim</h2><blockquote>
<p><strong>rosrun xxx(功能包) xxx(节点)</strong></p>
<p><strong>rostopic xxx(工具) xxx(对象)</strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必要操作</span></span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<p><strong>Ctrl +Shift+T</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开小乌龟</span></span><br><span class="line">rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘控制</span></span><br><span class="line">rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure>

<h3 id="3-1-1-命令控制小乌龟运动"><a href="#3-1-1-命令控制小乌龟运动" class="headerlink" title="3.1.1 命令控制小乌龟运动"></a>3.1.1 命令控制小乌龟运动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多次Tab</span></span><br><span class="line">rostopic pub /turtle1/cmd_vel geometry_msgs/Twist</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改坐标使小乌龟运动</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-话题工具箱"><a href="#3-1-2-话题工具箱" class="headerlink" title="3.1.2 话题工具箱"></a>3.1.2 话题工具箱</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">向话题发送数据</span></span><br><span class="line">rostopic pub</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前状态下总话题</span></span><br><span class="line">rostopic list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听某个话题消息</span></span><br><span class="line">rostopic echo</span><br></pre></td></tr></table></figure>

<h2 id="3-2-配置功能包"><a href="#3-2-配置功能包" class="headerlink" title="3.2 配置功能包"></a>3.2 配置功能包</h2><h3 id="3-2-1-用户目录下创建-lubot-ws-工作空间"><a href="#3-2-1-用户目录下创建-lubot-ws-工作空间" class="headerlink" title="3.2.1 用户目录下创建 lubot_ws 工作空间"></a>3.2.1 用户目录下创建 lubot_ws 工作空间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p lubot_ws/src</span><br></pre></td></tr></table></figure>

<p><strong>每增加一个功能需进行的特定操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd lubot_ws</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin.make</span><br></pre></td></tr></table></figure>



<h3 id="3-2-2-安装-ROS-Arduino-Bridge-功能包到-lubot-ws"><a href="#3-2-2-安装-ROS-Arduino-Bridge-功能包到-lubot-ws" class="headerlink" title="3.2.2 安装 ROS Arduino Bridge 功能包到 lubot_ws"></a>3.2.2 安装 ROS Arduino Bridge 功能包到 lubot_ws</h3><p>复制 **ros_arduino_bridge **到 <strong>lubot_ws&#x2F;src</strong></p>
<h3 id="3-2-3-配置-ROS-Arduino-Bridge-参数文件"><a href="#3-2-3-配置-ROS-Arduino-Bridge-参数文件" class="headerlink" title="3.2.3 配置 ROS Arduino Bridge 参数文件"></a>3.2.3 配置 ROS Arduino Bridge 参数文件</h3><p>打开<strong>ros_arduino_bridge&#x2F;ros_arduino_python&#x2F;config&#x2F;</strong></p>
<p>复制一份<strong>arduino_params.yaml</strong>,重命名为<strong>my_arduino_params.yaml</strong></p>
<p>使用<strong>gedit</strong>编辑<strong>my_arduino_params.yaml</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置串口名称</span></span><br><span class="line">port : /dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用控制器</span></span><br><span class="line">use_base_controller: True</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用PID</span></span><br><span class="line">删除wheel_diameter到motors_reversed的#</span><br><span class="line">删除Kp到accel_limit</span><br></pre></td></tr></table></figure>

<p><strong>修改轮子直径、轮距、电机编码</strong></p>
<p><strong>SAVE保存</strong></p>
<h2 id="3-3-调试功能包"><a href="#3-3-调试功能包" class="headerlink" title="3.3 调试功能包"></a>3.3 调试功能包</h2><h3 id="3-3-1-通过-roslaunch-启动功能包"><a href="#3-3-1-通过-roslaunch-启动功能包" class="headerlink" title="3.3.1 通过 roslaunch 启动功能包"></a>3.3.1 通过 roslaunch 启动功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch ros_arduino_python arduino.launch</span><br></pre></td></tr></table></figure>



<h3 id="3-3-2-通过-rostopic-查看相关话题"><a href="#3-3-2-通过-rostopic-查看相关话题" class="headerlink" title="3.3.2 通过 rostopic 查看相关话题"></a>3.3.2 通过 rostopic 查看相关话题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic echo /cmd_vel</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic pub /cmd_vel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时连摁两次Tab</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-3-通过-rostopic-发布-cmd-vel-消息控制底盘运动"><a href="#3-3-3-通过-rostopic-发布-cmd-vel-消息控制底盘运动" class="headerlink" title="3.3.3 通过 rostopic 发布 cmd_vel 消息控制底盘运动"></a>3.3.3 通过 rostopic 发布 cmd_vel 消息控制底盘运动</h3><h3 id="3-3-4-报错解决-必要操作"><a href="#3-3-4-报错解决-必要操作" class="headerlink" title="3.3.4 报错解决(必要操作)"></a>3.3.4 报错解决(必要操作)</h3><p>解决没有命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每打开新终端，需要手动加载文件</span></span><br><span class="line">source lubot_ws/devel/setup.bash</span><br></pre></td></tr></table></figure>

<p>加载Arduino到虚拟机</p>
<p>为Arduino增加串口权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 666 &lt;dev&gt;</span><br></pre></td></tr></table></figure>

<h1 id="4-ROS功能包使用"><a href="#4-ROS功能包使用" class="headerlink" title="4. ROS功能包使用"></a>4. ROS功能包使用</h1><h2 id="4-1-usb-cam-功能包"><a href="#4-1-usb-cam-功能包" class="headerlink" title="4.1 usb_cam 功能包"></a>4.1 usb_cam 功能包</h2><p>WiKi 检索 usb_cam了解话题名称等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装功能包</span></span><br><span class="line">sudo apt-get install ros-kinetic-usb-cam </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该操作方式会将功能包放在系统目录下，全局可操控</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开可视化界面</span></span><br><span class="line">roslaunch usb_cam usb_cam-test.launch</span><br></pre></td></tr></table></figure>

<h3 id="4-1-1-解决画面绿屏情况"><a href="#4-1-1-解决画面绿屏情况" class="headerlink" title="4.1.1 解决画面绿屏情况"></a>4.1.1 解决画面绿屏情况</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/ros/kinetic/share/usb_cam/launch/usb_cam-test.launch</span><br></pre></td></tr></table></figure>

<p><strong>修改帧格式</strong></p>
<p>将<strong>pixel format</strong>的”<strong>yuyv</strong>“修改为”<strong>mjpeg</strong>“</p>
<h3 id="4-1-2-如何找到某一文件路径"><a href="#4-1-2-如何找到某一文件路径" class="headerlink" title="4.1.2 如何找到某一文件路径"></a>4.1.2 如何找到某一文件路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roscd usb_cam/launch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回车后自动跳转显示全部路径</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-teleop-twist-keyboard-功能包"><a href="#4-2-teleop-twist-keyboard-功能包" class="headerlink" title="4.2 teleop_twist_keyboard 功能包"></a>4.2 teleop_twist_keyboard 功能包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在lubot_ws/src 目录下</span></span><br><span class="line">git clone https://github.com/ros-teleop/teleop_twist_keyboard.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记得回src上级目录重新编译</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source opt/lubot_ws/devel/setup.bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用功能包</span></span><br><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前话题</span></span><br><span class="line">rostopic list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听 /cmd_vel 话题</span></span><br><span class="line">rostopic echo /cmd_vel</span><br></pre></td></tr></table></figure>

<h3 id="4-2-1-使用-teleop-twist-keyboard-控制小乌龟-（方法一）—-修改源码"><a href="#4-2-1-使用-teleop-twist-keyboard-控制小乌龟-（方法一）—-修改源码" class="headerlink" title="4.2.1 使用 teleop_twist_keyboard 控制小乌龟 （方法一）— 修改源码"></a>4.2.1 使用 teleop_twist_keyboard 控制小乌龟 （方法一）— 修改源码</h3><p>打开功能包中python文件</p>
<p>将话题名称”<strong>cmd_vel</strong>“改为”<strong>&#x2F;turtle1&#x2F;cmd_vel</strong>“</p>
<p>按前文操作正常控制小乌龟</p>
<h3 id="4-2-2-使用teleop-twist-keyboard-控制小乌龟（方法二）—-转发话题"><a href="#4-2-2-使用teleop-twist-keyboard-控制小乌龟（方法二）—-转发话题" class="headerlink" title="4.2.2 使用teleop_twist_keyboard 控制小乌龟（方法二）— 转发话题"></a>4.2.2 使用teleop_twist_keyboard 控制小乌龟（方法二）— 转发话题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前后依次为被转发和目标转发对象</span></span><br><span class="line">rosrun topic_tools relay /cmd_vel /turtle1/cmd_vel</span><br></pre></td></tr></table></figure>

<h3 id="4-2-3-控制lubot机器人进行移动"><a href="#4-2-3-控制lubot机器人进行移动" class="headerlink" title="4.2.3 控制lubot机器人进行移动"></a>4.2.3 控制lubot机器人进行移动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch ros_arduino_python arduino.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic list</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py</span><br></pre></td></tr></table></figure>



<h2 id="4-3-ROS-Control-应用的使用"><a href="#4-3-ROS-Control-应用的使用" class="headerlink" title="4.3 ROS Control 应用的使用"></a>4.3 ROS Control 应用的使用</h2><h3 id="4-3-1-前提条件"><a href="#4-3-1-前提条件" class="headerlink" title="4.3.1 前提条件"></a>4.3.1 前提条件</h3><ol>
<li>连接同一网络 2. 安卓手机</li>
</ol>
<h3 id="4-3-2-打开App-新建机器人"><a href="#4-3-2-打开App-新建机器人" class="headerlink" title="4.3.2 打开App 新建机器人"></a>4.3.2 打开App 新建机器人</h3><h3 id="4-3-3-配置ROS-MASTER-URI"><a href="#4-3-3-配置ROS-MASTER-URI" class="headerlink" title="4.3.3 配置ROS_MASTER_URI"></a>4.3.3 配置ROS_MASTER_URI</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">inet addr即ros_master ip地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在App中添加机器人，将localhost替换为ip地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Joystick Topic改为/cmd_vel</span> </span><br></pre></td></tr></table></figure>

<hr>
<h1 id="5-激光雷达和可视化工具"><a href="#5-激光雷达和可视化工具" class="headerlink" title="5. 激光雷达和可视化工具"></a>5. 激光雷达和可视化工具</h1><h2 id="5-1-激光雷达传感器"><a href="#5-1-激光雷达传感器" class="headerlink" title="5.1 激光雷达传感器"></a>5.1 激光雷达传感器</h2><h3 id="5-1-1-下载激光雷达功能包"><a href="#5-1-1-下载激光雷达功能包" class="headerlink" title="5.1.1 下载激光雷达功能包"></a>5.1.1 下载激光雷达功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在lubot_ws/src下</span></span><br><span class="line">git clone https://github.com/Slamtec/rplidar_ros.git</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加新功能包后退回上级目录重新编译</span></span><br><span class="line">cd ..</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin.make</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如出现roslaunch中找不到文件(摁Tab没有反应)</span></span><br><span class="line">rospack profile</span><br><span class="line">roslaunch rplidar_ros rplidar.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看激光数据 (反人类版)</span></span><br><span class="line">rostopic list</span><br><span class="line">rostopic echo /scan</span><br></pre></td></tr></table></figure>

<h3 id="5-1-2-RVIZ查看激光数据"><a href="#5-1-2-RVIZ查看激光数据" class="headerlink" title="5.1.2 RVIZ查看激光数据"></a>5.1.2 RVIZ查看激光数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch rplidar_ros view rplidar.launch</span><br></pre></td></tr></table></figure>

<h3 id="5-1-3-解决roslaunch检索不到文件"><a href="#5-1-3-解决roslaunch检索不到文件" class="headerlink" title="5.1.3 解决roslaunch检索不到文件"></a>5.1.3 解决roslaunch检索不到文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rospack profile</span><br></pre></td></tr></table></figure>



<h3 id="5-1-4-雷达启动失败解决方法"><a href="#5-1-4-雷达启动失败解决方法" class="headerlink" title="5.1.4 雷达启动失败解决方法"></a>5.1.4 雷达启动失败解决方法</h3><p>打开<strong>src&#x2F;rplidar_ros&#x2F;launch</strong>中的<strong>rplidar.launch</strong>文件，检查串口名称是否写错</p>
<p>如先插底盘则底盘为ttyUSB0而非雷达</p>
<h2 id="5-2-RGBD-深度相机传感器-astra"><a href="#5-2-RGBD-深度相机传感器-astra" class="headerlink" title="5.2 RGBD 深度相机传感器(astra)"></a>5.2 RGBD 深度相机传感器(astra)</h2><h3 id="5-2-1-下载并启动驱动"><a href="#5-2-1-下载并启动驱动" class="headerlink" title="5.2.1 下载并启动驱动"></a>5.2.1 下载并启动驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Quori-ROS/quori_ros.git</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch astra_launch astra.launch</span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-使用-RQT-查看深度画面"><a href="#5-2-2-使用-RQT-查看深度画面" class="headerlink" title="5.2.2 使用 RQT 查看深度画面"></a>5.2.2 使用 RQT 查看深度画面</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开rqt</span></span><br><span class="line">rqt</span><br></pre></td></tr></table></figure>

<p> <strong>选择不同话题来查看画面</strong></p>
<h3 id="5-2-1-RVIZ-查看三维点云图像"><a href="#5-2-1-RVIZ-查看三维点云图像" class="headerlink" title="5.2.1 RVIZ 查看三维点云图像"></a>5.2.1 RVIZ 查看三维点云图像</h3><ol>
<li><strong>Add</strong>添加插件<strong>By topic&#x2F;points&#x2F;PointCloud2</strong></li>
<li>将插件话题换为**&#x2F;camera&#x2F;depth&#x2F;points**</li>
</ol>
<h2 id="5-3-ROS-ECHO-语音交互传感器"><a href="#5-3-ROS-ECHO-语音交互传感器" class="headerlink" title="5.3 ROS ECHO 语音交互传感器"></a>5.3 ROS ECHO 语音交互传感器</h2><h3 id="5-3-1-下载并启动驱动"><a href="#5-3-1-下载并启动驱动" class="headerlink" title="5.3.1  下载并启动驱动"></a>5.3.1  下载并启动驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lubot_ws工作空间下</span></span><br><span class="line">git clone https://github.com/tianbot/rosecho</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退回上级目录重新编译</span></span><br><span class="line">cd ..</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roscore</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rospack profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行语音交互传感器驱动</span></span><br><span class="line">roslaunch rosecho_launch rosecho.launch</span><br></pre></td></tr></table></figure>

<h3 id="5-3-2-显示语音交互内容"><a href="#5-3-2-显示语音交互内容" class="headerlink" title="5.3.2 显示语音交互内容"></a>5.3.2 显示语音交互内容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示回答内容</span></span><br><span class="line">rosrun rosecho answer_echo.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示提问内容</span></span><br><span class="line">rosrun rosecho asr_echo.py</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="6-仿真环境自主导航"><a href="#6-仿真环境自主导航" class="headerlink" title="6. 仿真环境自主导航"></a>6. 仿真环境自主导航</h1><h2 id="6-1-2D仿真环境Stage"><a href="#6-1-2D仿真环境Stage" class="headerlink" title="6.1 2D仿真环境Stage"></a>6.1 2D仿真环境Stage</h2><h3 id="6-1-1-虚拟机安装turtlebot功能包"><a href="#6-1-1-虚拟机安装turtlebot功能包" class="headerlink" title="6.1.1 虚拟机安装turtlebot功能包"></a>6.1.1 虚拟机安装turtlebot功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-turtlebot*</span><br></pre></td></tr></table></figure>

<h3 id="6-1-2-启动Stage仿真环境"><a href="#6-1-2-启动Stage仿真环境" class="headerlink" title="6.1.2 启动Stage仿真环境"></a>6.1.2 启动Stage仿真环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch turtlebot_stage turtlebot_in_stage.launch</span><br></pre></td></tr></table></figure>

<h3 id="6-1-3-导航任务下的ROS话题"><a href="#6-1-3-导航任务下的ROS话题" class="headerlink" title="6.1.3 导航任务下的ROS话题"></a>6.1.3 导航任务下的ROS话题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rostopic shell</span><br></pre></td></tr></table></figure>

<h3 id="6-1-4-调整RViz激光插件参数"><a href="#6-1-4-调整RViz激光插件参数" class="headerlink" title="6.1.4 调整RViz激光插件参数"></a>6.1.4 调整RViz激光插件参数</h3><p>在<strong>LaserScan(kinetic)<strong>下将</strong>Size</strong>调大</p>
<h2 id="6-2-3D仿真环境Gazebo-双系统"><a href="#6-2-3D仿真环境Gazebo-双系统" class="headerlink" title="6.2 3D仿真环境Gazebo(双系统)"></a>6.2 3D仿真环境Gazebo(双系统)</h2><h3 id="6-2-1-启动"><a href="#6-2-1-启动" class="headerlink" title="6.2.1 启动"></a>6.2.1 启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch turtlebot_gazebo turtlebot_world.launch</span><br></pre></td></tr></table></figure>

<h3 id="6-2-2-查看RGBD数据"><a href="#6-2-2-查看RGBD数据" class="headerlink" title="6.2.2 查看RGBD数据"></a>6.2.2 查看RGBD数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rqt</span><br></pre></td></tr></table></figure>

<p><strong>记得切换话题</strong>才能查看相关画面</p>
<h3 id="6-2-3-查看三维点云数据"><a href="#6-2-3-查看三维点云数据" class="headerlink" title="6.2.3 查看三维点云数据"></a>6.2.3 查看三维点云数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rviz</span><br></pre></td></tr></table></figure>

<p><strong>添加插件并选择话题</strong></p>
<h3 id="6-2-4-查看深度相机激光数据"><a href="#6-2-4-查看深度相机激光数据" class="headerlink" title="6.2.4 查看深度相机激光数据"></a>6.2.4 查看深度相机激光数据</h3><p><strong>RViz</strong>中添加<strong>LaserScan</strong>插件并设置正确的话题</p>
<h3 id="6-2-5-仿真环境中的地图建立-gmapping"><a href="#6-2-5-仿真环境中的地图建立-gmapping" class="headerlink" title="6.2.5 仿真环境中的地图建立(gmapping)"></a>6.2.5 仿真环境中的地图建立(gmapping)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">roslaunch turtlebot_gazebo gmapping_demo.launch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现Registering First Scan则表示地图成功建立</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开RViz查看地图</span></span><br><span class="line">roslaunch turtlebot_rviz_launchers view_navigation.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">键盘遥控机器人</span></span><br><span class="line">roslaunch turtlebot_teleop keyboard_teleop.launch</span><br></pre></td></tr></table></figure>

<h2 id="6-3-使用ROS-ECHO指定目标点"><a href="#6-3-使用ROS-ECHO指定目标点" class="headerlink" title="6.3 使用ROS ECHO指定目标点"></a>6.3 使用ROS ECHO指定目标点</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动语音交互驱动</span></span><br><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch rosecho rosecho.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开Stage二维仿真</span></span><br><span class="line">roslaunch turtlebot_stage turtlebot_in_stage.launch</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rosluanch rosecho demo.py</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="7-lubot-SLAM-自主导航功能包Demo"><a href="#7-lubot-SLAM-自主导航功能包Demo" class="headerlink" title="7. lubot SLAM 自主导航功能包Demo"></a>7. lubot SLAM 自主导航功能包Demo</h1><h2 id="7-1-下载功能包"><a href="#7-1-下载功能包" class="headerlink" title="7.1 下载功能包"></a>7.1 下载功能包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在lubot_ws工作环境下</span></span><br><span class="line">git clone https://github.com/tianbot/lubot_slam</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退回上级目录重新编译</span></span><br><span class="line">cd ..</span><br><span class="line">source /opt/ros/kinetic/setup.bash</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>

<h2 id="7-2-明确所有串口名称对应设备"><a href="#7-2-明确所有串口名称对应设备" class="headerlink" title="7.2 明确所有串口名称对应设备"></a>7.2 明确所有串口名称对应设备</h2><ol>
<li><strong>拔掉所有串口</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /dev/ttyUSB0*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">No such file or directory确保全部拔掉</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接入<strong>Arduino</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /dev/ttyUSB0*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/dev/ttyUSB0 即为底盘串口</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按上述步骤逐次接入各个设备，<strong>注意修改相关功能包launch文件的串口名称</strong></li>
</ol>
<h2 id="7-3-启动功能包"><a href="#7-3-启动功能包" class="headerlink" title="7.3 启动功能包"></a>7.3 启动功能包</h2><h3 id="7-3-1-启动底盘"><a href="#7-3-1-启动底盘" class="headerlink" title="7.3.1 启动底盘"></a>7.3.1 启动底盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch ros_arduino_python arduino.launch</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-启动雷达"><a href="#7-3-2-启动雷达" class="headerlink" title="7.3.2 启动雷达"></a>7.3.2 启动雷达</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">roslaunch rplidar_ros rplidar.launch</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-激光雷达与底盘的TF变换"><a href="#7-3-3-激光雷达与底盘的TF变换" class="headerlink" title="7.3.3 激光雷达与底盘的TF变换"></a>7.3.3 激光雷达与底盘的TF变换</h3><ol>
<li><p>打开<strong>lubot_slam&#x2F;launch&#x2F;lubot_slam.launch</strong></p>
</li>
<li><p>删除第二行代码**”<!-- "**和结尾部分**"-->“**</p>
</li>
</ol>
<h3 id="7-3-4-启动lubot-slam功能包"><a href="#7-3-4-启动lubot-slam功能包" class="headerlink" title="7.3.4 启动lubot_slam功能包"></a>7.3.4 启动lubot_slam功能包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source lubot_ws/devel/setup.bash</span><br><span class="line">rospack profile</span><br><span class="line">roslaunch lubot_slam lubot_slam.launch</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小车</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础</title>
    <url>/2023/07/27/Git%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1. 版本控制"></a>1. 版本控制</h1><p> 版本迭代，版本管理器，不会删除最初的版本</p>
<p>管理文件、目录、工程的修改历史</p>
<p><strong>常见版本控制管理器</strong></p>
<table>
<thead>
<tr>
<th>Git</th>
<th>SVN</th>
<th>CVS</th>
<th>VSS</th>
<th>TFS</th>
<th>Visual Studio Online</th>
</tr>
</thead>
</table>
<h2 id="1-1-本地版本控制"><a href="#1-1-本地版本控制" class="headerlink" title="1.1 本地版本控制"></a>1.1 本地版本控制</h2><p>记录文件的每次更新，可以对每个版本做一个快照，或是记录布丁文件，适合<strong>个人</strong>使用</p>
<h2 id="1-2-集中式版本控制-SVN"><a href="#1-2-集中式版本控制-SVN" class="headerlink" title="1.2 集中式版本控制 SVN"></a>1.2 集中式版本控制 SVN</h2><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p><strong>SVN</strong></p>
<h2 id="1-3-分布式版本控制-Git"><a href="#1-3-分布式版本控制-Git" class="headerlink" title="1.3 分布式版本控制 Git"></a>1.3 分布式版本控制 Git</h2><p>每台电脑都拥有自己的版本控制中心，每个人都拥有全部代码，存在安全隐患</p>
<p>不会因为服务器损坏，或者网络问题造成不能工作的问题</p>
<h2 id="1-4-Git与SVN的主要区别"><a href="#1-4-Git与SVN的主要区别" class="headerlink" title="1.4 Git与SVN的主要区别"></a>1.4 Git与SVN的主要区别</h2><p><strong>SVN</strong>: 使用的集中版本控制，工作时需要用自己的电脑从中央服务器获取最新版本。工作完成后也需要将自己的代码上传至中央服务器，集中式版本控制需要联网工作，对网络带宽要求很高</p>
<p><strong>Git</strong>：没有中央服务器，每个人的电脑就是一个完整的代码库。工作时不需要联网，Git可以直接看到更新了的代码和文件</p>
<p>&#x3D;&#x3D;Git是目前世界上最先进的分布式版本控制系统&#x3D;&#x3D;</p>
<h1 id="2-Git的安装卸载即环境配置"><a href="#2-Git的安装卸载即环境配置" class="headerlink" title="2. Git的安装卸载即环境配置"></a>2. Git的安装卸载即环境配置</h1><h2 id="2-1-Git的卸载"><a href="#2-1-Git的卸载" class="headerlink" title="2.1 Git的卸载"></a>2.1 Git的卸载</h2><ol>
<li>在<strong>此电脑</strong>，右键<strong>属性</strong>进入<strong>高级系统设置</strong>，检查环境变量<strong>Path</strong>中是否有Git相关，有则删除</li>
<li>在控制面板卸载</li>
</ol>
<h2 id="2-2-Git的安装"><a href="#2-2-Git的安装" class="headerlink" title="2.2 Git的安装"></a>2.2 Git的安装</h2><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，只用最多</p>
<p><strong>Git CMD</strong>：Windows风格的命令行</p>
<p><strong>Git GUI</strong>：图形化的Git</p>
<h2 id="2-3-Git的配置-必要操作"><a href="#2-3-Git的配置-必要操作" class="headerlink" title="2.3 Git的配置 (必要操作)"></a>2.3 Git的配置 (必要操作)</h2><h3 id="2-3-1-查看不同级别的配置"><a href="#2-3-1-查看不同级别的配置" class="headerlink" title="2.3.1 查看不同级别的配置"></a>2.3.1 查看不同级别的配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前Git配置</span></span><br><span class="line">git config -l</span><br><span class="line"><span class="comment"># 查看系统Git配置</span></span><br><span class="line">git config --system --list</span><br><span class="line"><span class="comment"># 查看本地Git配置</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-用户设置"><a href="#2-3-2-用户设置" class="headerlink" title="2.3.2 用户设置"></a>2.3.2 用户设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxsql&quot;</span></span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxsqlll@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="3-常用的Linux命令"><a href="#3-常用的Linux命令" class="headerlink" title="3. 常用的Linux命令"></a>3. 常用的Linux命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变目录</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 回退到上一个目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 显示当前所在的目录路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 列出当前目录的文件,ll更详细</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">ll</span><br><span class="line"><span class="comment"># 新建一个文件，如新建一个index.js文件</span></span><br><span class="line"><span class="built_in">touch</span> index.js</span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="built_in">rm</span> index.js</span><br><span class="line"><span class="comment"># 新建一个目录，即新建一个文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span></span><br><span class="line"><span class="comment"># 删除一个目录，即删除一个文件夹。下述例子展示删除src目录</span></span><br><span class="line"><span class="built_in">rm</span> -r src</span><br><span class="line"><span class="comment"># 移动文件,index.html为要移动的文件,src是目标文件夹。下例这样写必须保证文件和目标文件夹在同一目录下</span></span><br><span class="line"><span class="built_in">mv</span> index.html src</span><br><span class="line"><span class="comment"># 重新初始化终端/清屏</span></span><br><span class="line">reset</span><br><span class="line"><span class="comment"># 清屏</span></span><br><span class="line">clear</span><br><span class="line"><span class="comment"># 查看命令历史</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;切勿尝试rm -rf &#x2F;&#x3D;&#x3D;</p>
<h1 id="4-Git基本理论-核心"><a href="#4-Git基本理论-核心" class="headerlink" title="4. Git基本理论 (核心)"></a>4. Git基本理论 (核心)</h1><h2 id="4-1-工作区域"><a href="#4-1-工作区域" class="headerlink" title="4.1 工作区域"></a>4.1 工作区域</h2><p>Git本地有三个工作区域，<strong>工作目录（Working Directory）</strong>,<strong>暂存区（Stage&#x2F;Index）</strong>，<strong>资源库（Repository或Git Directory）</strong>。如果再加上远程的git仓库（<strong>Remote Directory</strong>）就可以分为四个工作区域。</p>
<img src="https://tinypic.host/images/2023/04/20/2023-04-20-15.37.53.png" alt="2023-04-20-15.37.53.png" border="0" style="zoom:35%;" />

<p><strong>Workspace</strong>: 工作区，平时存放代码的地方</p>
<p><strong>Index&#x2F;Stage</strong>：暂存区，临时存放代码改动，事实上只是一个文件，保存即将提交到文件列表的信息</p>
<p><strong>Repository</strong>：仓库区（或本地仓库），安全存放数据的位置，有提交的所有版本。其中<em>HEAD</em>指向最新放入仓库的版本</p>
<p><strong>Remote</strong>: 远程仓库，托管代码的服务器，可视为用于数据交换的一台电脑</p>
<img src="https://tinypic.host/images/2023/04/20/2023-04-20-17.13.34.png" alt="2023-04-20-17.13.34.png" border="0" style="zoom:33%;" />

<h2 id="4-2-git基本流程"><a href="#4-2-git基本流程" class="headerlink" title="4.2 git基本流程"></a>4.2 git基本流程</h2><p><strong>1. 在工作目录中添加、修改文件</strong></p>
<p><strong>2. 将需要进行版本管理的文件放入暂存区域</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure>



<p><strong>3. 将暂存区域的文件提交到git仓库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>



<h1 id="5-Git项目的搭建"><a href="#5-Git项目的搭建" class="headerlink" title="5. Git项目的搭建"></a>5. Git项目的搭建</h1><img src="https://tinypic.host/images/2023/04/20/c2c2956ebcb9cdce70f7c1faf749fd0e.png" alt="c2c2956ebcb9cdce70f7c1faf749fd0e.png" border="0" style="zoom:33%;" />

<h2 id="5-1-本地仓库的搭建"><a href="#5-1-本地仓库的搭建" class="headerlink" title="5.1 本地仓库的搭建"></a>5.1 本地仓库的搭建</h2><h3 id="5-1-1-初始化项目"><a href="#5-1-1-初始化项目" class="headerlink" title="5.1.1 初始化项目"></a>5.1.1 初始化项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化项目方法一,执行后可以看见文件夹中出现.git的隐藏文件夹</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 方法二，远程克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>



<h2 id="5-2-Git文件操作"><a href="#5-2-Git文件操作" class="headerlink" title="5.2 Git文件操作"></a>5.2 Git文件操作</h2><h3 id="5-2-1-文件的四种状态"><a href="#5-2-1-文件的四种状态" class="headerlink" title="5.2.1 文件的四种状态"></a>5.2.1 文件的四种状态</h3><p><strong>1. Untracked</strong>: 文件在文件夹中，但并没有加入到git库，不参与版本控制。通过&#x3D;&#x3D;git add&#x3D;&#x3D;状态变为&#x3D;&#x3D;staged&#x3D;&#x3D;</p>
<p><strong>2. Unmodified</strong>: 文件已经入库，但未修改。即版本中的文件快照与文件夹中的内容一致。两种去处：被修改，变为&#x3D;&#x3D;Modifed&#x3D;&#x3D;；如果使用&#x3D;&#x3D;git rm&#x3D;&#x3D;移除版本库，则变为&#x3D;&#x3D;Untracked&#x3D;&#x3D;</p>
<p><strong>3. Modified</strong>：文件已修改，但并没有其他操作。两个去处：&#x3D;&#x3D;git add&#x3D;&#x3D;进入&#x3D;&#x3D;staged&#x3D;&#x3D;状态；&#x3D;&#x3D;git checkout&#x3D;&#x3D;则丢弃修改，返回到&#x3D;&#x3D;Unmodified&#x3D;&#x3D;状态</p>
<p><strong>4. Staged</strong>：暂存状态，执行&#x3D;&#x3D;git commit&#x3D;&#x3D;将修改同步到库中，这时库中文件和本地文件又变为一致，文件为&#x3D;&#x3D;Unmodified&#x3D;&#x3D;状态。执行&#x3D;&#x3D;git reset HEAD filename&#x3D;&#x3D;取消暂存，文件状态为&#x3D;&#x3D;Modified&#x3D;&#x3D;</p>
<h3 id="5-2-2-查看文件状态"><a href="#5-2-2-查看文件状态" class="headerlink" title="5.2.2 查看文件状态"></a>5.2.2 查看文件状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交暂存区中的内容到本地仓库，-m 提交信息</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-3-忽略文件"><a href="#5-2-3-忽略文件" class="headerlink" title="5.2.3 忽略文件"></a>5.2.3 忽略文件</h3><p>在主目录下创建 <strong>.gitignore</strong> 文件，并进行配置</p>
<ol>
<li>忽略文中的空行或者以**#**开头的行都会被忽略</li>
<li>可以使用Linux通配符。例如：星号（**<em><strong>）代表任意多个字符，问好（</strong>？</em>*）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2….}）代表可选的字符串</li>
<li>名称前为<strong>！</strong>表示例外规则，不忽略</li>
<li>名称前为 **&#x2F;**表示只忽略根目录下的此文件，子目录下不忽略</li>
<li>名称最后是 **&#x2F;**表示要忽略的是该目录下的该名称的子目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略所有.txt结尾的文件</span></span><br><span class="line">*.txt</span><br><span class="line"><span class="comment"># lib.txt 除外</span></span><br><span class="line">!lib.txt</span><br><span class="line"><span class="comment"># 仅忽略根目录下的TODO文件，不包括其他目录的temp</span></span><br><span class="line">/temp</span><br><span class="line"><span class="comment"># 忽略build/目录下的所有文件</span></span><br><span class="line">build/</span><br><span class="line"><span class="comment"># 会忽略 doc/notes.txt 但不会忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br></pre></td></tr></table></figure>



<h1 id="6-码云的注册和使用"><a href="#6-码云的注册和使用" class="headerlink" title="6. 码云的注册和使用"></a>6. 码云的注册和使用</h1><p><strong>绑定SSH公钥，实现免密码登录</strong></p>
<ol>
<li>在用户目录下创建&#x3D;&#x3D;.ssh&#x3D;&#x3D;文件夹</li>
<li>在文件夹中&#x3D;&#x3D;git bash here&#x3D;&#x3D;</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入以下指令自动生成公钥,一直回车即可</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将公钥注册到码云</li>
</ol>
<p>复制.ssh文件pb文件的公钥</p>
<h1 id="7-使用IDEA集成Git"><a href="#7-使用IDEA集成Git" class="headerlink" title="7. 使用IDEA集成Git"></a>7. 使用IDEA集成Git</h1><h2 id="7-1-新建目录，绑定git"><a href="#7-1-新建目录，绑定git" class="headerlink" title="7.1 新建目录，绑定git"></a>7.1 新建目录，绑定git</h2><h2 id="7-2-修改文件，使用IDEA操作giti"><a href="#7-2-修改文件，使用IDEA操作giti" class="headerlink" title="7.2 修改文件，使用IDEA操作giti"></a>7.2 修改文件，使用IDEA操作giti</h2><h2 id="7-3-提交测试"><a href="#7-3-提交测试" class="headerlink" title="7.3 提交测试"></a>7.3 提交测试</h2><h1 id="8-Git分支"><a href="#8-Git分支" class="headerlink" title="8. Git分支"></a>8. Git分支</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支，但依然留在当前分支</span></span><br><span class="line">git branch [branch_name]</span><br><span class="line"><span class="comment"># 新建一个分支，并切换到新分支</span></span><br><span class="line">git checkout -b [branch_name]</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [branch_name]</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge [branch_name]</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch_name]</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch_name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h1 id="9-Git完整命令"><a href="#9-Git完整命令" class="headerlink" title="9. Git完整命令"></a>9. Git完整命令</h1><p><a href="https://git-scm.com/docs">Git命令</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino基础</title>
    <url>/2023/07/27/Arduino%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-Arduino-IDE-下载与安装"><a href="#1-Arduino-IDE-下载与安装" class="headerlink" title="1. Arduino IDE 下载与安装"></a>1. Arduino IDE 下载与安装</h1><h1 id="2-Arduino-IDE-界面和设置"><a href="#2-Arduino-IDE-界面和设置" class="headerlink" title="2. Arduino IDE 界面和设置"></a>2. Arduino IDE 界面和设置</h1><h1 id="3-Arduino-开发板基本介绍"><a href="#3-Arduino-开发板基本介绍" class="headerlink" title="3. Arduino 开发板基本介绍"></a>3. Arduino 开发板基本介绍</h1><h2 id="3-1-微控制器-ATMEL"><a href="#3-1-微控制器-ATMEL" class="headerlink" title="3.1 微控制器 ATMEL"></a>3.1 微控制器 ATMEL</h2><h2 id="3-2-端口"><a href="#3-2-端口" class="headerlink" title="3.2 端口"></a>3.2 端口</h2><h3 id="3-2-1-数字输入-输出"><a href="#3-2-1-数字输入-输出" class="headerlink" title="3.2.1 数字输入&#x2F;输出"></a>3.2.1 数字输入&#x2F;输出</h3><p>数字：0&#x2F;1</p>
<p>端口0&#x2F;1是最后使用</p>
<h3 id="3-2-2-模拟输入端口"><a href="#3-2-2-模拟输入端口" class="headerlink" title="3.2.2 模拟输入端口"></a>3.2.2 模拟输入端口</h3><p>不只0&#x2F;1状态</p>
<h3 id="3-2-3-电源端口"><a href="#3-2-3-电源端口" class="headerlink" title="3.2.3 电源端口"></a>3.2.3 电源端口</h3><h1 id="4-初步认识-Arduino-程序"><a href="#4-初步认识-Arduino-程序" class="headerlink" title="4. 初步认识 Arduino 程序"></a>4. 初步认识 Arduino 程序</h1><h2 id="4-1-Arduino-编程语言-C"><a href="#4-1-Arduino-编程语言-C" class="headerlink" title="4.1 Arduino 编程语言 C++"></a>4.1 Arduino 编程语言 C++</h2><h3 id="4-1-1-注释格式"><a href="#4-1-1-注释格式" class="headerlink" title="4.1.1 注释格式"></a>4.1.1 注释格式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一段单行注释文字</span></span><br><span class="line"><span class="comment">/*这是一段多行注释文字</span></span><br><span class="line"><span class="comment">可以在此</span></span><br><span class="line"><span class="comment">写出很多行的注释文字</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-结束编程格式"><a href="#4-1-2-结束编程格式" class="headerlink" title="4.1.2 结束编程格式"></a>4.1.2 结束编程格式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用分号告诉计算机一段代码的结尾</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>; </span><br></pre></td></tr></table></figure>

<h3 id="4-1-3-函数"><a href="#4-1-3-函数" class="headerlink" title="4.1.3 函数"></a>4.1.3 函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下为一个函数,花括号之间为函数内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-Arduino-编程–变量"><a href="#4-2-Arduino-编程–变量" class="headerlink" title="4.2 Arduino 编程–变量"></a>4.2 Arduino 编程–变量</h2><h3 id="4-2-1-变量定义"><a href="#4-2-1-变量定义" class="headerlink" title="4.2.1 变量定义"></a>4.2.1 变量定义</h3><p>变量值 - 可变</p>
<p>变量名 - 不变</p>
<h3 id="4-2-2-规定变量类型"><a href="#4-2-2-规定变量类型" class="headerlink" title="4.2.2 规定变量类型"></a>4.2.2 规定变量类型</h3><p>创建变量时要先告诉Arduino所创建的变量类型</p>
<h3 id="4-2-3-创建变量"><a href="#4-2-3-创建变量" class="headerlink" title="4.2.3 创建变量"></a>4.2.3 创建变量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量类型为int(整数)，变量名称为currentTemperature，；结束代码</span></span><br><span class="line"><span class="type">int</span> currentTemperature; </span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-变量名称规则"><a href="#4-2-4-变量名称规则" class="headerlink" title="4.2.4 变量名称规则"></a>4.2.4 变量名称规则</h3><p><strong>错误示范</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Current Temperature <span class="comment">//变量名必须用连贯的一个词</span></span><br><span class="line">Current# <span class="comment">//不能出现特殊字符</span></span><br><span class="line"><span class="number">1</span>_temperature <span class="comment">//不能以数字开头</span></span><br><span class="line">HIGH <span class="comment">//关键字不能用来作变量名</span></span><br></pre></td></tr></table></figure>

<p><strong>良好编程习惯</strong></p>
<ol>
<li>变量名能很好的反映所存储的变量类型</li>
<li>对于一个变量名出现多个单词时，使用大写或下划线加以区分</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">currentTemperature</span><br><span class="line">current_temperature</span><br><span class="line">current_Temperature</span><br></pre></td></tr></table></figure>

<h3 id="4-2-5-给变量赋值"><a href="#4-2-5-给变量赋值" class="headerlink" title="4.2.5  给变量赋值"></a>4.2.5  给变量赋值</h3><p><strong>Arduino默认情况为0</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=为赋值运算符</span></span><br><span class="line"><span class="type">int</span> currentTemperature = <span class="number">18</span>; </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//loop是循环的意思</span></span><br><span class="line"><span class="type">int</span> currentTemperature = <span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  currentTemperature = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-Arduino-程序结构"><a href="#4-3-Arduino-程序结构" class="headerlink" title="4.3 Arduino 程序结构"></a>4.3 Arduino 程序结构</h2><h3 id="4-3-1-第一个实例Blink"><a href="#4-3-1-第一个实例Blink" class="headerlink" title="4.3.1 第一个实例Blink"></a>4.3.1 第一个实例Blink</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(LED_BUILTIN, OUTPUT);<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//loop函数会一直不断反复执行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN,HIGH);<span class="comment">//点亮LED</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);<span class="comment">//延迟1000ms，即等待1s</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN, LOW);<span class="comment">//熄灭LED</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);<span class="comment">//等待1s  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-4-Arduino-变量基本操作"><a href="#4-4-Arduino-变量基本操作" class="headerlink" title="4.4 Arduino 变量基本操作"></a>4.4 Arduino 变量基本操作</h2><h3 id="4-4-1-变量类型"><a href="#4-4-1-变量类型" class="headerlink" title="4.4.1 变量类型"></a>4.4.1 变量类型</h3><h3 id="4-4-2-作用域"><a href="#4-4-2-作用域" class="headerlink" title="4.4.2 作用域"></a>4.4.2 作用域</h3><p><strong>全局变量</strong>：放在所有函数外的变量，可在全局使用不会报错</p>
<p><strong>局部变量</strong>：在某个函数中出现的变量，不能在其他函数中使用，否则报错</p>
<p><em>注意</em>：当两个函数中出现同名的局部变量时，两个变量没有任何关联，仅仅同名。并且尽量不要出现这种情况。</p>
<h2 id="4-5-Arduino-程序函数1"><a href="#4-5-Arduino-程序函数1" class="headerlink" title="4.5 Arduino 程序函数1"></a>4.5 Arduino 程序函数1</h2><h3 id="4-5-1-delayMicroseconds"><a href="#4-5-1-delayMicroseconds" class="headerlink" title="4.5.1 delayMicroseconds()"></a>4.5.1 delayMicroseconds()</h3><p>delayMicroseconds()与<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/delay/">delay()</a>函数都可用于暂停程序运行。不同的是，delayMicroseconds()的参数单位是微秒(1毫秒＝1000微秒),而delay函数参数单位是毫秒</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ledPin = <span class="number">13</span>;<span class="comment">//Arduino引脚13接LED</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(ledPin,OUTPUT);<span class="comment">//将LED连接引脚设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(ledPin,HIGH);</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">10000</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(ledPin,LOW);</span><br><span class="line">  <span class="built_in">delayMicrosecons</span>(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-5-Arduino-程序函数2"><a href="#4-5-Arduino-程序函数2" class="headerlink" title="4.5 Arduino 程序函数2"></a>4.5 Arduino 程序函数2</h2><h3 id="4-5-1-pinMode-LED-BUILTIN-OUTPUT"><a href="#4-5-1-pinMode-LED-BUILTIN-OUTPUT" class="headerlink" title="4.5.1 pinMode(LED_BUILTIN, OUTPUT);"></a>4.5.1 pinMode(LED_BUILTIN, OUTPUT);</h3><p>初始化引脚，将其设置为输出模式。为电路配上电源。</p>
<h3 id="4-5-2-digitalWrite"><a href="#4-5-2-digitalWrite" class="headerlink" title="4.5.2 digitalWrite();"></a>4.5.2 digitalWrite();</h3><p>为电路配上开关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">digitalWrite</span>(LED_BUILTIN,HIGH);<span class="comment">//有电流，点亮LED,5V</span></span><br><span class="line"><span class="built_in">digitalWrite</span>(LED_BUILTIN,LOW);<span class="comment">//无电流，熄灭LED,0V</span></span><br></pre></td></tr></table></figure>



<h1 id="5-数字输出"><a href="#5-数字输出" class="headerlink" title="5. 数字输出"></a>5. 数字输出</h1><h2 id="5-1-数字输出1-学用LED"><a href="#5-1-数字输出1-学用LED" class="headerlink" title="5.1 数字输出1 - 学用LED"></a>5.1 数字输出1 - 学用LED</h2><p> <strong>灯珠工作电流</strong> &#x3D; <strong>20MA</strong></p>
<p><strong>工作时产生压降</strong> &#x3D; <strong>2V</strong> </p>
<img src="/Users/xxsql/Library/Application Support/typora-user-images/截屏2023-04-19 14.33.36.png" alt="截屏2023-04-19 14.33.36" style="zoom: 25%;" /> 



<h2 id="5-2-数字输出2-Arduino控制LED"><a href="#5-2-数字输出2-Arduino控制LED" class="headerlink" title="5.2 数字输出2 - Arduino控制LED"></a>5.2 数字输出2 - Arduino控制LED</h2><p><img src="/Users/xxsql/Library/Application Support/typora-user-images/截屏2023-04-19 14.41.07.png" alt="截屏2023-04-19 14.41.07" style="zoom:25%;" /><img src="/Users/xxsql/Library/Application Support/typora-user-images/截屏2023-04-19 14.44.16.png" alt="截屏2023-04-19 14.44.16" style="zoom:25%;" /></p>
<p><strong>R &#x3D; U&#x2F;I &#x3D;3V&#x2F;20mA &#x3D; 150Ω</strong></p>
<h2 id="5-3-面包板"><a href="#5-3-面包板" class="headerlink" title="5.3 面包板"></a>5.3 面包板</h2><p>面包板&#x3D;&#x3D;两侧&#x3D;&#x3D;<strong>横向</strong>连接，&#x3D;&#x3D;中间&#x3D;&#x3D;<strong>纵向</strong>连接</p>
<img src="https://tinypic.host/images/2023/04/22/2023-04-22-17.55.46.png" alt="2023-04-22-17.55.46.png" border="0" style="zoom:50%;" />

<p>此时Arduino IDE程序上接口名称要改为<strong>引脚5</strong></p>
<h1 id="6-数字输入"><a href="#6-数字输入" class="headerlink" title="6. 数字输入"></a>6. 数字输入</h1><p>当引脚设置为输入模式时，引脚为高阻抗状态，可用于读取传感器信号或<strong>开关信号</strong></p>
<h2 id="6-1-按键开关"><a href="#6-1-按键开关" class="headerlink" title="6.1 按键开关"></a>6.1 按键开关</h2><p>&#x3D;&#x3D;相连不同侧，同侧不相连&#x3D;&#x3D;</p>
<img src="https://tinypic.host/images/2023/04/22/2023-04-22-18.01.42.png" alt="2023-04-22-18.01.42.png" border="0" style="zoom: 33%;" />

<img src="https://tinypic.host/images/2023/04/22/2023-04-22-18.02.17.png" alt="2023-04-22-18.02.17.png" border="0" style="zoom:50%;" />

<img src="https://tinypic.host/images/2023/04/22/2023-04-22-18.12.47.png" alt="2023-04-22-18.12.47.png" border="0" />

<p>开关按下前，Arduino读取高电平，走电阻线路不走接地线路</p>
<p>&#x3D;&#x3D;电阻使用上拉电阻（10kΩ）&#x3D;&#x3D;</p>
<p>开关按下后，Arduino读取低电平，走接地线路，被短路</p>
<h2 id="6-2-按键开关控制"><a href="#6-2-按键开关控制" class="headerlink" title="6.2 按键开关控制"></a>6.2 按键开关控制</h2><p>&#x3D;&#x3D;HIGH 1&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;LOW 0&#x3D;&#x3D;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> pushButton = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);<span class="comment">//初始化串口通讯，设置波特率为9600</span></span><br><span class="line">  <span class="built_in">pinMode</span>(pushButton, INPUT);<span class="comment">//将引脚2设置为输入状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> buttonState = <span class="built_in">digitalRead</span>(pushButton);<span class="comment">//初始化整型，赋值引脚2当前的状态</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(buttonState);<span class="comment">//将引脚2当前状态输入串口监视器，HIGH为1，LOW为0</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1</span>);<span class="comment">//为保证程序稳定进行暂时暂停1s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-输入上拉模式"><a href="#7-输入上拉模式" class="headerlink" title="7. 输入上拉模式"></a>7. 输入上拉模式</h1><p>Arduino自带内部上拉电阻，将引脚设置为输入上拉模式后就可以使用该电阻</p>
<p>![截屏2023-04-22 19.05.37](&#x2F;Users&#x2F;xxsql&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2023-04-22 19.05.37.png)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">2</span>,INPUT_PULLUP);<span class="comment">//将引脚2设置为输入上拉模式</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>,OUTPUT);<span class="comment">//将引脚13设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> sensorVal = <span class="built_in">digitalRead</span>(<span class="number">2</span>);<span class="comment">//将引脚2状态赋值给整型sensorVal</span></span><br><span class="line">  Serial.<span class="built_in">println</span>(sensorVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按钮没有按下时，sensorVal为高电平，熄灭LED</span></span><br><span class="line"><span class="keyword">if</span> (sensorVal == HIGH) &#123;  <span class="comment">//如果按钮没有按下</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="number">13</span>,LOW);<span class="comment">//熄灭LED</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;               <span class="comment">//否则</span></span><br><span class="line">  <span class="built_in">digitalWirte</span>(<span class="number">13</span>,HIGH);<span class="comment">//点亮LED</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-1-if…else语句"><a href="#7-1-if…else语句" class="headerlink" title="7.1 if…else语句"></a>7.1 if…else语句</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>) &#123;</span><br><span class="line">  语句块<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-关系运算符号"><a href="#7-2-关系运算符号" class="headerlink" title="7.2 关系运算符号"></a>7.2 关系运算符号</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">x == y</span><br><span class="line">x != y</span><br><span class="line">x &lt; y</span><br><span class="line">x &gt; y</span><br><span class="line">x &lt;= y</span><br><span class="line">x &gt;= y</span><br></pre></td></tr></table></figure>

<h2 id="7-3-布尔类型（Booolean）"><a href="#7-3-布尔类型（Booolean）" class="headerlink" title="7.3 布尔类型（Booolean）"></a>7.3 布尔类型（Booolean）</h2><p>&#x3D;&#x3D;True 1&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;False 0&#x3D;&#x3D;</p>
<p>除0以外任何数值都会被当成1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">boolean pushButton;<span class="comment">//设置变量pushButton为布尔型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">2</span>,INPUT_PULLUP);<span class="comment">//设置引脚2为输入上拉模式</span></span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="number">13</span>,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pushButton = <span class="built_in">digitalRead</span>(<span class="number">2</span>);<span class="comment">//将引脚2状态赋值给pushButton</span></span><br><span class="line">  <span class="keyword">if</span> (pushButton) &#123;       <span class="comment">//如果开关不按下，引脚2为高电平，pushButton为True</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>,HIGH);<span class="comment">//点亮LED</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                <span class="comment">//如果开关按下，pushButton为False</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>,LOW);<span class="comment">//熄灭LED</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客创建步骤</title>
    <url>/2023/07/18/hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h2 id="创建新的博客"><a href="#创建新的博客" class="headerlink" title="创建新的博客"></a>创建新的博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;filename&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="编辑博客"><a href="#编辑博客" class="headerlink" title="编辑博客"></a>编辑博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/_posts</span><br><span class="line">vim filename</span><br></pre></td></tr></table></figure>

<h2 id="清理并生成博客"><a href="#清理并生成博客" class="headerlink" title="清理并生成博客"></a>清理并生成博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>技能</tag>
      </tags>
  </entry>
</search>
